{
  "language": "Solidity",
  "sources": {
    "@account-abstraction/contracts/core/BasePaymaster.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n\n/* solhint-disable reason-string */\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/IPaymaster.sol\";\nimport \"../interfaces/IEntryPoint.sol\";\nimport \"./Helpers.sol\";\n\n/**\n * Helper class for creating a paymaster.\n * provides helper methods for staking.\n * validates that the postOp is called only by the entryPoint\n */\nabstract contract BasePaymaster is IPaymaster, Ownable {\n\n    IEntryPoint immutable public entryPoint;\n\n    constructor(IEntryPoint _entryPoint) {\n        entryPoint = _entryPoint;\n    }\n\n    /// @inheritdoc IPaymaster\n    function validatePaymasterUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 maxCost)\n    external override returns (bytes memory context, uint256 validationData) {\n         _requireFromEntryPoint();\n        return _validatePaymasterUserOp(userOp, userOpHash, maxCost);\n    }\n\n    function _validatePaymasterUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 maxCost)\n    internal virtual returns (bytes memory context, uint256 validationData);\n\n    /// @inheritdoc IPaymaster\n    function postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) external override {\n        _requireFromEntryPoint();\n        _postOp(mode, context, actualGasCost);\n    }\n\n    /**\n     * post-operation handler.\n     * (verified to be called only through the entryPoint)\n     * @dev if subclass returns a non-empty context from validatePaymasterUserOp, it must also implement this method.\n     * @param mode enum with the following options:\n     *      opSucceeded - user operation succeeded.\n     *      opReverted  - user op reverted. still has to pay for gas.\n     *      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.\n     *                       Now this is the 2nd call, after user's op was deliberately reverted.\n     * @param context - the context value returned by validatePaymasterUserOp\n     * @param actualGasCost - actual gas used so far (without this postOp call).\n     */\n    function _postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) internal virtual {\n\n        (mode,context,actualGasCost); // unused params\n        // subclass must override this method if validatePaymasterUserOp returns a context\n        revert(\"must override\");\n    }\n\n    /**\n     * add a deposit for this paymaster, used for paying for transaction fees\n     */\n    function deposit() public payable {\n        entryPoint.depositTo{value : msg.value}(address(this));\n    }\n\n    /**\n     * withdraw value from the deposit\n     * @param withdrawAddress target to send to\n     * @param amount to withdraw\n     */\n    function withdrawTo(address payable withdrawAddress, uint256 amount) public onlyOwner {\n        entryPoint.withdrawTo(withdrawAddress, amount);\n    }\n    /**\n     * add stake for this paymaster.\n     * This method can also carry eth value to add to the current stake.\n     * @param unstakeDelaySec - the unstake delay for this paymaster. Can only be increased.\n     */\n    function addStake(uint32 unstakeDelaySec) external payable onlyOwner {\n        entryPoint.addStake{value : msg.value}(unstakeDelaySec);\n    }\n\n    /**\n     * return current paymaster's deposit on the entryPoint.\n     */\n    function getDeposit() public view returns (uint256) {\n        return entryPoint.balanceOf(address(this));\n    }\n\n    /**\n     * unlock the stake, in order to withdraw it.\n     * The paymaster can't serve requests once unlocked, until it calls addStake again\n     */\n    function unlockStake() external onlyOwner {\n        entryPoint.unlockStake();\n    }\n\n    /**\n     * withdraw the entire paymaster's stake.\n     * stake must be unlocked first (and then wait for the unstakeDelay to be over)\n     * @param withdrawAddress the address to send withdrawn value.\n     */\n    function withdrawStake(address payable withdrawAddress) external onlyOwner {\n        entryPoint.withdrawStake(withdrawAddress);\n    }\n\n    /// validate the call is made from a valid entrypoint\n    function _requireFromEntryPoint() internal virtual {\n        require(msg.sender == address(entryPoint), \"Sender not EntryPoint\");\n    }\n}\n"
    },
    "@account-abstraction/contracts/core/EntryPoint.sol": {
      "content": "/**\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\n ** Only one instance required on each chain.\n **/\n// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable avoid-low-level-calls */\n/* solhint-disable no-inline-assembly */\n\nimport \"../interfaces/IAccount.sol\";\nimport \"../interfaces/IPaymaster.sol\";\nimport \"../interfaces/IEntryPoint.sol\";\n\nimport \"../utils/Exec.sol\";\nimport \"./StakeManager.sol\";\nimport \"./SenderCreator.sol\";\nimport \"./Helpers.sol\";\nimport \"./NonceManager.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard {\n\n    using UserOperationLib for UserOperation;\n\n    SenderCreator private immutable senderCreator = new SenderCreator();\n\n    // internal value used during simulation: need to query aggregator.\n    address private constant SIMULATE_FIND_AGGREGATOR = address(1);\n\n    // marker for inner call revert on out of gas\n    bytes32 private constant INNER_OUT_OF_GAS = hex'deaddead';\n\n    uint256 private constant REVERT_REASON_MAX_LEN = 2048;\n\n    /**\n     * for simulation purposes, validateUserOp (and validatePaymasterUserOp) must return this value\n     * in case of signature failure, instead of revert.\n     */\n    uint256 public constant SIG_VALIDATION_FAILED = 1;\n\n    /**\n     * compensate the caller's beneficiary address with the collected fees of all UserOperations.\n     * @param beneficiary the address to receive the fees\n     * @param amount amount to transfer.\n     */\n    function _compensate(address payable beneficiary, uint256 amount) internal {\n        require(beneficiary != address(0), \"AA90 invalid beneficiary\");\n        (bool success,) = beneficiary.call{value : amount}(\"\");\n        require(success, \"AA91 failed send to beneficiary\");\n    }\n\n    /**\n     * execute a user op\n     * @param opIndex index into the opInfo array\n     * @param userOp the userOp to execute\n     * @param opInfo the opInfo filled by validatePrepayment for this userOp.\n     * @return collected the total amount this userOp paid.\n     */\n    function _executeUserOp(uint256 opIndex, UserOperation calldata userOp, UserOpInfo memory opInfo) private returns (uint256 collected) {\n        uint256 preGas = gasleft();\n        bytes memory context = getMemoryBytesFromOffset(opInfo.contextOffset);\n\n        try this.innerHandleOp(userOp.callData, opInfo, context) returns (uint256 _actualGasCost) {\n            collected = _actualGasCost;\n        } catch {\n            bytes32 innerRevertCode;\n            assembly {\n                returndatacopy(0, 0, 32)\n                innerRevertCode := mload(0)\n            }\n            // handleOps was called with gas limit too low. abort entire bundle.\n            if (innerRevertCode == INNER_OUT_OF_GAS) {\n                //report paymaster, since if it is not deliberately caused by the bundler,\n                // it must be a revert caused by paymaster.\n                revert FailedOp(opIndex, \"AA95 out of gas\");\n            }\n\n            uint256 actualGas = preGas - gasleft() + opInfo.preOpGas;\n            collected = _handlePostOp(opIndex, IPaymaster.PostOpMode.postOpReverted, opInfo, context, actualGas);\n        }\n    }\n\n    /**\n     * Execute a batch of UserOperations.\n     * no signature aggregator is used.\n     * if any account requires an aggregator (that is, it returned an aggregator when\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\n     * @param ops the operations to execute\n     * @param beneficiary the address to receive the fees\n     */\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) public nonReentrant {\n\n        uint256 opslen = ops.length;\n        UserOpInfo[] memory opInfos = new UserOpInfo[](opslen);\n\n    unchecked {\n        for (uint256 i = 0; i < opslen; i++) {\n            UserOpInfo memory opInfo = opInfos[i];\n            (uint256 validationData, uint256 pmValidationData) = _validatePrepayment(i, ops[i], opInfo);\n            _validateAccountAndPaymasterValidationData(i, validationData, pmValidationData, address(0));\n        }\n\n        uint256 collected = 0;\n        emit BeforeExecution();\n\n        for (uint256 i = 0; i < opslen; i++) {\n            collected += _executeUserOp(i, ops[i], opInfos[i]);\n        }\n\n        _compensate(beneficiary, collected);\n    } //unchecked\n    }\n\n    /**\n     * Execute a batch of UserOperation with Aggregators\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\n     * @param beneficiary the address to receive the fees\n     */\n    function handleAggregatedOps(\n        UserOpsPerAggregator[] calldata opsPerAggregator,\n        address payable beneficiary\n    ) public nonReentrant {\n\n        uint256 opasLen = opsPerAggregator.length;\n        uint256 totalOps = 0;\n        for (uint256 i = 0; i < opasLen; i++) {\n            UserOpsPerAggregator calldata opa = opsPerAggregator[i];\n            UserOperation[] calldata ops = opa.userOps;\n            IAggregator aggregator = opa.aggregator;\n\n            //address(1) is special marker of \"signature error\"\n            require(address(aggregator) != address(1), \"AA96 invalid aggregator\");\n\n            if (address(aggregator) != address(0)) {\n                // solhint-disable-next-line no-empty-blocks\n                try aggregator.validateSignatures(ops, opa.signature) {}\n                catch {\n                    revert SignatureValidationFailed(address(aggregator));\n                }\n            }\n\n            totalOps += ops.length;\n        }\n\n        UserOpInfo[] memory opInfos = new UserOpInfo[](totalOps);\n\n        emit BeforeExecution();\n\n        uint256 opIndex = 0;\n        for (uint256 a = 0; a < opasLen; a++) {\n            UserOpsPerAggregator calldata opa = opsPerAggregator[a];\n            UserOperation[] calldata ops = opa.userOps;\n            IAggregator aggregator = opa.aggregator;\n\n            uint256 opslen = ops.length;\n            for (uint256 i = 0; i < opslen; i++) {\n                UserOpInfo memory opInfo = opInfos[opIndex];\n                (uint256 validationData, uint256 paymasterValidationData) = _validatePrepayment(opIndex, ops[i], opInfo);\n                _validateAccountAndPaymasterValidationData(i, validationData, paymasterValidationData, address(aggregator));\n                opIndex++;\n            }\n        }\n\n        uint256 collected = 0;\n        opIndex = 0;\n        for (uint256 a = 0; a < opasLen; a++) {\n            UserOpsPerAggregator calldata opa = opsPerAggregator[a];\n            emit SignatureAggregatorChanged(address(opa.aggregator));\n            UserOperation[] calldata ops = opa.userOps;\n            uint256 opslen = ops.length;\n\n            for (uint256 i = 0; i < opslen; i++) {\n                collected += _executeUserOp(opIndex, ops[i], opInfos[opIndex]);\n                opIndex++;\n            }\n        }\n        emit SignatureAggregatorChanged(address(0));\n\n        _compensate(beneficiary, collected);\n    }\n\n    /// @inheritdoc IEntryPoint\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external override {\n\n        UserOpInfo memory opInfo;\n        _simulationOnlyValidations(op);\n        (uint256 validationData, uint256 paymasterValidationData) = _validatePrepayment(0, op, opInfo);\n        ValidationData memory data = _intersectTimeRange(validationData, paymasterValidationData);\n\n        numberMarker();\n        uint256 paid = _executeUserOp(0, op, opInfo);\n        numberMarker();\n        bool targetSuccess;\n        bytes memory targetResult;\n        if (target != address(0)) {\n            (targetSuccess, targetResult) = target.call(targetCallData);\n        }\n        revert ExecutionResult(opInfo.preOpGas, paid, data.validAfter, data.validUntil, targetSuccess, targetResult);\n    }\n\n\n    // A memory copy of UserOp static fields only.\n    // Excluding: callData, initCode and signature. Replacing paymasterAndData with paymaster.\n    struct MemoryUserOp {\n        address sender;\n        uint256 nonce;\n        uint256 callGasLimit;\n        uint256 verificationGasLimit;\n        uint256 preVerificationGas;\n        address paymaster;\n        uint256 maxFeePerGas;\n        uint256 maxPriorityFeePerGas;\n    }\n\n    struct UserOpInfo {\n        MemoryUserOp mUserOp;\n        bytes32 userOpHash;\n        uint256 prefund;\n        uint256 contextOffset;\n        uint256 preOpGas;\n    }\n\n    /**\n     * inner function to handle a UserOperation.\n     * Must be declared \"external\" to open a call context, but it can only be called by handleOps.\n     */\n    function innerHandleOp(bytes memory callData, UserOpInfo memory opInfo, bytes calldata context) external returns (uint256 actualGasCost) {\n        uint256 preGas = gasleft();\n        require(msg.sender == address(this), \"AA92 internal call only\");\n        MemoryUserOp memory mUserOp = opInfo.mUserOp;\n\n        uint callGasLimit = mUserOp.callGasLimit;\n    unchecked {\n        // handleOps was called with gas limit too low. abort entire bundle.\n        if (gasleft() < callGasLimit + mUserOp.verificationGasLimit + 5000) {\n            assembly {\n                mstore(0, INNER_OUT_OF_GAS)\n                revert(0, 32)\n            }\n        }\n    }\n\n        IPaymaster.PostOpMode mode = IPaymaster.PostOpMode.opSucceeded;\n        if (callData.length > 0) {\n            bool success = Exec.call(mUserOp.sender, 0, callData, callGasLimit);\n            if (!success) {\n                bytes memory result = Exec.getReturnData(REVERT_REASON_MAX_LEN);\n                if (result.length > 0) {\n                    emit UserOperationRevertReason(opInfo.userOpHash, mUserOp.sender, mUserOp.nonce, result);\n                }\n                mode = IPaymaster.PostOpMode.opReverted;\n            }\n        }\n\n    unchecked {\n        uint256 actualGas = preGas - gasleft() + opInfo.preOpGas;\n        //note: opIndex is ignored (relevant only if mode==postOpReverted, which is only possible outside of innerHandleOp)\n        return _handlePostOp(0, mode, opInfo, context, actualGas);\n    }\n    }\n\n    /**\n     * generate a request Id - unique identifier for this request.\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\n     */\n    function getUserOpHash(UserOperation calldata userOp) public view returns (bytes32) {\n        return keccak256(abi.encode(userOp.hash(), address(this), block.chainid));\n    }\n\n    /**\n     * copy general fields from userOp into the memory opInfo structure.\n     */\n    function _copyUserOpToMemory(UserOperation calldata userOp, MemoryUserOp memory mUserOp) internal pure {\n        mUserOp.sender = userOp.sender;\n        mUserOp.nonce = userOp.nonce;\n        mUserOp.callGasLimit = userOp.callGasLimit;\n        mUserOp.verificationGasLimit = userOp.verificationGasLimit;\n        mUserOp.preVerificationGas = userOp.preVerificationGas;\n        mUserOp.maxFeePerGas = userOp.maxFeePerGas;\n        mUserOp.maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\n        bytes calldata paymasterAndData = userOp.paymasterAndData;\n        if (paymasterAndData.length > 0) {\n            require(paymasterAndData.length >= 20, \"AA93 invalid paymasterAndData\");\n            mUserOp.paymaster = address(bytes20(paymasterAndData[: 20]));\n        } else {\n            mUserOp.paymaster = address(0);\n        }\n    }\n\n    /**\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\n     * @param userOp the user operation to validate.\n     */\n    function simulateValidation(UserOperation calldata userOp) external {\n        UserOpInfo memory outOpInfo;\n\n        _simulationOnlyValidations(userOp);\n        (uint256 validationData, uint256 paymasterValidationData) = _validatePrepayment(0, userOp, outOpInfo);\n        StakeInfo memory paymasterInfo = _getStakeInfo(outOpInfo.mUserOp.paymaster);\n        StakeInfo memory senderInfo = _getStakeInfo(outOpInfo.mUserOp.sender);\n        StakeInfo memory factoryInfo;\n        {\n            bytes calldata initCode = userOp.initCode;\n            address factory = initCode.length >= 20 ? address(bytes20(initCode[0 : 20])) : address(0);\n            factoryInfo = _getStakeInfo(factory);\n        }\n\n        ValidationData memory data = _intersectTimeRange(validationData, paymasterValidationData);\n        address aggregator = data.aggregator;\n        bool sigFailed = aggregator == address(1);\n        ReturnInfo memory returnInfo = ReturnInfo(outOpInfo.preOpGas, outOpInfo.prefund,\n            sigFailed, data.validAfter, data.validUntil, getMemoryBytesFromOffset(outOpInfo.contextOffset));\n\n        if (aggregator != address(0) && aggregator != address(1)) {\n            AggregatorStakeInfo memory aggregatorInfo = AggregatorStakeInfo(aggregator, _getStakeInfo(aggregator));\n            revert ValidationResultWithAggregation(returnInfo, senderInfo, factoryInfo, paymasterInfo, aggregatorInfo);\n        }\n        revert ValidationResult(returnInfo, senderInfo, factoryInfo, paymasterInfo);\n\n    }\n\n    function _getRequiredPrefund(MemoryUserOp memory mUserOp) internal pure returns (uint256 requiredPrefund) {\n    unchecked {\n        //when using a Paymaster, the verificationGasLimit is used also to as a limit for the postOp call.\n        // our security model might call postOp eventually twice\n        uint256 mul = mUserOp.paymaster != address(0) ? 3 : 1;\n        uint256 requiredGas = mUserOp.callGasLimit + mUserOp.verificationGasLimit * mul + mUserOp.preVerificationGas;\n\n        requiredPrefund = requiredGas * mUserOp.maxFeePerGas;\n    }\n    }\n\n    // create the sender's contract if needed.\n    function _createSenderIfNeeded(uint256 opIndex, UserOpInfo memory opInfo, bytes calldata initCode) internal {\n        if (initCode.length != 0) {\n            address sender = opInfo.mUserOp.sender;\n            if (sender.code.length != 0) revert FailedOp(opIndex, \"AA10 sender already constructed\");\n            address sender1 = senderCreator.createSender{gas : opInfo.mUserOp.verificationGasLimit}(initCode);\n            if (sender1 == address(0)) revert FailedOp(opIndex, \"AA13 initCode failed or OOG\");\n            if (sender1 != sender) revert FailedOp(opIndex, \"AA14 initCode must return sender\");\n            if (sender1.code.length == 0) revert FailedOp(opIndex, \"AA15 initCode must create sender\");\n            address factory = address(bytes20(initCode[0 : 20]));\n            emit AccountDeployed(opInfo.userOpHash, sender, factory, opInfo.mUserOp.paymaster);\n        }\n    }\n\n    /**\n     * Get counterfactual sender address.\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\n     * this method always revert, and returns the address in SenderAddressResult error\n     * @param initCode the constructor code to be passed into the UserOperation.\n     */\n    function getSenderAddress(bytes calldata initCode) public {\n        address sender = senderCreator.createSender(initCode);\n        revert SenderAddressResult(sender);\n    }\n\n    function _simulationOnlyValidations(UserOperation calldata userOp) internal view {\n        // solhint-disable-next-line no-empty-blocks\n        try this._validateSenderAndPaymaster(userOp.initCode, userOp.sender, userOp.paymasterAndData) {}\n        catch Error(string memory revertReason) {\n            if (bytes(revertReason).length != 0) {\n                revert FailedOp(0, revertReason);\n            }\n        }\n    }\n\n    /**\n    * Called only during simulation.\n    * This function always reverts to prevent warm/cold storage differentiation in simulation vs execution.\n    */\n    function _validateSenderAndPaymaster(bytes calldata initCode, address sender, bytes calldata paymasterAndData) external view {\n        if (initCode.length == 0 && sender.code.length == 0) {\n            // it would revert anyway. but give a meaningful message\n            revert(\"AA20 account not deployed\");\n        }\n        if (paymasterAndData.length >= 20) {\n            address paymaster = address(bytes20(paymasterAndData[0 : 20]));\n            if (paymaster.code.length == 0) {\n                // it would revert anyway. but give a meaningful message\n                revert(\"AA30 paymaster not deployed\");\n            }\n        }\n        // always revert\n        revert(\"\");\n    }\n\n    /**\n     * call account.validateUserOp.\n     * revert (with FailedOp) in case validateUserOp reverts, or account didn't send required prefund.\n     * decrement account's deposit if needed\n     */\n    function _validateAccountPrepayment(uint256 opIndex, UserOperation calldata op, UserOpInfo memory opInfo, uint256 requiredPrefund)\n    internal returns (uint256 gasUsedByValidateAccountPrepayment, uint256 validationData) {\n    unchecked {\n        uint256 preGas = gasleft();\n        MemoryUserOp memory mUserOp = opInfo.mUserOp;\n        address sender = mUserOp.sender;\n        _createSenderIfNeeded(opIndex, opInfo, op.initCode);\n        address paymaster = mUserOp.paymaster;\n        numberMarker();\n        uint256 missingAccountFunds = 0;\n        if (paymaster == address(0)) {\n            uint256 bal = balanceOf(sender);\n            missingAccountFunds = bal > requiredPrefund ? 0 : requiredPrefund - bal;\n        }\n        try IAccount(sender).validateUserOp{gas : mUserOp.verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\n        returns (uint256 _validationData) {\n            validationData = _validationData;\n        } catch Error(string memory revertReason) {\n            revert FailedOp(opIndex, string.concat(\"AA23 reverted: \", revertReason));\n        } catch {\n            revert FailedOp(opIndex, \"AA23 reverted (or OOG)\");\n        }\n        if (paymaster == address(0)) {\n            DepositInfo storage senderInfo = deposits[sender];\n            uint256 deposit = senderInfo.deposit;\n            if (requiredPrefund > deposit) {\n                revert FailedOp(opIndex, \"AA21 didn't pay prefund\");\n            }\n            senderInfo.deposit = uint112(deposit - requiredPrefund);\n        }\n        gasUsedByValidateAccountPrepayment = preGas - gasleft();\n    }\n    }\n\n    /**\n     * In case the request has a paymaster:\n     * Validate paymaster has enough deposit.\n     * Call paymaster.validatePaymasterUserOp.\n     * Revert with proper FailedOp in case paymaster reverts.\n     * Decrement paymaster's deposit\n     */\n    function _validatePaymasterPrepayment(uint256 opIndex, UserOperation calldata op, UserOpInfo memory opInfo, uint256 requiredPreFund, uint256 gasUsedByValidateAccountPrepayment)\n    internal returns (bytes memory context, uint256 validationData) {\n    unchecked {\n        MemoryUserOp memory mUserOp = opInfo.mUserOp;\n        uint256 verificationGasLimit = mUserOp.verificationGasLimit;\n        require(verificationGasLimit > gasUsedByValidateAccountPrepayment, \"AA41 too little verificationGas\");\n        uint256 gas = verificationGasLimit - gasUsedByValidateAccountPrepayment;\n\n        address paymaster = mUserOp.paymaster;\n        DepositInfo storage paymasterInfo = deposits[paymaster];\n        uint256 deposit = paymasterInfo.deposit;\n        if (deposit < requiredPreFund) {\n            revert FailedOp(opIndex, \"AA31 paymaster deposit too low\");\n        }\n        paymasterInfo.deposit = uint112(deposit - requiredPreFund);\n        try IPaymaster(paymaster).validatePaymasterUserOp{gas : gas}(op, opInfo.userOpHash, requiredPreFund) returns (bytes memory _context, uint256 _validationData){\n            context = _context;\n            validationData = _validationData;\n        } catch Error(string memory revertReason) {\n            revert FailedOp(opIndex, string.concat(\"AA33 reverted: \", revertReason));\n        } catch {\n            revert FailedOp(opIndex, \"AA33 reverted (or OOG)\");\n        }\n    }\n    }\n\n    /**\n     * revert if either account validationData or paymaster validationData is expired\n     */\n    function _validateAccountAndPaymasterValidationData(uint256 opIndex, uint256 validationData, uint256 paymasterValidationData, address expectedAggregator) internal view {\n        (address aggregator, bool outOfTimeRange) = _getValidationData(validationData);\n        if (expectedAggregator != aggregator) {\n            revert FailedOp(opIndex, \"AA24 signature error\");\n        }\n        if (outOfTimeRange) {\n            revert FailedOp(opIndex, \"AA22 expired or not due\");\n        }\n        //pmAggregator is not a real signature aggregator: we don't have logic to handle it as address.\n        // non-zero address means that the paymaster fails due to some signature check (which is ok only during estimation)\n        address pmAggregator;\n        (pmAggregator, outOfTimeRange) = _getValidationData(paymasterValidationData);\n        if (pmAggregator != address(0)) {\n            revert FailedOp(opIndex, \"AA34 signature error\");\n        }\n        if (outOfTimeRange) {\n            revert FailedOp(opIndex, \"AA32 paymaster expired or not due\");\n        }\n    }\n\n    function _getValidationData(uint256 validationData) internal view returns (address aggregator, bool outOfTimeRange) {\n        if (validationData == 0) {\n            return (address(0), false);\n        }\n        ValidationData memory data = _parseValidationData(validationData);\n        // solhint-disable-next-line not-rely-on-time\n        outOfTimeRange = block.timestamp > data.validUntil || block.timestamp < data.validAfter;\n        aggregator = data.aggregator;\n    }\n\n    /**\n     * validate account and paymaster (if defined).\n     * also make sure total validation doesn't exceed verificationGasLimit\n     * this method is called off-chain (simulateValidation()) and on-chain (from handleOps)\n     * @param opIndex the index of this userOp into the \"opInfos\" array\n     * @param userOp the userOp to validate\n     */\n    function _validatePrepayment(uint256 opIndex, UserOperation calldata userOp, UserOpInfo memory outOpInfo)\n    private returns (uint256 validationData, uint256 paymasterValidationData) {\n\n        uint256 preGas = gasleft();\n        MemoryUserOp memory mUserOp = outOpInfo.mUserOp;\n        _copyUserOpToMemory(userOp, mUserOp);\n        outOpInfo.userOpHash = getUserOpHash(userOp);\n\n        // validate all numeric values in userOp are well below 128 bit, so they can safely be added\n        // and multiplied without causing overflow\n        uint256 maxGasValues = mUserOp.preVerificationGas | mUserOp.verificationGasLimit | mUserOp.callGasLimit |\n        userOp.maxFeePerGas | userOp.maxPriorityFeePerGas;\n        require(maxGasValues <= type(uint120).max, \"AA94 gas values overflow\");\n\n        uint256 gasUsedByValidateAccountPrepayment;\n        (uint256 requiredPreFund) = _getRequiredPrefund(mUserOp);\n        (gasUsedByValidateAccountPrepayment, validationData) = _validateAccountPrepayment(opIndex, userOp, outOpInfo, requiredPreFund);\n\n        if (!_validateAndUpdateNonce(mUserOp.sender, mUserOp.nonce)) {\n            revert FailedOp(opIndex, \"AA25 invalid account nonce\");\n        }\n\n        //a \"marker\" where account opcode validation is done and paymaster opcode validation is about to start\n        // (used only by off-chain simulateValidation)\n        numberMarker();\n\n        bytes memory context;\n        if (mUserOp.paymaster != address(0)) {\n            (context, paymasterValidationData) = _validatePaymasterPrepayment(opIndex, userOp, outOpInfo, requiredPreFund, gasUsedByValidateAccountPrepayment);\n        }\n    unchecked {\n        uint256 gasUsed = preGas - gasleft();\n\n        if (userOp.verificationGasLimit < gasUsed) {\n            revert FailedOp(opIndex, \"AA40 over verificationGasLimit\");\n        }\n        outOpInfo.prefund = requiredPreFund;\n        outOpInfo.contextOffset = getOffsetOfMemoryBytes(context);\n        outOpInfo.preOpGas = preGas - gasleft() + userOp.preVerificationGas;\n    }\n    }\n\n    /**\n     * process post-operation.\n     * called just after the callData is executed.\n     * if a paymaster is defined and its validation returned a non-empty context, its postOp is called.\n     * the excess amount is refunded to the account (or paymaster - if it was used in the request)\n     * @param opIndex index in the batch\n     * @param mode - whether is called from innerHandleOp, or outside (postOpReverted)\n     * @param opInfo userOp fields and info collected during validation\n     * @param context the context returned in validatePaymasterUserOp\n     * @param actualGas the gas used so far by this user operation\n     */\n    function _handlePostOp(uint256 opIndex, IPaymaster.PostOpMode mode, UserOpInfo memory opInfo, bytes memory context, uint256 actualGas) private returns (uint256 actualGasCost) {\n        uint256 preGas = gasleft();\n    unchecked {\n        address refundAddress;\n        MemoryUserOp memory mUserOp = opInfo.mUserOp;\n        uint256 gasPrice = getUserOpGasPrice(mUserOp);\n\n        address paymaster = mUserOp.paymaster;\n        if (paymaster == address(0)) {\n            refundAddress = mUserOp.sender;\n        } else {\n            refundAddress = paymaster;\n            if (context.length > 0) {\n                actualGasCost = actualGas * gasPrice;\n                if (mode != IPaymaster.PostOpMode.postOpReverted) {\n                    IPaymaster(paymaster).postOp{gas : mUserOp.verificationGasLimit}(mode, context, actualGasCost);\n                } else {\n                    // solhint-disable-next-line no-empty-blocks\n                    try IPaymaster(paymaster).postOp{gas : mUserOp.verificationGasLimit}(mode, context, actualGasCost) {}\n                    catch Error(string memory reason) {\n                        revert FailedOp(opIndex, string.concat(\"AA50 postOp reverted: \", reason));\n                    }\n                    catch {\n                        revert FailedOp(opIndex, \"AA50 postOp revert\");\n                    }\n                }\n            }\n        }\n        actualGas += preGas - gasleft();\n        actualGasCost = actualGas * gasPrice;\n        if (opInfo.prefund < actualGasCost) {\n            revert FailedOp(opIndex, \"AA51 prefund below actualGasCost\");\n        }\n        uint256 refund = opInfo.prefund - actualGasCost;\n        _incrementDeposit(refundAddress, refund);\n        bool success = mode == IPaymaster.PostOpMode.opSucceeded;\n        emit UserOperationEvent(opInfo.userOpHash, mUserOp.sender, mUserOp.paymaster, mUserOp.nonce, success, actualGasCost, actualGas);\n    } // unchecked\n    }\n\n    /**\n     * the gas price this UserOp agrees to pay.\n     * relayer/block builder might submit the TX with higher priorityFee, but the user should not\n     */\n    function getUserOpGasPrice(MemoryUserOp memory mUserOp) internal view returns (uint256) {\n    unchecked {\n        uint256 maxFeePerGas = mUserOp.maxFeePerGas;\n        uint256 maxPriorityFeePerGas = mUserOp.maxPriorityFeePerGas;\n        if (maxFeePerGas == maxPriorityFeePerGas) {\n            //legacy mode (for networks that don't support basefee opcode)\n            return maxFeePerGas;\n        }\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\n    }\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    function getOffsetOfMemoryBytes(bytes memory data) internal pure returns (uint256 offset) {\n        assembly {offset := data}\n    }\n\n    function getMemoryBytesFromOffset(uint256 offset) internal pure returns (bytes memory data) {\n        assembly {data := offset}\n    }\n\n    //place the NUMBER opcode in the code.\n    // this is used as a marker during simulation, as this OP is completely banned from the simulated code of the\n    // account and paymaster.\n    function numberMarker() internal view {\n        assembly {mstore(0, number())}\n    }\n}\n\n"
    },
    "@account-abstraction/contracts/core/Helpers.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable no-inline-assembly */\n\n/**\n * returned data from validateUserOp.\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\n * @param aggregator - address(0) - the account validated the signature by itself.\n *              address(1) - the account failed to validate the signature.\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\n * @param validAfter - this UserOp is valid only after this timestamp.\n * @param validaUntil - this UserOp is valid only up to this timestamp.\n */\n    struct ValidationData {\n        address aggregator;\n        uint48 validAfter;\n        uint48 validUntil;\n    }\n\n//extract sigFailed, validAfter, validUntil.\n// also convert zero validUntil to type(uint48).max\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\n        address aggregator = address(uint160(validationData));\n        uint48 validUntil = uint48(validationData >> 160);\n        if (validUntil == 0) {\n            validUntil = type(uint48).max;\n        }\n        uint48 validAfter = uint48(validationData >> (48 + 160));\n        return ValidationData(aggregator, validAfter, validUntil);\n    }\n\n// intersect account and paymaster ranges.\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\n        address aggregator = accountValidationData.aggregator;\n        if (aggregator == address(0)) {\n            aggregator = pmValidationData.aggregator;\n        }\n        uint48 validAfter = accountValidationData.validAfter;\n        uint48 validUntil = accountValidationData.validUntil;\n        uint48 pmValidAfter = pmValidationData.validAfter;\n        uint48 pmValidUntil = pmValidationData.validUntil;\n\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\n        return ValidationData(aggregator, validAfter, validUntil);\n    }\n\n/**\n * helper to pack the return value for validateUserOp\n * @param data - the ValidationData to pack\n */\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\n    }\n\n/**\n * helper to pack the return value for validateUserOp, when not using an aggregator\n * @param sigFailed - true for signature failure, false for success\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\n * @param validAfter first timestamp this UserOperation is valid\n */\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\n    }\n\n/**\n * keccak function over calldata.\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\n */\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\n        assembly {\n            let mem := mload(0x40)\n            let len := data.length\n            calldatacopy(mem, data.offset, len)\n            ret := keccak256(mem, len)\n        }\n    }\n\n"
    },
    "@account-abstraction/contracts/core/NonceManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\nimport \"../interfaces/IEntryPoint.sol\";\n\n/**\n * nonce management functionality\n */\ncontract NonceManager is INonceManager {\n\n    /**\n     * The next valid sequence number for a given nonce key.\n     */\n    mapping(address => mapping(uint192 => uint256)) public nonceSequenceNumber;\n\n    function getNonce(address sender, uint192 key)\n    public view override returns (uint256 nonce) {\n        return nonceSequenceNumber[sender][key] | (uint256(key) << 64);\n    }\n\n    // allow an account to manually increment its own nonce.\n    // (mainly so that during construction nonce can be made non-zero,\n    // to \"absorb\" the gas cost of first nonce increment to 1st transaction (construction),\n    // not to 2nd transaction)\n    function incrementNonce(uint192 key) public override {\n        nonceSequenceNumber[msg.sender][key]++;\n    }\n\n    /**\n     * validate nonce uniqueness for this account.\n     * called just after validateUserOp()\n     */\n    function _validateAndUpdateNonce(address sender, uint256 nonce) internal returns (bool) {\n\n        uint192 key = uint192(nonce >> 64);\n        uint64 seq = uint64(nonce);\n        return nonceSequenceNumber[sender][key]++ == seq;\n    }\n\n}\n"
    },
    "@account-abstraction/contracts/core/SenderCreator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/**\n * helper contract for EntryPoint, to call userOp.initCode from a \"neutral\" address,\n * which is explicitly not the entryPoint itself.\n */\ncontract SenderCreator {\n\n    /**\n     * call the \"initCode\" factory to create and return the sender account address\n     * @param initCode the initCode value from a UserOp. contains 20 bytes of factory address, followed by calldata\n     * @return sender the returned address of the created account, or zero address on failure.\n     */\n    function createSender(bytes calldata initCode) external returns (address sender) {\n        address factory = address(bytes20(initCode[0 : 20]));\n        bytes memory initCallData = initCode[20 :];\n        bool success;\n        /* solhint-disable no-inline-assembly */\n        assembly {\n            success := call(gas(), factory, 0, add(initCallData, 0x20), mload(initCallData), 0, 32)\n            sender := mload(0)\n        }\n        if (!success) {\n            sender = address(0);\n        }\n    }\n}\n"
    },
    "@account-abstraction/contracts/core/StakeManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.12;\n\nimport \"../interfaces/IStakeManager.sol\";\n\n/* solhint-disable avoid-low-level-calls */\n/* solhint-disable not-rely-on-time */\n/**\n * manage deposits and stakes.\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\n * stake is value locked for at least \"unstakeDelay\" by a paymaster.\n */\nabstract contract StakeManager is IStakeManager {\n\n    /// maps paymaster to their deposits and stakes\n    mapping(address => DepositInfo) public deposits;\n\n    /// @inheritdoc IStakeManager\n    function getDepositInfo(address account) public view returns (DepositInfo memory info) {\n        return deposits[account];\n    }\n\n    // internal method to return just the stake info\n    function _getStakeInfo(address addr) internal view returns (StakeInfo memory info) {\n        DepositInfo storage depositInfo = deposits[addr];\n        info.stake = depositInfo.stake;\n        info.unstakeDelaySec = depositInfo.unstakeDelaySec;\n    }\n\n    /// return the deposit (for gas payment) of the account\n    function balanceOf(address account) public view returns (uint256) {\n        return deposits[account].deposit;\n    }\n\n    receive() external payable {\n        depositTo(msg.sender);\n    }\n\n    function _incrementDeposit(address account, uint256 amount) internal {\n        DepositInfo storage info = deposits[account];\n        uint256 newAmount = info.deposit + amount;\n        require(newAmount <= type(uint112).max, \"deposit overflow\");\n        info.deposit = uint112(newAmount);\n    }\n\n    /**\n     * add to the deposit of the given account\n     */\n    function depositTo(address account) public payable {\n        _incrementDeposit(account, msg.value);\n        DepositInfo storage info = deposits[account];\n        emit Deposited(account, info.deposit);\n    }\n\n    /**\n     * add to the account's stake - amount and delay\n     * any pending unstake is first cancelled.\n     * @param unstakeDelaySec the new lock duration before the deposit can be withdrawn.\n     */\n    function addStake(uint32 unstakeDelaySec) public payable {\n        DepositInfo storage info = deposits[msg.sender];\n        require(unstakeDelaySec > 0, \"must specify unstake delay\");\n        require(unstakeDelaySec >= info.unstakeDelaySec, \"cannot decrease unstake time\");\n        uint256 stake = info.stake + msg.value;\n        require(stake > 0, \"no stake specified\");\n        require(stake <= type(uint112).max, \"stake overflow\");\n        deposits[msg.sender] = DepositInfo(\n            info.deposit,\n            true,\n            uint112(stake),\n            unstakeDelaySec,\n            0\n        );\n        emit StakeLocked(msg.sender, stake, unstakeDelaySec);\n    }\n\n    /**\n     * attempt to unlock the stake.\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\n     */\n    function unlockStake() external {\n        DepositInfo storage info = deposits[msg.sender];\n        require(info.unstakeDelaySec != 0, \"not staked\");\n        require(info.staked, \"already unstaking\");\n        uint48 withdrawTime = uint48(block.timestamp) + info.unstakeDelaySec;\n        info.withdrawTime = withdrawTime;\n        info.staked = false;\n        emit StakeUnlocked(msg.sender, withdrawTime);\n    }\n\n\n    /**\n     * withdraw from the (unlocked) stake.\n     * must first call unlockStake and wait for the unstakeDelay to pass\n     * @param withdrawAddress the address to send withdrawn value.\n     */\n    function withdrawStake(address payable withdrawAddress) external {\n        DepositInfo storage info = deposits[msg.sender];\n        uint256 stake = info.stake;\n        require(stake > 0, \"No stake to withdraw\");\n        require(info.withdrawTime > 0, \"must call unlockStake() first\");\n        require(info.withdrawTime <= block.timestamp, \"Stake withdrawal is not due\");\n        info.unstakeDelaySec = 0;\n        info.withdrawTime = 0;\n        info.stake = 0;\n        emit StakeWithdrawn(msg.sender, withdrawAddress, stake);\n        (bool success,) = withdrawAddress.call{value : stake}(\"\");\n        require(success, \"failed to withdraw stake\");\n    }\n\n    /**\n     * withdraw from the deposit.\n     * @param withdrawAddress the address to send withdrawn value.\n     * @param withdrawAmount the amount to withdraw.\n     */\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external {\n        DepositInfo storage info = deposits[msg.sender];\n        require(withdrawAmount <= info.deposit, \"Withdraw amount too large\");\n        info.deposit = uint112(info.deposit - withdrawAmount);\n        emit Withdrawn(msg.sender, withdrawAddress, withdrawAmount);\n        (bool success,) = withdrawAddress.call{value : withdrawAmount}(\"\");\n        require(success, \"failed to withdraw\");\n    }\n}\n"
    },
    "@account-abstraction/contracts/interfaces/IAccount.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\nimport \"./UserOperation.sol\";\n\ninterface IAccount {\n\n    /**\n     * Validate user's signature and nonce\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\n     * This allows making a \"simulation call\" without a valid signature\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\n     *\n     * @dev Must validate caller is the entryPoint.\n     *      Must validate the signature and nonce\n     * @param userOp the operation that is about to be executed.\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\n     *      The excess is left as a deposit in the entrypoint, for future calls.\n     *      can be withdrawn anytime using \"entryPoint.withdrawTo()\"\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\n     *         otherwise, an address of an \"authorizer\" contract.\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\n     *      <6-byte> validAfter - first timestamp this operation is valid\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\n     */\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\n    external returns (uint256 validationData);\n}\n"
    },
    "@account-abstraction/contracts/interfaces/IAggregator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\nimport \"./UserOperation.sol\";\n\n/**\n * Aggregated Signatures validator.\n */\ninterface IAggregator {\n\n    /**\n     * validate aggregated signature.\n     * revert if the aggregated signature does not match the given list of operations.\n     */\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\n\n    /**\n     * validate signature of a single userOp\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\n     * @param userOp the userOperation received from the user.\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\n     *    (usually empty, unless account and aggregator support some kind of \"multisig\"\n     */\n    function validateUserOpSignature(UserOperation calldata userOp)\n    external view returns (bytes memory sigForUserOp);\n\n    /**\n     * aggregate multiple signatures into a single value.\n     * This method is called off-chain to calculate the signature to pass with handleOps()\n     * bundler MAY use optimized custom code perform this aggregation\n     * @param userOps array of UserOperations to collect the signatures from.\n     * @return aggregatedSignature the aggregated signature\n     */\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\n}\n"
    },
    "@account-abstraction/contracts/interfaces/IEntryPoint.sol": {
      "content": "/**\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\n ** Only one instance required on each chain.\n **/\n// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable avoid-low-level-calls */\n/* solhint-disable no-inline-assembly */\n/* solhint-disable reason-string */\n\nimport \"./UserOperation.sol\";\nimport \"./IStakeManager.sol\";\nimport \"./IAggregator.sol\";\nimport \"./INonceManager.sol\";\n\ninterface IEntryPoint is IStakeManager, INonceManager {\n\n    /***\n     * An event emitted after each successful request\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\n     * @param sender - the account that generates this request.\n     * @param paymaster - if non-null, the paymaster that pays for this request.\n     * @param nonce - the nonce value from the request.\n     * @param success - true if the sender transaction succeeded, false if reverted.\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\n     */\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\n\n    /**\n     * account \"sender\" was deployed.\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\n     * @param sender the account that is deployed\n     * @param factory the factory used to deploy this account (in the initCode)\n     * @param paymaster the paymaster used by this UserOp\n     */\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\n\n    /**\n     * An event emitted if the UserOperation \"callData\" reverted with non-zero length\n     * @param userOpHash the request unique identifier.\n     * @param sender the sender of this request\n     * @param nonce the nonce used in the request\n     * @param revertReason - the return bytes from the (reverted) call to \"callData\".\n     */\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\n\n    /**\n     * an event emitted by handleOps(), before starting the execution loop.\n     * any event emitted before this event, is part of the validation.\n     */\n    event BeforeExecution();\n\n    /**\n     * signature aggregator used by the following UserOperationEvents within this bundle.\n     */\n    event SignatureAggregatorChanged(address indexed aggregator);\n\n    /**\n     * a custom revert error of handleOps, to identify the offending op.\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\n     *  @param reason - revert reason\n     *      The string starts with a unique code \"AAmn\", where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,\n     *      so a failure can be attributed to the correct entity.\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\n     */\n    error FailedOp(uint256 opIndex, string reason);\n\n    /**\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\n     */\n    error SignatureValidationFailed(address aggregator);\n\n    /**\n     * Successful result from simulateValidation.\n     * @param returnInfo gas and time-range returned values\n     * @param senderInfo stake information about the sender\n     * @param factoryInfo stake information about the factory (if any)\n     * @param paymasterInfo stake information about the paymaster (if any)\n     */\n    error ValidationResult(ReturnInfo returnInfo,\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\n\n    /**\n     * Successful result from simulateValidation, if the account returns a signature aggregator\n     * @param returnInfo gas and time-range returned values\n     * @param senderInfo stake information about the sender\n     * @param factoryInfo stake information about the factory (if any)\n     * @param paymasterInfo stake information about the paymaster (if any)\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\n     */\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\n        AggregatorStakeInfo aggregatorInfo);\n\n    /**\n     * return value of getSenderAddress\n     */\n    error SenderAddressResult(address sender);\n\n    /**\n     * return value of simulateHandleOp\n     */\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint48 validAfter, uint48 validUntil, bool targetSuccess, bytes targetResult);\n\n    //UserOps handled, per aggregator\n    struct UserOpsPerAggregator {\n        UserOperation[] userOps;\n\n        // aggregator address\n        IAggregator aggregator;\n        // aggregated signature\n        bytes signature;\n    }\n\n    /**\n     * Execute a batch of UserOperation.\n     * no signature aggregator is used.\n     * if any account requires an aggregator (that is, it returned an aggregator when\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\n     * @param ops the operations to execute\n     * @param beneficiary the address to receive the fees\n     */\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\n\n    /**\n     * Execute a batch of UserOperation with Aggregators\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\n     * @param beneficiary the address to receive the fees\n     */\n    function handleAggregatedOps(\n        UserOpsPerAggregator[] calldata opsPerAggregator,\n        address payable beneficiary\n    ) external;\n\n    /**\n     * generate a request Id - unique identifier for this request.\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\n     */\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\n\n    /**\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\n     * @param userOp the user operation to validate.\n     */\n    function simulateValidation(UserOperation calldata userOp) external;\n\n    /**\n     * gas and return values during simulation\n     * @param preOpGas the gas used for validation (including preValidationGas)\n     * @param prefund the required prefund for this operation\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\n     */\n    struct ReturnInfo {\n        uint256 preOpGas;\n        uint256 prefund;\n        bool sigFailed;\n        uint48 validAfter;\n        uint48 validUntil;\n        bytes paymasterContext;\n    }\n\n    /**\n     * returned aggregated signature info.\n     * the aggregator returned by the account, and its current stake.\n     */\n    struct AggregatorStakeInfo {\n        address aggregator;\n        StakeInfo stakeInfo;\n    }\n\n    /**\n     * Get counterfactual sender address.\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\n     * this method always revert, and returns the address in SenderAddressResult error\n     * @param initCode the constructor code to be passed into the UserOperation.\n     */\n    function getSenderAddress(bytes memory initCode) external;\n\n\n    /**\n     * simulate full execution of a UserOperation (including both validation and target execution)\n     * this method will always revert with \"ExecutionResult\".\n     * it performs full validation of the UserOperation, but ignores signature error.\n     * an optional target address is called after the userop succeeds, and its value is returned\n     * (before the entire call is reverted)\n     * Note that in order to collect the the success/failure of the target call, it must be executed\n     * with trace enabled to track the emitted events.\n     * @param op the UserOperation to simulate\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\n     *        are set to the return from that call.\n     * @param targetCallData callData to pass to target address\n     */\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external;\n}\n\n"
    },
    "@account-abstraction/contracts/interfaces/INonceManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\ninterface INonceManager {\n\n    /**\n     * Return the next nonce for this sender.\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\n     * But UserOp with different keys can come with arbitrary order.\n     *\n     * @param sender the account address\n     * @param key the high 192 bit of the nonce\n     * @return nonce a full nonce to pass for next UserOp with this sender.\n     */\n    function getNonce(address sender, uint192 key)\n    external view returns (uint256 nonce);\n\n    /**\n     * Manually increment the nonce of the sender.\n     * This method is exposed just for completeness..\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\n     * as the EntryPoint will update the nonce regardless.\n     * Possible use-case is call it with various keys to \"initialize\" their nonces to one, so that future\n     * UserOperations will not pay extra for the first transaction with a given key.\n     */\n    function incrementNonce(uint192 key) external;\n}\n"
    },
    "@account-abstraction/contracts/interfaces/IPaymaster.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\nimport \"./UserOperation.sol\";\n\n/**\n * the interface exposed by a paymaster contract, who agrees to pay the gas for user's operations.\n * a paymaster must hold a stake to cover the required entrypoint stake and also the gas for the transaction.\n */\ninterface IPaymaster {\n\n    enum PostOpMode {\n        opSucceeded, // user op succeeded\n        opReverted, // user op reverted. still has to pay for gas.\n        postOpReverted //user op succeeded, but caused postOp to revert. Now it's a 2nd call, after user's op was deliberately reverted.\n    }\n\n    /**\n     * payment validation: check if paymaster agrees to pay.\n     * Must verify sender is the entryPoint.\n     * Revert to reject this request.\n     * Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted)\n     * The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns.\n     * @param userOp the user operation\n     * @param userOpHash hash of the user's request data.\n     * @param maxCost the maximum cost of this transaction (based on maximum gas and gas price from userOp)\n     * @return context value to send to a postOp\n     *      zero length to signify postOp is not required.\n     * @return validationData signature and time-range of this operation, encoded the same as the return value of validateUserOperation\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\n     *         otherwise, an address of an \"authorizer\" contract.\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\n     *      <6-byte> validAfter - first timestamp this operation is valid\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\n     */\n    function validatePaymasterUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 maxCost)\n    external returns (bytes memory context, uint256 validationData);\n\n    /**\n     * post-operation handler.\n     * Must verify sender is the entryPoint\n     * @param mode enum with the following options:\n     *      opSucceeded - user operation succeeded.\n     *      opReverted  - user op reverted. still has to pay for gas.\n     *      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.\n     *                       Now this is the 2nd call, after user's op was deliberately reverted.\n     * @param context - the context value returned by validatePaymasterUserOp\n     * @param actualGasCost - actual gas used so far (without this postOp call).\n     */\n    function postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) external;\n}\n"
    },
    "@account-abstraction/contracts/interfaces/IStakeManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.12;\n\n/**\n * manage deposits and stakes.\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\n * stake is value locked for at least \"unstakeDelay\" by the staked entity.\n */\ninterface IStakeManager {\n\n    event Deposited(\n        address indexed account,\n        uint256 totalDeposit\n    );\n\n    event Withdrawn(\n        address indexed account,\n        address withdrawAddress,\n        uint256 amount\n    );\n\n    /// Emitted when stake or unstake delay are modified\n    event StakeLocked(\n        address indexed account,\n        uint256 totalStaked,\n        uint256 unstakeDelaySec\n    );\n\n    /// Emitted once a stake is scheduled for withdrawal\n    event StakeUnlocked(\n        address indexed account,\n        uint256 withdrawTime\n    );\n\n    event StakeWithdrawn(\n        address indexed account,\n        address withdrawAddress,\n        uint256 amount\n    );\n\n    /**\n     * @param deposit the entity's deposit\n     * @param staked true if this entity is staked.\n     * @param stake actual amount of ether staked for this entity.\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\n     *    and the rest fit into a 2nd cell.\n     *    112 bit allows for 10^15 eth\n     *    48 bit for full timestamp\n     *    32 bit allows 150 years for unstake delay\n     */\n    struct DepositInfo {\n        uint112 deposit;\n        bool staked;\n        uint112 stake;\n        uint32 unstakeDelaySec;\n        uint48 withdrawTime;\n    }\n\n    //API struct used by getStakeInfo and simulateValidation\n    struct StakeInfo {\n        uint256 stake;\n        uint256 unstakeDelaySec;\n    }\n\n    /// @return info - full deposit information of given account\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\n\n    /// @return the deposit (for gas payment) of the account\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * add to the deposit of the given account\n     */\n    function depositTo(address account) external payable;\n\n    /**\n     * add to the account's stake - amount and delay\n     * any pending unstake is first cancelled.\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\n     */\n    function addStake(uint32 _unstakeDelaySec) external payable;\n\n    /**\n     * attempt to unlock the stake.\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\n     */\n    function unlockStake() external;\n\n    /**\n     * withdraw from the (unlocked) stake.\n     * must first call unlockStake and wait for the unstakeDelay to pass\n     * @param withdrawAddress the address to send withdrawn value.\n     */\n    function withdrawStake(address payable withdrawAddress) external;\n\n    /**\n     * withdraw from the deposit.\n     * @param withdrawAddress the address to send withdrawn value.\n     * @param withdrawAmount the amount to withdraw.\n     */\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\n}\n"
    },
    "@account-abstraction/contracts/interfaces/UserOperation.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable no-inline-assembly */\n\nimport {calldataKeccak} from \"../core/Helpers.sol\";\n\n/**\n * User Operation struct\n * @param sender the sender account of this request.\n     * @param nonce unique value the sender uses to verify it is not a replay.\n     * @param initCode if set, the account contract will be created by this constructor/\n     * @param callData the method call to execute on this account.\n     * @param callGasLimit the gas limit passed to the callData method call.\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\n     */\n    struct UserOperation {\n\n        address sender;\n        uint256 nonce;\n        bytes initCode;\n        bytes callData;\n        uint256 callGasLimit;\n        uint256 verificationGasLimit;\n        uint256 preVerificationGas;\n        uint256 maxFeePerGas;\n        uint256 maxPriorityFeePerGas;\n        bytes paymasterAndData;\n        bytes signature;\n    }\n\n/**\n * Utility functions helpful when working with UserOperation structs.\n */\nlibrary UserOperationLib {\n\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\n        address data;\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\n        assembly {data := calldataload(userOp)}\n        return address(uint160(data));\n    }\n\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\n    // pay above what he signed for.\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\n    unchecked {\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\n        if (maxFeePerGas == maxPriorityFeePerGas) {\n            //legacy mode (for networks that don't support basefee opcode)\n            return maxFeePerGas;\n        }\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\n    }\n    }\n\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\n        address sender = getSender(userOp);\n        uint256 nonce = userOp.nonce;\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\n        uint256 callGasLimit = userOp.callGasLimit;\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\n        uint256 preVerificationGas = userOp.preVerificationGas;\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\n\n        return abi.encode(\n            sender, nonce,\n            hashInitCode, hashCallData,\n            callGasLimit, verificationGasLimit, preVerificationGas,\n            maxFeePerGas, maxPriorityFeePerGas,\n            hashPaymasterAndData\n        );\n    }\n\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\n        return keccak256(pack(userOp));\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n"
    },
    "@account-abstraction/contracts/utils/Exec.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.5 <0.9.0;\n\n// solhint-disable no-inline-assembly\n\n/**\n * Utility functions helpful when making different kinds of contract calls in Solidity.\n */\nlibrary Exec {\n\n    function call(\n        address to,\n        uint256 value,\n        bytes memory data,\n        uint256 txGas\n    ) internal returns (bool success) {\n        assembly {\n            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\n        }\n    }\n\n    function staticcall(\n        address to,\n        bytes memory data,\n        uint256 txGas\n    ) internal view returns (bool success) {\n        assembly {\n            success := staticcall(txGas, to, add(data, 0x20), mload(data), 0, 0)\n        }\n    }\n\n    function delegateCall(\n        address to,\n        bytes memory data,\n        uint256 txGas\n    ) internal returns (bool success) {\n        assembly {\n            success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\n        }\n    }\n\n    // get returned data from last call or calldelegate\n    function getReturnData(uint256 maxLen) internal pure returns (bytes memory returnData) {\n        assembly {\n            let len := returndatasize()\n            if gt(len, maxLen) {\n                len := maxLen\n            }\n            let ptr := mload(0x40)\n            mstore(0x40, add(ptr, add(len, 0x20)))\n            mstore(ptr, len)\n            returndatacopy(add(ptr, 0x20), 0, len)\n            returnData := ptr\n        }\n    }\n\n    // revert with explicit byte array (probably reverted info from call)\n    function revertWithData(bytes memory returnData) internal pure {\n        assembly {\n            revert(add(returnData, 32), mload(returnData))\n        }\n    }\n\n    function callAndRevert(address to, bytes memory data, uint256 maxLen) internal {\n        bool success = call(to,0,data,gasleft());\n        if (!success) {\n            revertWithData(getReturnData(maxLen));\n        }\n    }\n}\n"
    },
    "@oasisprotocol/sapphire-contracts/contracts/EthereumUtils.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport {Sapphire} from \"./Sapphire.sol\";\n\nstruct SignatureRSV {\n    bytes32 r;\n    bytes32 s;\n    uint256 v;\n}\n\nlibrary EthereumUtils {\n    uint256 internal constant K256_P =\n        0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f;\n\n    // (p+1)//4\n    uint256 internal constant K256_P_PLUS_1_OVER_4 =\n        0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffff0c;\n\n    address internal constant PRECOMPILE_BIGMODEXP = address(0x5);\n\n    error expmod_Error();\n\n    function expmod(\n        uint256 base,\n        uint256 exponent,\n        uint256 modulus\n    ) internal view returns (uint256 out) {\n        (bool success, bytes memory result) = PRECOMPILE_BIGMODEXP.staticcall(\n            abi.encodePacked(\n                uint256(0x20), // length of base\n                uint256(0x20), // length of exponent\n                uint256(0x20), // length of modulus\n                base,\n                exponent,\n                modulus\n            )\n        );\n\n        if (!success) revert expmod_Error();\n\n        out = uint256(bytes32(result));\n    }\n\n    error k256DeriveY_Invalid_Prefix_Error();\n\n    /**\n     * @notice Recover Y coordinate from X coordinate and sign bit.\n     * @param prefix 0x02 or 0x03 indicates sign bit of compressed point.\n     * @param x X coordinate.\n     */\n    function k256DeriveY(uint8 prefix, uint256 x)\n        internal\n        view\n        returns (uint256 y)\n    {\n        if (prefix != 0x02 && prefix != 0x03)\n            revert k256DeriveY_Invalid_Prefix_Error();\n\n        // x^3 + ax + b, where a=0, b=7\n        y = addmod(mulmod(x, mulmod(x, x, K256_P), K256_P), 7, K256_P);\n\n        // find square root of quadratic residue\n        y = expmod(y, K256_P_PLUS_1_OVER_4, K256_P);\n\n        // negate y if indicated by sign bit\n        if ((y + prefix) % 2 != 0) {\n            y = K256_P - y;\n        }\n    }\n\n    error k256Decompress_Invalid_Length_Error();\n\n    /**\n     * @notice Decompress SEC P256 k1 point.\n     * @param pk 33 byte compressed public key.\n     * @return x X coordinate.\n     * @return y Y coordinate.\n     */\n    function k256Decompress(bytes memory pk)\n        internal\n        view\n        returns (uint256 x, uint256 y)\n    {\n        if (pk.length != 33) revert k256Decompress_Invalid_Length_Error();\n        assembly {\n            // skip 32 byte length prefix, plus one byte sign prefix\n            x := mload(add(pk, 33))\n        }\n        y = k256DeriveY(uint8(pk[0]), x);\n    }\n\n    function k256PubkeyToEthereumAddress(bytes memory pubkey)\n        internal\n        view\n        returns (address)\n    {\n        (uint256 x, uint256 y) = k256Decompress(pubkey);\n        return toEthereumAddress(x, y);\n    }\n\n    /**\n     * @notice Convert SEC P256 k1 curve point to Ethereum address.\n     * @param x X coordinate.\n     * @param y Y coordinate.\n     * @custom:see https://gavwood.com/paper.pdf (pp. 212)\n     */\n    function toEthereumAddress(uint256 x, uint256 y)\n        internal\n        pure\n        returns (address)\n    {\n        bytes32 digest = keccak256(abi.encodePacked(x, y));\n\n        return address(uint160((uint256(digest) << 96) >> 96));\n    }\n\n    error DER_Split_Error();\n\n    /**\n     * @notice Extracts the `r` and `s` parameters from a DER encoded ECDSA\n     * signature.\n     *\n     * The signature is an ASN1 encoded SEQUENCE of the variable length `r` and\n     * `s` INTEGERs.\n     *\n     * ```\n     * | 0x30 | len(z) | 0x02 | len(r) |  r   | 0x02 | len(s) |  s   | = hex value\n     * |  1   |   1    |   1  |   1    | 1-33 |  1   |   1    | 1-33 | = byte length\n     * ```\n     *\n     * If the highest bit of either `r` or `s` is set, it will be prefix padded\n     * with a zero byte. There is exponentially decreasing probability that\n     * either `r` or `s` will be below 32 bytes. There is a very high\n     * probability that either `r` or `s` will be 33 bytes. This function only\n     * works if either `r` or `s` are 256bits or lower.\n     *\n     * @param der DER encoded ECDSA signature\n     * @return rsv ECDSA R point X coordinate, and S scalar\n     * @custom:see https://bitcoin.stackexchange.com/questions/58853/how-do-you-figure-out-the-r-and-s-out-of-a-signature-using-python\n     */\n    function splitDERSignature(bytes memory der)\n        internal\n        pure\n        returns (SignatureRSV memory rsv)\n    {\n        if (der.length < 8) revert DER_Split_Error();\n        if (der[0] != 0x30) revert DER_Split_Error();\n        if (der[2] != 0x02) revert DER_Split_Error();\n\n        uint256 zLen = uint8(der[1]);\n        uint256 rLen = uint8(der[3]);\n        if (rLen > 33) revert DER_Split_Error();\n\n        uint256 sOffset = 4 + rLen;\n        uint256 sLen = uint8(der[sOffset + 1]);\n        if (sLen > 33) revert DER_Split_Error();\n        if (der[sOffset] != 0x02) revert DER_Split_Error();\n\n        if (rLen + sLen + 4 != zLen) revert DER_Split_Error();\n        if (der.length != zLen + 2) revert DER_Split_Error();\n\n        sOffset += 2;\n        uint256 rOffset = 4;\n\n        if (rLen == 33) {\n            if (der[4] != 0x00) revert DER_Split_Error();\n            rOffset += 1;\n            rLen -= 1;\n        }\n\n        if (sLen == 33) {\n            if (der[sOffset] != 0x00) revert DER_Split_Error();\n            sOffset += 1;\n            sLen -= 1;\n        }\n\n        bytes32 r;\n        bytes32 s;\n\n        assembly {\n            r := mload(add(der, add(32, rOffset)))\n            s := mload(add(der, add(32, sOffset)))\n        }\n\n        // When length of either `r` or `s` is below 32 bytes\n        // the 32 byte `mload` will suffix it with unknown stuff\n        // shift right to remove the unknown stuff, prefixing with zeros instead\n\n        if (rLen < 32) {\n            r >>= 8 * (32 - rLen);\n        }\n\n        if (sLen < 32) {\n            s >>= 8 * (32 - sLen);\n        }\n\n        rsv.r = r;\n        rsv.s = s;\n    }\n\n    error recoverV_Error();\n\n    function recoverV(\n        address pubkeyAddr,\n        bytes32 digest,\n        SignatureRSV memory rsv\n    ) internal pure {\n        rsv.v = 27;\n\n        if (ecrecover(digest, uint8(rsv.v), rsv.r, rsv.s) != pubkeyAddr) {\n            rsv.v = 28;\n\n            if (ecrecover(digest, uint8(rsv.v), rsv.r, rsv.s) != pubkeyAddr) {\n                revert recoverV_Error();\n            }\n        }\n    }\n\n    /**\n     * @notice Convert a Secp256k1PrehashedKeccak256 signature to one accepted\n     * by ecrecover.\n     * @param pubkey 33 byte compressed public key.\n     * @param digest 32 byte pre-hashed message digest.\n     * @param signature ASN.1 DER encoded signature, as returned from\n     * [`Sapphire.sign`](../Sapphire.sol/library.Sapphire.md#sign).\n     * @return pubkeyAddr 20 byte Ethereum address.\n     * @return rsv Ethereum EcDSA RSV signature values.\n     * @custom:see https://gavwood.com/paper.pdf (pp. 206)\n     */\n    function toEthereumSignature(\n        bytes memory pubkey,\n        bytes32 digest,\n        bytes memory signature\n    ) internal view returns (address pubkeyAddr, SignatureRSV memory rsv) {\n        pubkeyAddr = k256PubkeyToEthereumAddress(pubkey);\n\n        rsv = splitDERSignature(signature);\n\n        recoverV(pubkeyAddr, digest, rsv);\n    }\n\n    function sign(\n        address pubkeyAddr,\n        bytes32 secretKey,\n        bytes32 digest\n    ) internal view returns (SignatureRSV memory rsv) {\n        bytes memory signature = Sapphire.sign(\n            Sapphire.SigningAlg.Secp256k1PrehashedKeccak256,\n            abi.encodePacked(secretKey),\n            abi.encodePacked(digest),\n            \"\"\n        );\n\n        rsv = splitDERSignature(signature);\n\n        recoverV(pubkeyAddr, digest, rsv);\n    }\n\n    /**\n     * @notice Generate an Ethereum compatible SEC P256 k1 keypair and\n     * corresponding public address.\n     * @return pubkeyAddr Ethereum address.\n     * @return secretKey Secret key used for signing.\n     */\n    function generateKeypair()\n        internal\n        view\n        returns (address pubkeyAddr, bytes32 secretKey)\n    {\n        bytes memory randSeed = Sapphire.randomBytes(32, \"\");\n\n        secretKey = bytes32(randSeed);\n\n        (bytes memory pk, ) = Sapphire.generateSigningKeyPair(\n            Sapphire.SigningAlg.Secp256k1PrehashedKeccak256,\n            randSeed\n        );\n\n        pubkeyAddr = k256PubkeyToEthereumAddress(pk);\n    }\n}\n"
    },
    "@oasisprotocol/sapphire-contracts/contracts/Sapphire.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/**\n * @title Sapphire\n * @notice This library provides a number of convenient wrappers for\n * cryptographic operations such as the x25519 key derivation, Deoxys-II-based\n * encryption and decryption, signing key generation, message digest signing and\n * verification, gas padding and hashing.\n *\n * Most of the mentioned functions are implemented as Sapphire's precompiles and\n * are cheap to call.\n *\n * #### Calling Precompiles Manually\n *\n * You can override the wrappers and call Sapphire precompiles by dispatching\n * calls to specific well-known contract addresses, as described below. The\n * __Precompile address__ section of each function will show you the address\n * of the corresponding precompile.\n *\n * Input parameters should be packed into a contiguous memory region with each\n * chunk of data padded to 32 bytes as usual. The recommended way to construct\n * parameter byte sequences in Solidity is with `abi.encode` and `abi.decode`,\n * which will transparently handle things like putting `bytes` lengths in the\n * correct position.\n */\nlibrary Sapphire {\n    // Oasis-specific, confidential precompiles\n    address internal constant RANDOM_BYTES =\n        0x0100000000000000000000000000000000000001;\n    address internal constant DERIVE_KEY =\n        0x0100000000000000000000000000000000000002;\n    address internal constant ENCRYPT =\n        0x0100000000000000000000000000000000000003;\n    address internal constant DECRYPT =\n        0x0100000000000000000000000000000000000004;\n    address internal constant GENERATE_SIGNING_KEYPAIR =\n        0x0100000000000000000000000000000000000005;\n    address internal constant SIGN_DIGEST =\n        0x0100000000000000000000000000000000000006;\n    address internal constant VERIFY_DIGEST =\n        0x0100000000000000000000000000000000000007;\n    address internal constant CURVE25519_PUBLIC_KEY =\n        0x0100000000000000000000000000000000000008;\n    address internal constant GAS_USED =\n        0x0100000000000000000000000000000000000009;\n    address internal constant PAD_GAS =\n        0x010000000000000000000000000000000000000a;\n\n    // Oasis-specific, general precompiles\n    address internal constant SHA512_256 =\n        0x0100000000000000000000000000000000000101;\n    address internal constant SHA512 =\n        0x0100000000000000000000000000000000000102;\n    address internal constant SHA384 =\n        0x0100000000000000000000000000000000000104;\n\n    type Curve25519PublicKey is bytes32;\n    type Curve25519SecretKey is bytes32;\n\n    enum SigningAlg {\n        /// Ed25519 signature over the provided message using SHA-512/265 with a domain separator.\n        /// Can be used to sign transactions for the Oasis consensus layer and SDK paratimes.\n        Ed25519Oasis,\n        /// Ed25519 signature over the provided message.\n        Ed25519Pure,\n        /// Ed25519 signature over the provided prehashed SHA-512 digest.\n        Ed25519PrehashedSha512,\n        /// Secp256k1 signature over the provided message using SHA-512/256 with a domain separator.\n        /// Can be used to sign transactions for the Oasis consensus layer and SDK paratimes.\n        Secp256k1Oasis,\n        /// Secp256k1 over the provided Keccak256 digest.\n        /// Can be used to sign transactions for Ethereum-compatible networks.\n        Secp256k1PrehashedKeccak256,\n        /// Secp256k1 signature over the provided SHA-256 digest.\n        Secp256k1PrehashedSha256,\n        /// Sr25519 signature over the provided message.\n        Sr25519,\n        /// Secp256r1 signature over the provided SHA-256 digest.\n        Secp256r1PrehashedSha256,\n        /// Secp384r1 signature over the provided SHA-384 digest.\n        Secp384r1PrehashedSha384\n    }\n\n    /**\n     * @notice Generate `num_bytes` pseudo-random bytes, with an optional\n     * personalization string (`pers`) added into the hashing algorithm to\n     * increase domain separation when needed.\n     *\n     * #### Precompile address\n     *\n     * `0x0100000000000000000000000000000000000001`\n     *\n     * #### Gas cost\n     *\n     * 10,000 minimum plus 240 per output word plus 60 per word of the\n     * personalization string.\n     *\n     * #### Implementation details\n     *\n     * The mode (e.g. simulation or \"view call\" vs transaction execution) is fed\n     * to TupleHash (among other block-dependent components) to derive the \"key\n     * id\", which is then used to derive a per-block VRF key from\n     * epoch-ephemeral entropy (using KMAC256 and cSHAKE) so a different key\n     * id will result in a unique per-block VRF key. This per-block VRF key is\n     * then used to create the per-block root RNG which is then used to derive\n     * domain-separated (using Merlin transcripts) per-transaction random RNGs\n     * which are then exposed via this precompile. The KMAC, cSHAKE and\n     * TupleHash algorithms are SHA-3 derived functions defined in [NIST\n     * Special Publication 800-185](https://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-185.pdf).\n     *\n     * #### DANGER: Prior to Sapphire ParaTime 0.6.0\n     *\n     * All view queries and simulated transactions (via `eth_call`) would\n     * receive the same entropy in-between blocks if they use the same\n     * `num_bytes` and `pers` parameters. If your contract requires\n     * confidentiality you should generate a secret in the constructor to be\n     * used with view calls:\n     *\n     * ```solidity\n     * Sapphire.randomBytes(64, abi.encodePacked(msg.sender, this.perContactSecret));\n     * ```\n     *\n     * #### Example\n     *\n     * ```solidity\n     * bytes memory randomPad = Sapphire.randomBytes(64, \"\");\n     * ```\n     *\n     * @param numBytes The number of bytes to return.\n     * @param pers An optional personalization string to increase domain\n     *        separation.\n     * @return The random bytes. If the number of bytes requested is too large\n     *         (over 1024), a smaller amount (1024) will be returned.\n     */\n    function randomBytes(uint256 numBytes, bytes memory pers)\n        internal\n        view\n        returns (bytes memory)\n    {\n        (bool success, bytes memory entropy) = RANDOM_BYTES.staticcall(\n            abi.encode(numBytes, pers)\n        );\n        require(success, \"randomBytes: failed\");\n        return entropy;\n    }\n\n    /**\n     * @notice Generates a Curve25519 keypair.\n     * @param pers An optional personalization string used to add domain\n     * separation.\n     * @return pk The Curve25519 public key. Useful for key exchange.\n     * @return sk The Curve25519 secret key. Pairs well with\n     * [deriveSymmetricKey](#derivesymmetrickey).\n     */\n    function generateCurve25519KeyPair(bytes memory pers)\n        internal\n        view\n        returns (Curve25519PublicKey pk, Curve25519SecretKey sk)\n    {\n        bytes memory scalar = randomBytes(32, pers);\n        // Twiddle some bits, as per RFC 7748 §5.\n        scalar[0] &= 0xf8; // Make it a multiple of 8 to avoid small subgroup attacks.\n        scalar[31] &= 0x7f; // Clamp to < 2^255 - 19\n        scalar[31] |= 0x40; // Clamp to >= 2^254\n        (bool success, bytes memory pkBytes) = CURVE25519_PUBLIC_KEY.staticcall(\n            scalar\n        );\n        require(success, \"gen curve25519 pk: failed\");\n        return (\n            Curve25519PublicKey.wrap(bytes32(pkBytes)),\n            Curve25519SecretKey.wrap(bytes32(scalar))\n        );\n    }\n\n    /**\n     * @notice Derive a symmetric key from a pair of keys using x25519.\n     *\n     * #### Precompile address\n     *\n     * `0x0100000000000000000000000000000000000002`\n     *\n     * #### Gas cost\n     *\n     * 100,000\n     *\n     * #### Example\n     *\n     * ```solidity\n     * bytes32 publicKey = ... ;\n     * bytes32 privateKey = ... ;\n     * bytes32 symmetric = Sapphire.deriveSymmetricKey(publicKey, privateKey);\n     * ```\n     *\n     * @param peerPublicKey The peer's public key.\n     * @param secretKey Your secret key.\n     * @return A derived symmetric key.\n     */\n    function deriveSymmetricKey(\n        Curve25519PublicKey peerPublicKey,\n        Curve25519SecretKey secretKey\n    ) internal view returns (bytes32) {\n        (bool success, bytes memory symmetric) = DERIVE_KEY.staticcall(\n            abi.encode(peerPublicKey, secretKey)\n        );\n        require(success, \"deriveSymmetricKey: failed\");\n        return bytes32(symmetric);\n    }\n\n    /**\n     * @notice Encrypt and authenticate the plaintext and additional data using\n     * DeoxysII.\n     *\n     * #### Precompile address\n     *\n     * `0x0100000000000000000000000000000000000003`\n     *\n     * #### Gas cost\n     *\n     * 50,000 minimum plus 100 per word of input\n     *\n     * #### Example\n     *\n     * ```solidity\n     * bytes32 key = ... ;\n     * bytes32 nonce = ... ;\n     * bytes memory text = \"plain text\";\n     * bytes memory ad = \"additional data\";\n     * bytes memory encrypted = Sapphire.encrypt(key, nonce, text, ad);\n     * bytes memory decrypted = Sapphire.decrypt(key, nonce, encrypted, ad);\n     * ```\n     *\n     * @param key The key to use for encryption.\n     * @param nonce The nonce. Note that only the first 15 bytes of this\n     * parameter are used.\n     * @param plaintext The plaintext to encrypt and authenticate.\n     * @param additionalData The additional data to authenticate.\n     * @return The ciphertext with appended auth tag.\n     */\n    function encrypt(\n        bytes32 key,\n        bytes32 nonce,\n        bytes memory plaintext,\n        bytes memory additionalData\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory ciphertext) = ENCRYPT.staticcall(\n            abi.encode(key, nonce, plaintext, additionalData)\n        );\n        require(success, \"encrypt: failed\");\n        return ciphertext;\n    }\n\n    /**\n     * @notice Decrypt and authenticate the ciphertext and additional data using\n     * DeoxysII. Reverts if the auth tag is incorrect.\n     *\n     * #### Precompile address\n     *\n     * `0x0100000000000000000000000000000000000004`\n     *\n     * #### Gas cost\n     *\n     * 50,000 minimum plus 100 per word of input\n     *\n     * #### Example\n     *\n     * ```solidity\n     * bytes32 key = ... ;\n     * bytes32 nonce = ... ;\n     * bytes memory text = \"plain text\";\n     * bytes memory ad = \"additional data\";\n     * bytes memory encrypted = Sapphire.encrypt(key, nonce, text, ad);\n     * bytes memory decrypted = Sapphire.decrypt(key, nonce, encrypted, ad);\n     * ```\n     *\n     * @param key The key to use for decryption.\n     * @param nonce The nonce. Note that only the first 15 bytes of this\n     * parameter are used.\n     * @param ciphertext The ciphertext with tag to decrypt and authenticate.\n     * @param additionalData The additional data to authenticate against the\n     * ciphertext.\n     * @return The original plaintext.\n     */\n    function decrypt(\n        bytes32 key,\n        bytes32 nonce,\n        bytes memory ciphertext,\n        bytes memory additionalData\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory plaintext) = DECRYPT.staticcall(\n            abi.encode(key, nonce, ciphertext, additionalData)\n        );\n        require(success, \"decrypt: failed\");\n        return plaintext;\n    }\n\n    /**\n     * @notice Generate a public/private key pair using the specified method and\n     * seed. The available methods are items in the\n     * [`Sapphire.SigningAlg`](#signingalg) enum. Note, however, that the\n     * generation method ignores subvariants, so all three Ed25519-based are\n     * equivalent, and all Secp256k1 & Secp256r1 based methods are equivalent.\n     * Sr25519 is not available and will return an error.\n     *\n     * #### Precompile address\n     * `0x0100000000000000000000000000000000000005`\n     *\n     * #### Gas Cost\n     *\n     * ##### Ed25519: 1,000 gas\n     *\n     * - `0` (`Ed25519Oasis`)\n     * - `1` (`Ed25519Pure`)\n     * - `2` (`Ed25519PrehashedSha512`)\n     *\n     * ##### Secp256k1: 1,500 gas.\n     * - `3` (`Secp256k1Oasis`)\n     * - `4` (`Secp256k1PrehashedKeccak256`)\n     * - `5` (`Secp256k1PrehashedSha256`)\n     *\n     * ##### Secp256r1: 4,000 gas\n     * - `7` (`Secp256r1PrehashedSha256`)\n     *\n     * #### Public Key Format\n     *\n     * ##### Ed25519\n     *\n     * 32 bytes\n     *\n     * ##### Secp256k1 & Secp256r1\n     *\n     * 33 bytes, compressed format (`0x02` or `0x03` prefix, then 32 byte X\n     * coordinate).\n     *\n     * #### Example\n     *\n     * ```solidity\n     * bytes memory seed = hex\"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\";\n     * bytes memory publicKey;\n     * bytes memory privateKey;\n     * (publicKey, privateKey) = Sapphire.generateSigningKeyPair(Sapphire.SigningAlg.Ed25519Pure, seed);\n     * ```\n     *\n     * @param alg The signing alg for which to generate a keypair.\n     * @param seed The seed to use for generating the key pair. You can use the\n     * `randomBytes` method if you don't already have a seed.\n     * @return publicKey The public half of the keypair.\n     * @return secretKey The secret half of the keypair.\n     */\n    function generateSigningKeyPair(SigningAlg alg, bytes memory seed)\n        internal\n        view\n        returns (bytes memory publicKey, bytes memory secretKey)\n    {\n        (bool success, bytes memory keypair) = GENERATE_SIGNING_KEYPAIR\n            .staticcall(abi.encode(alg, seed));\n        require(success, \"gen signing keypair: failed\");\n        return abi.decode(keypair, (bytes, bytes));\n    }\n\n    /**\n     * @notice Sign a message within the provided context using the specified\n     * algorithm, and return the signature. The `context_or_digest` and\n     * `messages` parameters change in meaning slightly depending on the method\n     * requested. For methods that take a context in addition to the message you\n     * must pass the context in the `context_or_digest` parameter and use\n     * `message` as expected. For methods that take a pre-existing hash of the\n     * message, pass that in `context_or_digest` and leave `message` empty.\n     * Specifically the `Ed25519Oasis` and `Secp256k1Oasis` variants take both a\n     * context and a message (each are variable length `bytes`), the context\n     * serves as a domain separator.\n     *\n     * #### Precompile address\n     *\n     * `0x0100000000000000000000000000000000000006`\n     *\n     * #### Gas cost\n     *\n     * See below for the method-dependent base cost, plus 8 gas per 32 bytes of\n     * context and message except digest.\n     *\n     * #### Signing algorithms\n     *\n     * - `0` (`Ed25519Oasis`): 1,500 gas, variable length context and message.\n     * - `1` (`Ed25519Pure`): 1,500 gas, empty context, variable length message.\n     * - `2` (`Ed25519PrehashedSha512`): 1,500 gas, pre-existing SHA-512 hash\n     *   (64 bytes) as context, empty message.\n     * - `3` (`Secp256k1Oasis`): 3,000 gas, variable length context and message\n     * - `4` (`Secp256k1PrehashedKeccak256`): 3,000 gas, pre-existing hash\n     *   (32 bytes) as context, empty message.\n     * - `5` (`Secp256k1PrehashedSha256`): 3,000 gas, pre-existing hash (32\n     *   bytes) as context, empty message.\n     * - `7` (`Secp256r1PrehashedSha256`): 9,000 gas, pre-existing hash (32\n     *   bytes) as context, empty message.\n     *\n     * #### Example\n     *\n     * ```solidity\n     * Sapphire.SigningAlg alg = Sapphire.SigningAlg.Ed25519Pure;\n     * bytes memory pk;\n     * bytes memory sk;\n     * (pk, sk) = Sapphire.generateSigningKeyPair(alg, Sapphire.randomBytes(32, \"\"));\n     * bytes memory signature = Sapphire.sign(alg, sk, \"\", \"signed message\");\n     * ```\n     *\n     * @param alg The signing algorithm to use.\n     * @param secretKey The secret key to use for signing. The key must be valid\n     * for use with the requested algorithm.\n     * @param contextOrHash Domain-Separator Context, or precomputed hash bytes.\n     * @param message Message to sign, should be zero-length if precomputed hash\n     * given.\n     * @return signature The resulting signature.\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/confidential.rs :: call_sign\n     */\n    function sign(\n        SigningAlg alg,\n        bytes memory secretKey,\n        bytes memory contextOrHash,\n        bytes memory message\n    ) internal view returns (bytes memory signature) {\n        (bool success, bytes memory sig) = SIGN_DIGEST.staticcall(\n            abi.encode(alg, secretKey, contextOrHash, message)\n        );\n        require(success, \"sign: failed\");\n        return sig;\n    }\n\n    /**\n     * @notice Verifies that the provided digest was signed with using the\n     * secret key corresponding to the provided private key and the specified\n     * signing algorithm.\n     *\n     * The `method`, `context_or_digest` and `message` parameters have the same\n     * meaning as described above in the [sign()](#sign) function.\n     *\n     * #### Precompile address\n     *\n     * `0x0100000000000000000000000000000000000007`\n     *\n     * #### Gas cost\n     *\n     * The algorithm-specific base cost below, with an additional **8 gas per\n     * 32 bytes** of `context` and `message` for the `Ed25519Oasis`,\n     * `Ed25519Pure` and `Secp256k1Oasis` algorithms.\n     *\n     * - `0` (`Ed25519Oasis`): 2,000 gas\n     * - `1` (`Ed25519Pure`): 2,000 gas\n     * - `2` (`Ed25519PrehashedSha512`): 2,000 gas\n     * - `3` (`Secp256k1Oasis`): 3,000 gas\n     * - `4` (`Secp256k1PrehashedKeccak256`): 3,000 gas\n     * - `5` (`Secp256k1PrehashedSha256`): 3,000 gas\n     * - `7` (`Secp256r1PrehashedSha256`): 7,900 gas\n     *\n     * #### Example\n     *\n     * ```solidity\n     * Sapphire.SigningAlg alg = Sapphire.SigningAlg.Secp256k1PrehashedKeccak256;\n     * bytes memory pk;\n     * bytes memory sk;\n     * bytes memory digest = abi.encodePacked(keccak256(\"signed message\"));\n     * (pk, sk) = Sapphire.generateSigningKeyPair(alg, Sapphire.randomBytes(32, \"\"));\n     * bytes memory signature = Sapphire.sign(alg, sk, digest, \"\");\n     * require( Sapphire.verify(alg, pk, digest, \"\", signature) );\n     * ```\n     *\n     * @param alg The signing algorithm by which the signature was generated.\n     * @param publicKey The public key against which to check the signature.\n     * @param contextOrHash Domain-Separator Context, or precomputed hash bytes\n     * @param message The hash of the message that was signed, should be\n     * zero-length if precomputed hash was given.\n     * @param signature The signature to check.\n     * @return verified Whether the signature is valid for the given parameters.\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/confidential.rs :: call_verify\n     */\n    function verify(\n        SigningAlg alg,\n        bytes memory publicKey,\n        bytes memory contextOrHash,\n        bytes memory message,\n        bytes memory signature\n    ) internal view returns (bool verified) {\n        (bool success, bytes memory v) = VERIFY_DIGEST.staticcall(\n            abi.encode(alg, publicKey, contextOrHash, message, signature)\n        );\n        require(success, \"verify: failed\");\n        return abi.decode(v, (bool));\n    }\n\n    /**\n     * @notice Set the current transactions gas usage to a specific amount\n     * @dev Will cause a reversion if the current usage is more than the amount.\n     * @param toAmount Gas usage will be set to this amount\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/gas.rs :: call_pad_gas\n     *\n     */\n    function padGas(uint128 toAmount) internal view {\n        (bool success, ) = PAD_GAS.staticcall(abi.encode(toAmount));\n        require(success, \"verify: failed\");\n    }\n\n    /**\n     * @notice Returns the amount of gas currently used by the transaction\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/gas.rs :: call_gas_used\n     */\n    function gasUsed() internal view returns (uint64) {\n        (bool success, bytes memory v) = GAS_USED.staticcall(\"\");\n        require(success, \"gasused: failed\");\n        return abi.decode(v, (uint64));\n    }\n}\n\n/**\n * @notice Hash the input data with SHA-512/256, according to\n * [NIST.FIPS.180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n *\n * #### Precompile address\n *\n * `0x0100000000000000000000000000000000000102`\n *\n * #### Gas cost\n *\n * 115 gas, then 13 gas per word\n *\n * #### Example\n *\n * ```solidity\n * bytes32 result = sha512_256(abi.encodePacked(\"input data\"));\n * ```\n *\n * #### Warning: SHA-512 vs SHA-512/256 Length-Extension Attacks\n *\n * [SHA-512](function.sha512.md#sha512) is vulnerable to [length-extension\n * attacks](https://en.wikipedia.org/wiki/Length_extension_attack), which are\n * relevant if you are computing the hash of a secret message. The\n * [SHA-512/256](function.sha512_256.md#sha512_256) variant is **not**\n * vulnerable to length-extension attacks.\n *\n * @param input Bytes to hash.\n * @return result 32 byte digest.\n * @custom:standard https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\n * @custom:see @oasisprotocol/oasis-sdk :: precompile/sha2.rs :: call_sha512_256\n */\nfunction sha512_256(bytes memory input) view returns (bytes32 result) {\n    (bool success, bytes memory output) = Sapphire.SHA512_256.staticcall(input);\n\n    require(success, \"sha512_256\");\n\n    return bytes32(output);\n}\n\n/**\n * @notice Hash the input data with SHA-512, according to\n * [NIST.FIPS.180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf)\n *\n * #### Precompile address\n *\n * `0x0100000000000000000000000000000000000101`\n *\n * #### Warning: SHA-512 vs SHA-512/256 Length-Extension Attacks\n *\n * [SHA-512](function.sha512.md#sha512) is vulnerable to [length-extension\n * attacks](https://en.wikipedia.org/wiki/Length_extension_attack), which are\n * relevant if you are computing the hash of a secret message. The\n * [SHA-512/256](function.sha512_256.md#sha512_256) variant is **not**\n * vulnerable to length-extension attacks.\n *\n * #### Gas Cost\n *\n * 115 gas, then 13 gas per word\n *\n * #### Example\n *\n * ```solidity\n * bytes memory result = sha512(abi.encodePacked(\"input data\"));\n * ```\n *\n * @param input Bytes to hash.\n * @return output 64 byte digest.\n * @custom:standard https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\n * @custom:see @oasisprotocol/oasis-sdk :: precompile/sha2.rs :: call_sha512\n */\nfunction sha512(bytes memory input) view returns (bytes memory output) {\n    bool success;\n\n    (success, output) = Sapphire.SHA512.staticcall(input);\n\n    require(success, \"sha512\");\n}\n\n/**\n * @notice Hash the input data with SHA-384.\n * @param input Bytes to hash.\n * @return output 48 byte digest.\n * @custom:standard https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\n * @custom:see @oasisprotocol/oasis-sdk :: precompile/sha2.rs :: call_sha384\n */\nfunction sha384(bytes memory input) view returns (bytes memory output) {\n    bool success;\n\n    (success, output) = Sapphire.SHA384.staticcall(input);\n\n    require(success, \"sha384\");\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC5267.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.0;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.6) (utils/Base64.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n *\n * _Available since v4.5._\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 0x20)\n            let dataPtr := data\n            let endPtr := add(data, mload(data))\n\n            // In some cases, the last iteration will read bytes after the end of the data. We cache the value, and\n            // set it to zero to make sure no dirty bytes are read in that section.\n            let afterPtr := add(endPtr, 0x20)\n            let afterCache := mload(afterPtr)\n            mstore(afterPtr, 0x00)\n\n            // Run over the input, 3 bytes at a time\n            for {\n\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 byte (24 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F to bitmask the least significant 6 bits.\n                // Use this as an index into the lookup table, mload an entire word\n                // so the desired character is in the least significant byte, and\n                // mstore8 this least significant byte into the result and continue.\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // Reset the value that was cached\n            mstore(afterPtr, afterCache)\n\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./ECDSA.sol\";\nimport \"../ShortStrings.sol\";\nimport \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * _Available since v3.4._\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant _TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {EIP-5267}.\n     *\n     * _Available since v4.9._\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        override\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _name.toStringWithFallback(_nameFallback),\n            _version.toStringWithFallback(_versionFallback),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proofLen - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proofLen - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ShortStrings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(_FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPayments {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\n    /// @param recipient The address receiving ETH\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\n\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n    /// that use ether for the input amount\n    function refundETH() external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    /// @param token The contract address of the token which will be transferred to `recipient`\n    /// @param amountMinimum The minimum amount of token required for a transfer\n    /// @param recipient The destination address of the token\n    function sweepToken(\n        address token,\n        uint256 amountMinimum,\n        address recipient\n    ) external payable;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title QuoterV2 Interface\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps.\n/// @notice For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\ninterface IQuoterV2 {\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\n    /// @param amountIn The amount of the first token to swap\n    /// @return amountOut The amount of the last token that would be received\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactInput(bytes memory path, uint256 amountIn)\n        external\n        returns (\n            uint256 amountOut,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n\n    struct QuoteExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint256 amountIn;\n        uint24 fee;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\n    /// tokenIn The token being swapped in\n    /// tokenOut The token being swapped out\n    /// fee The fee of the token pool to consider for the pair\n    /// amountIn The desired input amount\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountOut The amount of `tokenOut` that would be received\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactInputSingle(QuoteExactInputSingleParams memory params)\n        external\n        returns (\n            uint256 amountOut,\n            uint160 sqrtPriceX96After,\n            uint32 initializedTicksCrossed,\n            uint256 gasEstimate\n        );\n\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n    /// @param amountOut The amount of the last token to receive\n    /// @return amountIn The amount of first token required to be paid\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\n        external\n        returns (\n            uint256 amountIn,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n\n    struct QuoteExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint256 amount;\n        uint24 fee;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n    /// @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\n    /// tokenIn The token being swapped in\n    /// tokenOut The token being swapped out\n    /// fee The fee of the token pool to consider for the pair\n    /// amountOut The desired output amount\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactOutputSingle(QuoteExactOutputSingleParams memory params)\n        external\n        returns (\n            uint256 amountIn,\n            uint160 sqrtPriceX96After,\n            uint32 initializedTicksCrossed,\n            uint256 gasEstimate\n        );\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"
    },
    "contracts/base/Executor.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity 0.8.17;\r\n\r\nimport {Enum} from \"../common/Enum.sol\";\r\n\r\n/// @title Executor - A contract that can execute transactions\r\nabstract contract Executor {\r\n    // Could add a flag fromEntryPoint for AA txn\r\n    event ExecutionFailure(\r\n        address indexed to,\r\n        uint256 indexed value,\r\n        bytes indexed data,\r\n        Enum.Operation operation,\r\n        uint256 txGas\r\n    );\r\n    event ExecutionSuccess(\r\n        address indexed to,\r\n        uint256 indexed value,\r\n        bytes indexed data,\r\n        Enum.Operation operation,\r\n        uint256 txGas\r\n    );\r\n\r\n    function _execute(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation,\r\n        uint256 txGas\r\n    ) internal returns (bool success) {\r\n        if (operation == Enum.Operation.DelegateCall) {\r\n            assembly {\r\n                success := delegatecall(\r\n                    txGas,\r\n                    to,\r\n                    add(data, 0x20),\r\n                    mload(data),\r\n                    0,\r\n                    0\r\n                )\r\n            }\r\n        } else {\r\n            assembly {\r\n                success := call(\r\n                    txGas,\r\n                    to,\r\n                    value,\r\n                    add(data, 0x20),\r\n                    mload(data),\r\n                    0,\r\n                    0\r\n                )\r\n            }\r\n        }\r\n        if (success) emit ExecutionSuccess(to, value, data, operation, txGas);\r\n        else emit ExecutionFailure(to, value, data, operation, txGas);\r\n    }\r\n}\r\n"
    },
    "contracts/base/FallbackManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity 0.8.17;\r\n\r\nimport {SelfAuthorized} from \"../common/SelfAuthorized.sol\";\r\nimport {FallbackManagerErrors} from \"../common/Errors.sol\";\r\n\r\n/**\r\n *   @title Fallback Manager - A contract that manages fallback calls made to the Smart Account\r\n *   @dev Fallback calls are handled by a `handler` contract that is stored at FALLBACK_HANDLER_STORAGE_SLOT\r\n *        fallback calls are not delegated to the `handler` so they can not directly change Smart Account storage\r\n */\r\nabstract contract FallbackManager is SelfAuthorized, FallbackManagerErrors {\r\n    // keccak-256 hash of \"fallback_manager.handler.address\" subtracted by 1\r\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT =\r\n        0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d4;\r\n\r\n    uint256[24] private __gap;\r\n\r\n    event ChangedFallbackHandler(\r\n        address indexed previousHandler,\r\n        address indexed handler\r\n    );\r\n\r\n    fallback() external {\r\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\r\n\r\n        assembly {\r\n            let handler := sload(slot)\r\n            if iszero(handler) {\r\n                return(0, 0)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\r\n            // Then the address without padding is stored right after the calldata\r\n            mstore(calldatasize(), shl(96, caller()))\r\n            // Add 20 bytes for the address appended add the end\r\n            let success := call(\r\n                gas(),\r\n                handler,\r\n                0,\r\n                0,\r\n                add(calldatasize(), 20),\r\n                0,\r\n                0\r\n            )\r\n            returndatacopy(0, 0, returndatasize())\r\n            if iszero(success) {\r\n                revert(0, returndatasize())\r\n            }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n\r\n    /// @dev Allows to add a contract to handle fallback calls.\r\n    ///      Only fallback calls without value and with data will be forwarded\r\n    /// @param handler contract to handle fallback calls.\r\n    function setFallbackHandler(address handler) external virtual;\r\n\r\n    function getFallbackHandler() public view returns (address _handler) {\r\n        assembly {\r\n            _handler := sload(FALLBACK_HANDLER_STORAGE_SLOT)\r\n        }\r\n    }\r\n\r\n    function _setFallbackHandler(address handler) internal {\r\n        if (handler == address(0)) revert HandlerCannotBeZero();\r\n        address previousHandler;\r\n\r\n        assembly {\r\n            previousHandler := sload(FALLBACK_HANDLER_STORAGE_SLOT)\r\n            //}\r\n            //bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\r\n\r\n            //assembly {\r\n            sstore(FALLBACK_HANDLER_STORAGE_SLOT, handler)\r\n        }\r\n        emit ChangedFallbackHandler(previousHandler, handler);\r\n    }\r\n}\r\n"
    },
    "contracts/base/ModuleManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity 0.8.17;\r\n\r\nimport {SelfAuthorized} from \"../common/SelfAuthorized.sol\";\r\nimport {Executor, Enum} from \"./Executor.sol\";\r\nimport {ModuleManagerErrors} from \"../common/Errors.sol\";\r\n\r\n/**\r\n * @title Module Manager - A contract that manages modules that can execute transactions\r\n *        on behalf of the Smart Account via this contract.\r\n */\r\nabstract contract ModuleManager is\r\n    SelfAuthorized,\r\n    Executor,\r\n    ModuleManagerErrors\r\n{\r\n    address internal constant SENTINEL_MODULES = address(0x1);\r\n    mapping(address => address) internal _modules;\r\n    uint256[24] private __gap;\r\n\r\n    // Events\r\n    event EnabledModule(address module);\r\n    event DisabledModule(address module);\r\n    event ExecutionFromModuleSuccess(address indexed module);\r\n    event ExecutionFromModuleFailure(address indexed module);\r\n    event ModuleTransaction(\r\n        address module,\r\n        address to,\r\n        uint256 value,\r\n        bytes data,\r\n        Enum.Operation operation\r\n    );\r\n\r\n    /**\r\n     * @dev Adds a module to the allowlist.\r\n     * @notice This SHOULD only be done via userOp or a selfcall.\r\n     */\r\n    function enableModule(address module) external virtual;\r\n\r\n    /**\r\n     * @dev Setups module for this Smart Account and enables it.\r\n     * @notice This SHOULD only be done via userOp or a selfcall.\r\n     */\r\n    function setupAndEnableModule(\r\n        address setupContract,\r\n        bytes memory setupData\r\n    ) external virtual returns (address);\r\n\r\n    /**\r\n     * @dev Returns array of modules. Useful for a widget\r\n     * @param start Start of the page.\r\n     * @param pageSize Maximum number of modules that should be returned.\r\n     * @return array Array of modules.\r\n     * @return next Start of the next page.\r\n     */\r\n    function getModulesPaginated(\r\n        address start,\r\n        uint256 pageSize\r\n    ) external view returns (address[] memory array, address next) {\r\n        // Init array with max page size\r\n        array = new address[](pageSize);\r\n\r\n        // Populate return array\r\n        uint256 moduleCount;\r\n        address currentModule = _modules[start];\r\n        while (\r\n            currentModule != address(0x0) &&\r\n            currentModule != SENTINEL_MODULES &&\r\n            moduleCount < pageSize\r\n        ) {\r\n            array[moduleCount] = currentModule;\r\n            currentModule = _modules[currentModule];\r\n            moduleCount++;\r\n        }\r\n        next = currentModule;\r\n        // Set correct size of returned array\r\n\r\n        assembly {\r\n            mstore(array, moduleCount)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Allows a Module to execute a Smart Account transaction without any further confirmations.\r\n     * @param to Destination address of module transaction.\r\n     * @param value Ether value of module transaction.\r\n     * @param data Data payload of module transaction.\r\n     * @param operation Operation type of module transaction.\r\n     */\r\n    function execTransactionFromModule(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation,\r\n        uint256 txGas\r\n    ) public virtual returns (bool success) {\r\n        // Only whitelisted modules are allowed.\r\n        if (\r\n            msg.sender == SENTINEL_MODULES || _modules[msg.sender] == address(0)\r\n        ) revert ModuleNotEnabled(msg.sender);\r\n        // Execute transaction without further confirmations.\r\n        // Can add guards here to allow delegatecalls for selected modules (msg.senders) only\r\n        success = _execute(\r\n            to,\r\n            value,\r\n            data,\r\n            operation,\r\n            txGas == 0 ? gasleft() : txGas\r\n        );\r\n    }\r\n\r\n    function execTransactionFromModule(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation\r\n    ) public virtual returns (bool) {\r\n        return execTransactionFromModule(to, value, data, operation, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows a Module to execute a wallet transaction without any further confirmations and returns data\r\n     * @param to Destination address of module transaction.\r\n     * @param value Ether value of module transaction.\r\n     * @param data Data payload of module transaction.\r\n     * @param operation Operation type of module transaction.\r\n     */\r\n    function execTransactionFromModuleReturnData(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation\r\n    ) public returns (bool success, bytes memory returnData) {\r\n        success = execTransactionFromModule(to, value, data, operation);\r\n\r\n        assembly {\r\n            // Load free memory location\r\n            let ptr := mload(0x40)\r\n            // We allocate memory for the return data by setting the free memory location to\r\n            // current free memory location + data size + 32 bytes for data size value\r\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\r\n            // Store the size\r\n            mstore(ptr, returndatasize())\r\n            // Store the data\r\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\r\n            // Point the return data to the correct memory location\r\n            returnData := ptr\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Allows a Module to execute a batch of Smart Account transactions without any further confirmations.\r\n     * @param to Destination address of module transaction.\r\n     * @param value Ether value of module transaction.\r\n     * @param data Data payload of module transaction.\r\n     * @param operations Operation type of module transaction.\r\n     */\r\n    function execBatchTransactionFromModule(\r\n        address[] calldata to,\r\n        uint256[] calldata value,\r\n        bytes[] calldata data,\r\n        Enum.Operation[] calldata operations\r\n    ) public virtual returns (bool success) {\r\n        if (\r\n            to.length == 0 ||\r\n            to.length != value.length ||\r\n            value.length != data.length ||\r\n            data.length != operations.length\r\n        )\r\n            revert WrongBatchProvided(\r\n                to.length,\r\n                value.length,\r\n                data.length,\r\n                operations.length\r\n            );\r\n\r\n        // Only whitelisted modules are allowed.\r\n        if (\r\n            msg.sender == SENTINEL_MODULES || _modules[msg.sender] == address(0)\r\n        ) revert ModuleNotEnabled(msg.sender);\r\n\r\n        for (uint256 i; i < to.length; ) {\r\n            // Execute transaction without further confirmations.\r\n            success = _executeFromModule(\r\n                to[i],\r\n                value[i],\r\n                data[i],\r\n                operations[i]\r\n            );\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns if a module is enabled\r\n     * @return True if the module is enabled\r\n     */\r\n    function isModuleEnabled(address module) public view returns (bool) {\r\n        return SENTINEL_MODULES != module && _modules[module] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a module to the allowlist.\r\n     * @notice This can only be done via a userOp or a selfcall.\r\n     * @notice Enables the module `module` for the wallet.\r\n     * @param module Module to be allow-listed.\r\n     */\r\n    function _enableModule(address module) internal virtual {\r\n        // Module address cannot be null or sentinel.\r\n        if (module == address(0) || module == SENTINEL_MODULES)\r\n            revert ModuleCannotBeZeroOrSentinel(module);\r\n        // Module cannot be added twice.\r\n        if (_modules[module] != address(0)) revert ModuleAlreadyEnabled(module);\r\n\r\n        _modules[module] = _modules[SENTINEL_MODULES];\r\n        _modules[SENTINEL_MODULES] = module;\r\n\r\n        emit EnabledModule(module);\r\n    }\r\n\r\n    /**\r\n     * @dev Setups module for this Smart Account and enables it.\r\n     * @notice This can only be done via userOp or a selfcall.\r\n     */\r\n    function _setupAndEnableModule(\r\n        address setupContract,\r\n        bytes memory setupData\r\n    ) internal virtual returns (address) {\r\n        address module = _setupModule(setupContract, setupData);\r\n        _enableModule(module);\r\n        return module;\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a module from the allowlist.\r\n     * @notice This can only be done via a wallet transaction.\r\n     * @notice Disables the module `module` for the wallet.\r\n     * @param prevModule Module that pointed to the module to be removed in the linked list\r\n     * @param module Module to be removed.\r\n     */\r\n    function _disableModule(\r\n        address prevModule,\r\n        address module\r\n    ) internal virtual {\r\n        // Validate module address and check that it corresponds to module index.\r\n        if (module == address(0) || module == SENTINEL_MODULES)\r\n            revert ModuleCannotBeZeroOrSentinel(module);\r\n        if (_modules[prevModule] != module)\r\n            revert ModuleAndPrevModuleMismatch(\r\n                module,\r\n                _modules[prevModule],\r\n                prevModule\r\n            );\r\n        _modules[prevModule] = _modules[module];\r\n        delete _modules[module];\r\n        emit DisabledModule(module);\r\n    }\r\n\r\n    // TODO: can use not executor.execute, but SmartAccount._call for the unification\r\n\r\n    function _executeFromModule(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation\r\n    ) internal returns (bool success) {\r\n        success = _execute(to, value, data, operation, gasleft());\r\n        if (success) {\r\n            emit ModuleTransaction(msg.sender, to, value, data, operation);\r\n            emit ExecutionFromModuleSuccess(msg.sender);\r\n        } else emit ExecutionFromModuleFailure(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Setup function sets the initial storage of the contract.\r\n     * @param setupContract initializing the auth module; can be a module factory or a registry for multiple accounts.\r\n     * @param setupData modules setup data (a standard calldata for the module setup contract)\r\n     */\r\n    function _initialSetupModules(\r\n        address setupContract,\r\n        bytes memory setupData\r\n    ) internal virtual returns (address) {\r\n        address initialAuthorizationModule = _setupModule(\r\n            setupContract,\r\n            setupData\r\n        );\r\n\r\n        // Module address cannot be null or sentinel.\r\n        if (\r\n            initialAuthorizationModule == address(0) ||\r\n            initialAuthorizationModule == SENTINEL_MODULES\r\n        ) revert ModuleCannotBeZeroOrSentinel(initialAuthorizationModule);\r\n\r\n        _modules[initialAuthorizationModule] = SENTINEL_MODULES;\r\n        _modules[SENTINEL_MODULES] = initialAuthorizationModule;\r\n        return initialAuthorizationModule;\r\n    }\r\n\r\n    function _setupModule(\r\n        address setupContract,\r\n        bytes memory setupData\r\n    ) internal returns (address module) {\r\n        if (setupContract == address(0)) revert(\"Wrong Module Setup Address\");\r\n        assembly {\r\n            let success := call(\r\n                gas(),\r\n                setupContract,\r\n                0,\r\n                add(setupData, 0x20),\r\n                mload(setupData),\r\n                0,\r\n                0\r\n            )\r\n            let ptr := mload(0x40)\r\n            returndatacopy(ptr, 0, returndatasize())\r\n            if iszero(success) {\r\n                revert(ptr, returndatasize())\r\n            }\r\n            module := mload(ptr)\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/BaseSmartAccount.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.17;\r\n\r\nimport {IAccount} from \"@account-abstraction/contracts/interfaces/IAccount.sol\";\r\nimport {IEntryPoint} from \"@account-abstraction/contracts/interfaces/IEntryPoint.sol\";\r\nimport {UserOperationLib, UserOperation} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\r\nimport {BaseSmartAccountErrors} from \"./common/Errors.sol\";\r\nimport \"@account-abstraction/contracts/core/Helpers.sol\";\r\n\r\n/**\r\n * Basic account implementation.\r\n * This contract provides the basic logic for implementing the IAccount interface: validateUserOp function\r\n * Specific account implementation should inherit it and provide the account-specific logic\r\n */\r\nabstract contract BaseSmartAccount is IAccount, BaseSmartAccountErrors {\r\n    using UserOperationLib for UserOperation;\r\n\r\n    // Return value in case of signature failure, with no time-range.\r\n    // equivalent to _packValidationData(true,0,0);\r\n    uint256 internal constant SIG_VALIDATION_FAILED = 1;\r\n\r\n    /**\r\n     * @dev Initialize the Smart Account with required states.\r\n     * @param handler Default fallback handler for the Smart Account.\r\n     * @param moduleSetupContract Initializes the auth module; can be a factory or registry for multiple accounts.\r\n     * @param moduleSetupData Contains address of the Setup Contract and setup data.\r\n     * @notice Ensure this is callable only once (use initializer modifier or state checks).\r\n     */\r\n    function init(\r\n        address handler,\r\n        address moduleSetupContract,\r\n        bytes calldata moduleSetupData\r\n    ) external virtual returns (address);\r\n\r\n    /**\r\n     * Validates the userOp.\r\n     * @param userOp validate the userOp.signature field\r\n     * @param userOpHash convenient field: the hash of the request, to check the signature against\r\n     *          (also hashes the entrypoint and chain id)\r\n     * @param missingAccountFunds the amount of funds required to pay to EntryPoint to pay for the userOp execution.\r\n     * @return validationData signature and time-range of this operation\r\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\r\n     *         otherwise, an address of an \"authorizer\" contract.\r\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\r\n     *      <6-byte> validAfter - first timestamp this operation is valid\r\n     *      If no time-range in account, return SIG_VALIDATION_FAILED (1) for signature failure.\r\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\r\n     */\r\n    function validateUserOp(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash,\r\n        uint256 missingAccountFunds\r\n    ) external virtual override returns (uint256);\r\n\r\n    /**\r\n     * @return nonce the account nonce.\r\n     * @dev This method returns the next sequential nonce.\r\n     * @notice Provides 2D nonce functionality by allowing to use a nonce of a specific key.\r\n     */\r\n    function nonce(uint192 _key) public view virtual returns (uint256) {\r\n        return entryPoint().getNonce(address(this), _key);\r\n    }\r\n\r\n    /**\r\n     * return the entryPoint used by this account.\r\n     * subclass should return the current entryPoint used by this account.\r\n     */\r\n    function entryPoint() public view virtual returns (IEntryPoint);\r\n\r\n    /**\r\n     * sends to the entrypoint (msg.sender) the missing funds for this transaction.\r\n     * subclass MAY override this method for better funds management\r\n     * (e.g. send to the entryPoint more than the minimum required, so that in future transactions\r\n     * it will not be required to send again)\r\n     * @param missingAccountFunds the minimum value this method should send the entrypoint.\r\n     *  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\r\n     */\r\n    function _payPrefund(uint256 missingAccountFunds) internal virtual {\r\n        if (missingAccountFunds != 0) {\r\n            payable(msg.sender).call{\r\n                value: missingAccountFunds,\r\n                gas: type(uint256).max\r\n            }(\"\");\r\n            //ignore failure (its EntryPoint's job to verify, not account.)\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/common/Enum.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity 0.8.17;\r\n\r\n/// @title Enum - Collection of enums\r\nabstract contract Enum {\r\n    enum Operation {\r\n        Call,\r\n        DelegateCall\r\n    }\r\n}\r\n"
    },
    "contracts/common/Errors.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity 0.8.17;\r\n\r\ncontract BaseSmartAccountErrors {\r\n    /**\r\n     * @notice Throws at onlyEntryPoint when msg.sender is not an EntryPoint set for this Smart Account\r\n     * @param caller address that tried to call onlyEntryPoint-protected method\r\n     */\r\n    error CallerIsNotAnEntryPoint(address caller);\r\n}\r\n\r\ncontract FallbackManagerErrors {\r\n    /**\r\n     * @notice Throws if zero address has been provided as Fallback Handler address\r\n     */\r\n    error HandlerCannotBeZero();\r\n}\r\n\r\ncontract ModuleManagerErrors {\r\n    /**\r\n     * @notice Throws when trying to initialize module manager that already been initialized\r\n     */\r\n    error ModulesAlreadyInitialized();\r\n\r\n    /**\r\n     * @notice Throws when a delegatecall in course of module manager initialization has failed\r\n     */\r\n    error ModulesSetupExecutionFailed();\r\n\r\n    /**\r\n     * @notice Throws when address(0) or SENTINEL_MODULES constant has been provided as a module address\r\n     * @param module Module address provided\r\n     */\r\n    error ModuleCannotBeZeroOrSentinel(address module);\r\n\r\n    /**\r\n     * @notice Throws when trying to enable module that has already been enabled\r\n     * @param module Module address provided\r\n     */\r\n    error ModuleAlreadyEnabled(address module);\r\n\r\n    /**\r\n     * @notice Throws when module and previous module mismatch\r\n     * @param expectedModule expected module at modules[prevModule]\r\n     * @param returnedModule the module that has been found at modules[prevModule]\r\n     * @param prevModule previous module address provided at call\r\n     */\r\n    error ModuleAndPrevModuleMismatch(\r\n        address expectedModule,\r\n        address returnedModule,\r\n        address prevModule\r\n    );\r\n\r\n    /**\r\n     * @notice Throws when trying to execute transaction from module that is not enabled\r\n     * @param module Module address provided\r\n     */\r\n    error ModuleNotEnabled(address module);\r\n\r\n    /**\r\n     * @notice Throws when data for executeBatchCall provided in wrong format (i.e. empty array or lengths mismatch)\r\n     * @param destLength length of destination contracts array\r\n     * @param valueLength length of txn values array\r\n     * @param funcLength length of function signatures array\r\n     * @param operationLength length of operation types array. 0 if there's no operations\r\n     */\r\n    error WrongBatchProvided(\r\n        uint256 destLength,\r\n        uint256 valueLength,\r\n        uint256 funcLength,\r\n        uint256 operationLength\r\n    );\r\n}\r\n\r\ncontract SmartAccountErrors is BaseSmartAccountErrors, ModuleManagerErrors {\r\n    /**\r\n     * @notice Throws if zero address has been provided as Entry Point address\r\n     */\r\n    error EntryPointCannotBeZero();\r\n\r\n    /**\r\n     * @notice Throws at mixedAuth when msg.sender is not an owner neither _self\r\n     * @param caller address that tried to call mixedAuth-protected method\r\n     */\r\n    error MixedAuthFail(address caller);\r\n\r\n    /**\r\n     * @notice Throws if trying to change an owner of a SmartAccount to the zero address\r\n     */\r\n    error OwnerCannotBeZero();\r\n\r\n    /**\r\n     * @notice Throws if zero address has been provided as Base Implementation address\r\n     */\r\n    error BaseImplementationCannotBeZero();\r\n\r\n    /**\r\n     * @notice Throws if there is no code at implementationAddress\r\n     * @param implementationAddress implementation address provided\r\n     */\r\n    error InvalidImplementation(address implementationAddress);\r\n\r\n    /**\r\n     * @notice Throws at onlyOwner when msg.sender is not an owner\r\n     * @param caller address that tried to call onlyOwner method\r\n     */\r\n    error CallerIsNotOwner(address caller);\r\n\r\n    /**\r\n     * @notice Throws at _requireFromEntryPointOrOwner when msg.sender is not an EntryPoint neither an owner\r\n     * @param caller address that tried to call _requireFromEntryPointOrOwner-protected method\r\n     */\r\n    error CallerIsNotEntryPointOrOwner(address caller);\r\n\r\n    /**\r\n     * @notice Throws at _requireFromEntryPointOrSelf when msg.sender is not an EntryPoint neither self\r\n     * @param caller address that tried to call _requireFromEntryPointOrSelf-protected method\r\n     */\r\n    error CallerIsNotEntryPointOrSelf(address caller);\r\n\r\n    /**\r\n     * @notice Throws at _requireFromEntryPoint when msg.sender is not an EntryPoint\r\n     * @param caller address that tried to call _requireFromEntryPoint-protected method\r\n     */\r\n    error CallerIsNotEntryPoint(address caller);\r\n\r\n    /**\r\n     * @notice Throws if trying to initialize a Smart Account that has already been initialized\r\n     */\r\n    error AlreadyInitialized();\r\n\r\n    /**\r\n     * @notice Throws if contract signature is provided in frong format\r\n     * @param uintS s converted to uint256\r\n     * @param contractSignatureLength length of a contract signature\r\n     * @param signatureLength the whole signature length\r\n     */\r\n    error WrongContractSignatureFormat(\r\n        uint256 uintS,\r\n        uint256 contractSignatureLength,\r\n        uint256 signatureLength\r\n    );\r\n\r\n    /**\r\n     * @notice Throws if isValidSignature for the conrtact signature and data hash differs from EIP1271 Magic Value\r\n     * @param contractSignature the contract signature that has been verified\r\n     */\r\n    error WrongContractSignature(bytes contractSignature);\r\n\r\n    /**\r\n     * @notice Throws when if trying to transfer to zero address\r\n     */\r\n    error TransferToZeroAddressAttempt();\r\n\r\n    /**\r\n     * @notice Throws when module address taken from signature is not enabled\r\n     * @param moduleAddressProvided module address taken from signature\r\n     */\r\n    error WrongValidationModule(address moduleAddressProvided);\r\n\r\n    /**\r\n     * @notice Thrown when the function that must be called only via delegatecall is called directly\r\n     */\r\n    error DelegateCallsOnly();\r\n\r\n    /**\r\n     * @notice Thrown when trying to use address of the Smart Account as an owner for itself\r\n     */\r\n    error OwnerCanNotBeSelf();\r\n\r\n    /**\r\n     * @notice Thrown when trying to use current owner as a new owner in a _setOwner() call\r\n     */\r\n    error OwnerProvidedIsSame();\r\n}\r\n\r\ncontract SmartAccountFactoryErrors is SmartAccountErrors {\r\n    /**\r\n     * @notice Throws when the new Proxy deployment fails\r\n     * @param owner Owner of a Proxy (Smart Account)\r\n     * @param index Deployment index\r\n     */\r\n    error ProxyDeploymentFailed(address owner, uint256 index);\r\n}\r\n\r\ncontract SelfAuthorizedErrors {\r\n    /**\r\n     * @notice Throws when the caller is not address(this)\r\n     * @param caller Caller address\r\n     */\r\n    error CallerIsNotSelf(address caller);\r\n}\r\n\r\ncontract SingletonPaymasterErrors {\r\n    /**\r\n     * @notice Throws when the Entrypoint address provided is address(0)\r\n     */\r\n    error EntryPointCannotBeZero();\r\n\r\n    /**\r\n     * @notice Throws when the verifiying signer address provided is address(0)\r\n     */\r\n    error VerifyingSignerCannotBeZero();\r\n\r\n    /**\r\n     * @notice Throws when the paymaster address provided is address(0)\r\n     */\r\n    error PaymasterIdCannotBeZero();\r\n\r\n    /**\r\n     * @notice Throws when the 0 has been provided as deposit\r\n     */\r\n    error DepositCanNotBeZero();\r\n\r\n    /**\r\n     * @notice Throws when trying to withdraw to address(0)\r\n     */\r\n    error CanNotWithdrawToZeroAddress();\r\n\r\n    /**\r\n     * @notice Throws when trying to withdraw more than balance available\r\n     * @param amountRequired required balance\r\n     * @param currentBalance available balance\r\n     */\r\n    error InsufficientBalance(uint256 amountRequired, uint256 currentBalance);\r\n\r\n    /**\r\n     * @notice Throws when signature provided has invalid length\r\n     * @param sigLength length oif the signature provided\r\n     */\r\n    error InvalidPaymasterSignatureLength(uint256 sigLength);\r\n}\r\n\r\n//\r\n"
    },
    "contracts/common/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity 0.8.17;\r\n\r\n/// @title Reentrancy Guard - reentrancy protection\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant NOT_ENTERED = 1;\r\n    uint256 private constant ENTERED = 2;\r\n\r\n    uint256 private _reentrancyStatus;\r\n\r\n    error ReentrancyProtectionActivated();\r\n\r\n    modifier nonReentrant() {\r\n        if (_reentrancyStatus == ENTERED)\r\n            revert ReentrancyProtectionActivated();\r\n        _reentrancyStatus = ENTERED;\r\n        _;\r\n        _reentrancyStatus = NOT_ENTERED;\r\n    }\r\n\r\n    constructor() {\r\n        _reentrancyStatus = NOT_ENTERED;\r\n    }\r\n\r\n    function _isReentrancyGuardEntered() internal view returns (bool) {\r\n        return _reentrancyStatus == ENTERED;\r\n    }\r\n}\r\n"
    },
    "contracts/common/SecuredTokenTransfer.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity 0.8.17;\r\n\r\n/// @title SecuredTokenTransfer - Secure token transfer\r\nabstract contract SecuredTokenTransfer {\r\n    /// @dev Transfers a token and returns if it was a success\r\n    /// @param token Token that should be transferred\r\n    /// @param receiver Receiver to whom the token should be transferred\r\n    /// @param amount The amount of tokens that should be transferred\r\n    function _transferToken(\r\n        address token,\r\n        address receiver,\r\n        uint256 amount\r\n    ) internal returns (bool transferred) {\r\n        require(token != address(0), \"token can not be zero address\");\r\n        require(token.code.length > 0, \"token contract doesn't exist\");\r\n        // 0xa9059cbb - keccack(\"transfer(address,uint256)\")\r\n        bytes memory data = abi.encodeWithSelector(\r\n            0xa9059cbb,\r\n            receiver,\r\n            amount\r\n        );\r\n\r\n        assembly {\r\n            // We write the return value to scratch space.\r\n            // See https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_memory.html#layout-in-memory\r\n            let success := call(\r\n                sub(gas(), 10000),\r\n                token,\r\n                0,\r\n                add(data, 0x20),\r\n                mload(data),\r\n                0,\r\n                0x20\r\n            )\r\n            switch returndatasize()\r\n            case 0 {\r\n                transferred := success\r\n            }\r\n            case 0x20 {\r\n                transferred := iszero(or(iszero(success), iszero(mload(0))))\r\n            }\r\n            default {\r\n                transferred := 0\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/common/SelfAuthorized.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity 0.8.17;\r\n\r\nimport {SelfAuthorizedErrors} from \"../common/Errors.sol\";\r\n\r\n/// @title SelfAuthorized - authorizes current contract to perform actions\r\ncontract SelfAuthorized is SelfAuthorizedErrors {\r\n    modifier authorized() {\r\n        // This is a function call as it minimized the bytecode size\r\n        _requireSelfCall();\r\n        _;\r\n    }\r\n\r\n    function _requireSelfCall() private view {\r\n        if (msg.sender != address(this)) revert CallerIsNotSelf(msg.sender);\r\n    }\r\n}\r\n"
    },
    "contracts/common/SignatureDecoder.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity 0.8.17;\r\n\r\n/// @title SignatureDecoder - Decodes signatures that a encoded as bytes\r\nabstract contract SignatureDecoder {\r\n    /// @dev divides bytes signature into `uint8 v, bytes32 r, bytes32 s`.\r\n    /// @param signature concatenated rsv signatures\r\n    function _signatureSplit(\r\n        bytes memory signature\r\n    ) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\r\n        // The signature format is a compact form of:\r\n        //   {bytes32 r}{bytes32 s}{uint8 v}\r\n        // Compact means, uint8 is not padded to 32 bytes.\r\n\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            // Here we are loading the last 32 bytes, including 31 bytes\r\n            // of 's'. There is no 'mload8' to do this.\r\n            //\r\n            // 'byte' is not working due to the Solidity parser, so let's\r\n            // use the second best option, 'and'\r\n            v := and(mload(add(signature, 0x41)), 0xff)\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/common/Stakeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {IEntryPoint} from \"@account-abstraction/contracts/interfaces/IEntryPoint.sol\";\r\n\r\n/**\r\n * @title Stakeable Entity\r\n * @author Fil Makarov - <filipp.makarov@biconomy.io>\r\n */\r\ncontract Stakeable is Ownable {\r\n    constructor(address _newOwner) {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    function addStake(\r\n        address epAddress,\r\n        uint32 unstakeDelaySec\r\n    ) external payable onlyOwner {\r\n        require(epAddress != address(0), \"Invalid EP address\");\r\n        IEntryPoint(epAddress).addStake{value: msg.value}(unstakeDelaySec);\r\n    }\r\n\r\n    function unlockStake(address epAddress) external onlyOwner {\r\n        require(epAddress != address(0), \"Invalid EP address\");\r\n        IEntryPoint(epAddress).unlockStake();\r\n    }\r\n\r\n    function withdrawStake(\r\n        address epAddress,\r\n        address payable withdrawAddress\r\n    ) external onlyOwner {\r\n        require(epAddress != address(0), \"Invalid EP address\");\r\n        IEntryPoint(epAddress).withdrawStake(withdrawAddress);\r\n    }\r\n}\r\n"
    },
    "contracts/deployer/Create3.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n  @title A library for deploying contracts EIP-3171 style.\r\n  @author Agustin Aguilar <aa@horizon.io>\r\n*/\r\nlibrary Create3 {\r\n    /**\r\n    @notice The bytecode for a contract that proxies the creation of another contract\r\n    @dev If deployed via CREATE2, decouple creationCode from child contract address.\r\n  \r\n  0x67363d3d37363d34f03d5260086018f3:\r\n      0x00  0x67  0x67XXXXXXXXXXXXXXXX  PUSH8 bytecode  0x363d3d37363d34f0\r\n      0x01  0x3d  0x3d                  RETURNDATASIZE  0 0x363d3d37363d34f0\r\n      0x02  0x52  0x52                  MSTORE\r\n      0x03  0x60  0x6008                PUSH1 08        8\r\n      0x04  0x60  0x6018                PUSH1 18        24 8\r\n      0x05  0xf3  0xf3                  RETURN\r\n\r\n  0x363d3d37363d34f0:\r\n      0x00  0x36  0x36                  CALLDATASIZE    cds\r\n      0x01  0x3d  0x3d                  RETURNDATASIZE  0 cds\r\n      0x02  0x3d  0x3d                  RETURNDATASIZE  0 0 cds\r\n      0x03  0x37  0x37                  CALLDATACOPY\r\n      0x04  0x36  0x36                  CALLDATASIZE    cds\r\n      0x05  0x3d  0x3d                  RETURNDATASIZE  0 cds\r\n      0x06  0x34  0x34                  CALLVALUE       val 0 cds\r\n      0x07  0xf0  0xf0                  CREATE          addr\r\n  */\r\n\r\n    bytes internal constant PROXY_CHILD_BYTECODE =\r\n        hex\"67_36_3d_3d_37_36_3d_34_f0_3d_52_60_08_60_18_f3\";\r\n\r\n    //                        KECCAK256_PROXY_CHILD_BYTECODE = keccak256(PROXY_CHILD_BYTECODE);\r\n    bytes32 internal constant KECCAK256_PROXY_CHILD_BYTECODE =\r\n        0x21c35dbe1b344a2488cf3321d6ce542f8e9f305544ff09e4993a62319a497c1f;\r\n\r\n    error ErrorCreatingProxy();\r\n    error ErrorCreatingContract();\r\n    error TargetAlreadyExists();\r\n\r\n    /**\r\n    @notice Creates a new contract with given `_creationCode` and `_salt`\r\n    @param _salt Salt of the contract creation, resulting address will be derivated from this value only\r\n@param _creationCode Constructor code for contract to be deployed; it doesn't affect the resulting address.\r\n    @return addr of the deployed contract, reverts on error\r\n  */\r\n    function create3(\r\n        bytes32 _salt,\r\n        bytes memory _creationCode\r\n    ) internal returns (address addr) {\r\n        return create3(_salt, _creationCode, 0);\r\n    }\r\n\r\n    /**\r\n    @notice Creates a new contract with given `_creationCode` and `_salt`\r\n    @param _salt Salt of the contract creation, resulting address will be derivated from this value only\r\n    @param _creationCode Constructor code for contract to be deployed; it doesn't affect the resulting address.\r\n    @param _value In WEI of ETH to be forwarded to child contract\r\n    @return addr of the deployed contract, reverts on error\r\n  */\r\n    function create3(\r\n        bytes32 _salt,\r\n        bytes memory _creationCode,\r\n        uint256 _value\r\n    ) internal returns (address addr) {\r\n        // Creation code\r\n        bytes memory creationCode = PROXY_CHILD_BYTECODE;\r\n\r\n        // Get target final address\r\n        addr = addressOf(_salt);\r\n        if (codeSize(addr) != 0) revert TargetAlreadyExists();\r\n\r\n        // Create CREATE2 proxy\r\n        address proxy;\r\n        assembly {\r\n            proxy := create2(\r\n                0,\r\n                add(creationCode, 32),\r\n                mload(creationCode),\r\n                _salt\r\n            )\r\n        }\r\n        if (proxy == address(0)) revert ErrorCreatingProxy();\r\n\r\n        // Call proxy with final init code\r\n        (bool success, ) = proxy.call{value: _value}(_creationCode);\r\n        if (!success || codeSize(addr) == 0) revert ErrorCreatingContract();\r\n    }\r\n\r\n    function addressOfProxy(bytes32 _salt) internal view returns (address) {\r\n        return\r\n            address(\r\n                uint160(\r\n                    uint256(\r\n                        keccak256(\r\n                            abi.encodePacked(\r\n                                hex\"ff\",\r\n                                address(this),\r\n                                _salt,\r\n                                KECCAK256_PROXY_CHILD_BYTECODE\r\n                            )\r\n                        )\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Computes the resulting address of a contract deployed using address(this) and the given `_salt`\r\n     *\r\n     * @dev Address creation formula:\r\n     * keccak256(rlp([keccak256(0xff+address(this)+_salt+keccak256(childBytecode))[12:],0x01]))\r\n     *\r\n     * @param _salt Salt of the contract creation, resulting address will be derived from this value only\r\n     * @return addr of the deployed contract, reverts on error\r\n     */\r\n    function addressOf(bytes32 _salt) internal view returns (address) {\r\n        address proxy = addressOfProxy(_salt);\r\n        return\r\n            address(\r\n                uint160(\r\n                    uint256(\r\n                        keccak256(abi.encodePacked(hex\"d6_94\", proxy, hex\"01\"))\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n    @notice Returns the size of the code on a given address\r\n    @param _addr Address that may or may not contain code\r\n    @return size of the code on the given `_addr`\r\n  */\r\n    function codeSize(address _addr) internal view returns (uint256 size) {\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/deployer/Deployer.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity 0.8.17;\r\n\r\nimport \"./Create3.sol\";\r\n\r\ncontract Deployer {\r\n    event ContractDeployed(address indexed contractAddress);\r\n\r\n    function deploy(bytes32 _salt, bytes calldata _creationCode) external {\r\n        address deployedContract = Create3.create3(_salt, _creationCode);\r\n        emit ContractDeployed(deployedContract);\r\n    }\r\n\r\n    function addressOf(bytes32 _salt) external view returns (address) {\r\n        return Create3.addressOf(_salt);\r\n    }\r\n}\r\n"
    },
    "contracts/estimation/SmartAccountNoAuth.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport {BaseSmartAccount, IEntryPoint, UserOperation} from \"../BaseSmartAccount.sol\";\r\nimport {ModuleManager} from \"../base/ModuleManager.sol\";\r\nimport {FallbackManager} from \"../base/FallbackManager.sol\";\r\nimport {SignatureDecoder} from \"../common/SignatureDecoder.sol\";\r\nimport {SecuredTokenTransfer} from \"../common/SecuredTokenTransfer.sol\";\r\nimport {LibAddress} from \"../libs/LibAddress.sol\";\r\nimport {ISignatureValidator} from \"../interfaces/ISignatureValidator.sol\";\r\nimport {IERC165} from \"../interfaces/IERC165.sol\";\r\nimport {ReentrancyGuard} from \"../common/ReentrancyGuard.sol\";\r\nimport {SmartAccountErrors} from \"../common/Errors.sol\";\r\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport {IAuthorizationModule} from \"../interfaces/IAuthorizationModule.sol\";\r\n\r\n/**\r\n * @title SmartAccount - EIP-4337 compatible smart contract wallet.\r\n * @dev This contract is the base for the Smart Account functionality.\r\n *         - It provides the functionality to execute both gnosis-style txns and AA (EIP-4337) userOps\r\n *         - It allows to receive and manage assets.\r\n *         - It is responsible for managing the modules and fallbacks.\r\n *         - The Smart Account can be extended with smodules, such as Social Recovery, Session Key and others.\r\n * @author Chirag Titiya - <chirag@biconomy.io>\r\n */\r\ncontract SmartAccountNoAuth is\r\n    BaseSmartAccount,\r\n    ModuleManager,\r\n    FallbackManager,\r\n    SignatureDecoder,\r\n    SecuredTokenTransfer,\r\n    IERC165,\r\n    ReentrancyGuard,\r\n    SmartAccountErrors,\r\n    ISignatureValidator\r\n{\r\n    using ECDSA for bytes32;\r\n    using LibAddress for address;\r\n\r\n    // Storage Version\r\n    string public constant VERSION = \"1.0.0\";\r\n\r\n    // Domain Seperators keccak256(\"EIP712Domain(uint256 chainId,address verifyingContract)\");\r\n    bytes32 internal constant DOMAIN_SEPARATOR_TYPEHASH =\r\n        0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\r\n\r\n    // solhint-disable-next-line\r\n    // keccak256(\"AccountTx(address to,uint256 value,bytes data,uint8 operation,uint256 targetTxGas,uint256 baseGas,uint256 gasPrice,uint256 tokenGasPriceFactor,address gasToken,address refundReceiver,uint256 nonce)\");\r\n    bytes32 internal constant ACCOUNT_TX_TYPEHASH =\r\n        0xda033865d68bf4a40a5a7cb4159a99e33dba8569e65ea3e38222eb12d9e66eee;\r\n\r\n    // /!\\ Owner storage. Deprecated. Left for storage layout compatibility /!\\\r\n    address public ownerDeprecated;\r\n\r\n    // changed to 2D nonce below\r\n    // @notice there is no _nonce\r\n    mapping(uint256 => uint256) public nonces;\r\n\r\n    // AA immutable storage\r\n    IEntryPoint private immutable ENTRY_POINT;\r\n    uint256 private immutable CHAIN_ID;\r\n    address private immutable SELF;\r\n\r\n    // Events\r\n\r\n    event ImplementationUpdated(\r\n        address indexed oldImplementation,\r\n        address indexed newImplementation\r\n    );\r\n    event AccountHandlePayment(bytes32 indexed txHash, uint256 indexed payment);\r\n    event SmartAccountReceivedNativeToken(\r\n        address indexed sender,\r\n        uint256 indexed value\r\n    );\r\n\r\n    /**\r\n     * @dev Constructor that sets the owner of the contract and the entry point contract.\r\n     *      _modules[SENTINEL_MODULES] = SENTINEL_MODULES protects implementation from initialization\r\n     * @param anEntryPoint The address of the entry point contract.\r\n     */\r\n    constructor(IEntryPoint anEntryPoint) {\r\n        _modules[SENTINEL_MODULES] = SENTINEL_MODULES;\r\n        SELF = address(this);\r\n        if (address(anEntryPoint) == address(0))\r\n            revert EntryPointCannotBeZero();\r\n        ENTRY_POINT = anEntryPoint;\r\n        CHAIN_ID = block.chainid;\r\n    }\r\n\r\n    /**\r\n     * @dev This function is a special fallback function that is triggered when the contract receives Ether.\r\n     * It logs an event indicating the amount of Ether received and the sender's address.\r\n     * @notice This function is marked as external and payable, meaning it can be called from external\r\n     * sources and accepts Ether as payment.\r\n     */\r\n    receive() external payable {\r\n        if (address(this) == SELF) revert DelegateCallsOnly();\r\n        emit SmartAccountReceivedNativeToken(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Initialize the Smart Account with required states\r\n     * @param handler Default fallback handler provided in Smart Account\r\n     * @param moduleSetupContract Initializes the auth module; can be a factory or registry for multiple accounts.\r\n     * @param moduleSetupData modules setup data (a standard calldata for the module setup contract)\r\n     * @notice devs need to make sure it is only callble once by initiazer or state check restrictions\r\n     * @notice any further implementations that introduces a new state must have a reinit method\r\n     * @notice reinit is not possible, as _initialSetupModules reverts if the account is already initialized\r\n     *         which is when there is at least one enabled module\r\n     */\r\n    function init(\r\n        address handler,\r\n        address moduleSetupContract,\r\n        bytes calldata moduleSetupData\r\n    ) external virtual override returns (address) {\r\n        _setFallbackHandler(handler);\r\n        return _initialSetupModules(moduleSetupContract, moduleSetupData);\r\n    }\r\n\r\n    /**\r\n     * @dev Interface function with the standard name for execute_ncC\r\n     * @param dest Address of the contract to call\r\n     * @param value Amount of native tokens to send along with the transaction\r\n     * @param func Data of the transaction\r\n     */\r\n    function execute(\r\n        address dest,\r\n        uint256 value,\r\n        bytes calldata func\r\n    ) external {\r\n        execute_ncC(dest, value, func);\r\n    }\r\n\r\n    /**\r\n     * @dev Interface function with the standard name for executeBatch_y6U\r\n     * @param dest Addresses of the contracts to call\r\n     * @param value Amounts of native tokens to send along with the transactions\r\n     * @param func Data of the transactions\r\n     */\r\n    function executeBatch(\r\n        address[] calldata dest,\r\n        uint256[] calldata value,\r\n        bytes[] calldata func\r\n    ) external {\r\n        executeBatch_y6U(dest, value, func);\r\n    }\r\n\r\n    function validateUserOp(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash,\r\n        uint256 missingAccountFunds\r\n    ) external virtual override returns (uint256 validationData) {\r\n        if (msg.sender != address(entryPoint()))\r\n            revert CallerIsNotAnEntryPoint(msg.sender);\r\n\r\n        (, address validationModule) = abi.decode(\r\n            userOp.signature,\r\n            (bytes, address)\r\n        );\r\n        if (address(_modules[validationModule]) != address(0)) {\r\n            validationData = IAuthorizationModule(validationModule)\r\n                .validateUserOp(userOp, userOpHash);\r\n        } else {\r\n            revert WrongValidationModule(validationModule);\r\n        }\r\n        _payPrefund(missingAccountFunds);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a module to the allowlist.\r\n     * @notice This can only be done via a userOp or a selfcall.\r\n     * @notice Enables the module `module` for the wallet.\r\n     * @param module Module to be allow-listed.\r\n     */\r\n    function enableModule(address module) external virtual override {\r\n        _requireFromEntryPointOrSelf();\r\n        _enableModule(module);\r\n    }\r\n\r\n    /**\r\n     * @dev Setups module for this Smart Account and enables it.\r\n     * @notice This can only be done via userOp or a selfcall.\r\n     * @notice Enables the module `module` for the wallet.\r\n     */\r\n    function setupAndEnableModule(\r\n        address setupContract,\r\n        bytes memory setupData\r\n    ) external virtual override returns (address) {\r\n        _requireFromEntryPointOrSelf();\r\n        return _setupAndEnableModule(setupContract, setupData);\r\n    }\r\n\r\n    function setFallbackHandler(address handler) external virtual override {\r\n        _requireFromEntryPoint();\r\n        _setFallbackHandler(handler);\r\n    }\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @param _interfaceId The interface identifier, as specified in ERC165\r\n     * @return `true` if the contract implements `_interfaceID`\r\n     */\r\n    function supportsInterface(\r\n        bytes4 _interfaceId\r\n    ) external view virtual override returns (bool) {\r\n        return _interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the implementation contract associated with this contract.\r\n     * @notice The implementation address is stored in the contract's storage slot with index 0.\r\n     */\r\n    function getImplementation()\r\n        external\r\n        view\r\n        returns (address _implementation)\r\n    {\r\n        assembly {\r\n            _implementation := sload(address())\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice All the new implementations MUST have this method!\r\n     * @notice Updates the implementation of the base wallet\r\n     * @param _implementation New wallet implementation\r\n     */\r\n    function updateImplementation(address _implementation) public virtual {\r\n        _requireFromEntryPointOrSelf();\r\n        require(_implementation != address(0), \"Address cannot be zero\");\r\n        if (!_implementation.isContract())\r\n            revert InvalidImplementation(_implementation);\r\n        address oldImplementation;\r\n\r\n        assembly {\r\n            oldImplementation := sload(address())\r\n            sstore(address(), _implementation)\r\n        }\r\n        emit ImplementationUpdated(oldImplementation, _implementation);\r\n    }\r\n\r\n    /* solhint-disable func-name-mixedcase */\r\n\r\n    /**\r\n     * @dev Execute a transaction (called directly from owner, or by entryPoint)\r\n     * @notice Name is optimized for this method to be cheaper to be called\r\n     * @param dest Address of the contract to call\r\n     * @param value Amount of native tokens to send along with the transaction\r\n     * @param func Data of the transaction\r\n     */\r\n    function execute_ncC(\r\n        address dest,\r\n        uint256 value,\r\n        bytes calldata func\r\n    ) public {\r\n        _requireFromEntryPoint();\r\n        _call(dest, value, func);\r\n    }\r\n\r\n    /**\r\n     * @dev Execute a sequence of transactions\r\n     * @notice Name is optimized for this method to be cheaper to be called\r\n     * @param dest Addresses of the contracts to call\r\n     * @param value Amounts of native tokens to send along with the transactions\r\n     * @param func Data of the transactions\r\n     */\r\n    function executeBatch_y6U(\r\n        address[] calldata dest,\r\n        uint256[] calldata value,\r\n        bytes[] calldata func\r\n    ) public {\r\n        _requireFromEntryPoint();\r\n        if (\r\n            dest.length == 0 ||\r\n            dest.length != value.length ||\r\n            value.length != func.length\r\n        ) revert WrongBatchProvided(dest.length, value.length, func.length, 0);\r\n        for (uint256 i; i < dest.length; ) {\r\n            _call(dest[i], value[i], func[i]);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /* solhint-enable func-name-mixedcase */\r\n\r\n    /**\r\n     * @dev Deposit more funds for this account in the entryPoint\r\n     */\r\n    function addDeposit() public payable {\r\n        entryPoint().depositTo{value: msg.value}(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw value from the account's deposit\r\n     * @param withdrawAddress target to send to\r\n     * @param amount to withdraw\r\n     */\r\n    function withdrawDepositTo(\r\n        address payable withdrawAddress,\r\n        uint256 amount\r\n    ) public payable {\r\n        _requireFromEntryPointOrSelf();\r\n        entryPoint().withdrawTo(withdrawAddress, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a module from the allowlist.\r\n     * @notice This can only be done via a wallet transaction.\r\n     * @notice Disables the module `module` for the wallet.\r\n     * @param prevModule Module that pointed to the module to be removed in the linked list\r\n     * @param module Module to be removed.\r\n     */\r\n    function disableModule(address prevModule, address module) public virtual {\r\n        _requireFromEntryPointOrSelf();\r\n        _disableModule(prevModule, module);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current entry point used by this account.\r\n     * @return EntryPoint as an `IEntryPoint` interface.\r\n     * @dev This function should be implemented by the subclass to return the current entry point used by this account.\r\n     */\r\n    function entryPoint() public view virtual override returns (IEntryPoint) {\r\n        return ENTRY_POINT;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\r\n     * @return bytes32 The domain separator hash.\r\n     */\r\n    function domainSeparator() public view returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    DOMAIN_SEPARATOR_TYPEHASH,\r\n                    block.chainid,\r\n                    address(this)\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the ID of the chain the contract is currently deployed on.\r\n     * @return CHAIN_ID The ID of the current chain as a uint256.\r\n     */\r\n    function getChainId() public view returns (uint256) {\r\n        return CHAIN_ID;\r\n    }\r\n\r\n    /**\r\n     * @dev returns a value from the nonces 2d mapping\r\n     * @param batchId : the key of the user's batch being queried\r\n     * @return nonce : the number of transactions made within said batch\r\n     */\r\n    function getNonce(uint256 batchId) public view virtual returns (uint256) {\r\n        return nonces[batchId];\r\n    }\r\n\r\n    /**\r\n     * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)\r\n     * @dev If owner is a smart-contract (other smart contract wallet or module, that controls\r\n     *      signature verifications - like multisig), forward isValidSignature request to it.\r\n     *      In case of multisig, _signature can be several concatenated signatures\r\n     *      If owner is EOA, perform a regular ecrecover.\r\n     * @param ethSignedDataHash 32 bytes hash of the data signed on the behalf of address(msg.sender)\r\n     *                          prepended with '\\x19Ethereum Signed Message:\\n'\r\n     * @param signature Signature byte array associated with ethSignedDataHash\r\n     * @return bytes4 value.\r\n     */\r\n    function isValidSignature(\r\n        bytes32 ethSignedDataHash,\r\n        bytes memory signature\r\n    ) public view override returns (bytes4) {\r\n        (bytes memory moduleSignature, address validationModule) = abi.decode(\r\n            signature,\r\n            (bytes, address)\r\n        );\r\n        if (address(_modules[validationModule]) != address(0)) {\r\n            return\r\n                ISignatureValidator(validationModule).isValidSignature(\r\n                    ethSignedDataHash,\r\n                    moduleSignature\r\n                );\r\n        } else {\r\n            revert WrongValidationModule(validationModule);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Check current account deposit in the entryPoint\r\n     */\r\n    function getDeposit() public view returns (uint256) {\r\n        return entryPoint().balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev internal method that fecilitates the extenral calls from SmartAccount\r\n     * @dev similar to execute() of Executor.sol\r\n     * @param target destination address contract/non-contract\r\n     * @param value amount of native tokens\r\n     * @param data function singature of destination\r\n     */\r\n    function _call(address target, uint256 value, bytes memory data) internal {\r\n        assembly {\r\n            let success := call(\r\n                gas(),\r\n                target,\r\n                value,\r\n                add(data, 0x20),\r\n                mload(data),\r\n                0,\r\n                0\r\n            )\r\n            let ptr := mload(0x40)\r\n            returndatacopy(ptr, 0, returndatasize())\r\n            if iszero(success) {\r\n                revert(ptr, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This function allows the owner or entry point to execute certain actions.\r\n     * If the caller is not authorized, the function will revert with an error message.\r\n     * @notice This modifier is marked as internal and can only be called within the contract itself.\r\n     */\r\n    function _requireFromEntryPointOrSelf() internal view {\r\n        if (msg.sender != address(entryPoint()) && msg.sender != address(this))\r\n            revert CallerIsNotEntryPointOrSelf(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev This function allows the owner or entry point to execute certain actions.\r\n     * If the caller is not authorized, the function will revert with an error message.\r\n     * @notice This modifier is marked as internal and can only be called within the contract itself.\r\n     */\r\n    function _requireFromEntryPoint() internal view {\r\n        if (msg.sender != address(entryPoint()))\r\n            revert CallerIsNotEntryPoint(msg.sender);\r\n    }\r\n}\r\n"
    },
    "contracts/factory/SmartAccountFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"../Proxy.sol\";\r\nimport \"../BaseSmartAccount.sol\";\r\nimport {DefaultCallbackHandler} from \"../handler/DefaultCallbackHandler.sol\";\r\nimport {Stakeable} from \"../common/Stakeable.sol\";\r\n\r\n/**\r\n * @title Smart Account Factory - factory responsible for deploying Smart Accounts using CREATE2 and CREATE\r\n * @dev It deploys Smart Accounts as proxies pointing to `basicImplementation` that is immutable.\r\n *      This allows keeping the same address for the same Smart Account owner on various chains via CREATE2\r\n * @author Chirag Titiya - <chirag@biconomy.io>\r\n */\r\ncontract SmartAccountFactory is Stakeable {\r\n    address public immutable basicImplementation;\r\n    DefaultCallbackHandler public immutable minimalHandler;\r\n\r\n    event AccountCreation(\r\n        address indexed account,\r\n        address indexed initialAuthModule,\r\n        uint256 indexed index\r\n    );\r\n    event AccountCreationWithoutIndex(\r\n        address indexed account,\r\n        address indexed initialAuthModule\r\n    );\r\n\r\n    constructor(\r\n        address _basicImplementation,\r\n        address _newOwner\r\n    ) Stakeable(_newOwner) {\r\n        require(\r\n            _basicImplementation != address(0),\r\n            \"implementation cannot be zero\"\r\n        );\r\n        basicImplementation = _basicImplementation;\r\n        minimalHandler = new DefaultCallbackHandler();\r\n    }\r\n\r\n    /**\r\n     * @notice Allows to find out account address prior to deployment\r\n     * @param index extra salt that allows to deploy more accounts if needed for same EOA (default 0)\r\n     */\r\n    function getAddressForCounterFactualAccount(\r\n        address moduleSetupContract,\r\n        bytes calldata moduleSetupData,\r\n        uint256 index\r\n    ) external view returns (address _account) {\r\n        // create initializer data based on init method, _owner and minimalHandler\r\n        bytes memory initializer = _getInitializer(\r\n            moduleSetupContract,\r\n            moduleSetupData\r\n        );\r\n        bytes memory code = abi.encodePacked(\r\n            type(Proxy).creationCode,\r\n            uint256(uint160(basicImplementation))\r\n        );\r\n        bytes32 salt = keccak256(\r\n            abi.encodePacked(keccak256(initializer), index)\r\n        );\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(bytes1(0xff), address(this), salt, keccak256(code))\r\n        );\r\n        _account = address(uint160(uint256(hash)));\r\n    }\r\n\r\n    /**\r\n     * @notice Deploys account using create2 and points it to basicImplementation\r\n     *\r\n     * @param index extra salt that allows to deploy more account if needed for same EOA (default 0)\r\n     */\r\n    function deployCounterFactualAccount(\r\n        address moduleSetupContract,\r\n        bytes calldata moduleSetupData,\r\n        uint256 index\r\n    ) public returns (address proxy) {\r\n        // create initializer data based on init method and parameters\r\n        bytes memory initializer = _getInitializer(\r\n            moduleSetupContract,\r\n            moduleSetupData\r\n        );\r\n        bytes32 salt = keccak256(\r\n            abi.encodePacked(keccak256(initializer), index)\r\n        );\r\n\r\n        bytes memory deploymentData = abi.encodePacked(\r\n            type(Proxy).creationCode,\r\n            uint256(uint160(basicImplementation))\r\n        );\r\n\r\n        assembly {\r\n            proxy := create2(\r\n                0x0,\r\n                add(0x20, deploymentData),\r\n                mload(deploymentData),\r\n                salt\r\n            )\r\n        }\r\n        require(address(proxy) != address(0), \"Create2 call failed\");\r\n\r\n        address initialAuthorizationModule;\r\n\r\n        if (initializer.length > 0) {\r\n            assembly {\r\n                let success := call(\r\n                    gas(),\r\n                    proxy,\r\n                    0,\r\n                    add(initializer, 0x20),\r\n                    mload(initializer),\r\n                    0,\r\n                    0\r\n                )\r\n                let ptr := mload(0x40)\r\n                returndatacopy(ptr, 0, returndatasize())\r\n                if iszero(success) {\r\n                    revert(ptr, returndatasize())\r\n                }\r\n                initialAuthorizationModule := mload(ptr)\r\n            }\r\n        }\r\n        emit AccountCreation(proxy, initialAuthorizationModule, index);\r\n    }\r\n\r\n    /**\r\n     * @notice Deploys account using create and points it to _implementation\r\n     \r\n     * @return proxy address of the deployed account\r\n     */\r\n    function deployAccount(\r\n        address moduleSetupContract,\r\n        bytes calldata moduleSetupData\r\n    ) public returns (address proxy) {\r\n        bytes memory deploymentData = abi.encodePacked(\r\n            type(Proxy).creationCode,\r\n            uint256(uint160(basicImplementation))\r\n        );\r\n\r\n        assembly {\r\n            proxy := create(\r\n                0x0,\r\n                add(0x20, deploymentData),\r\n                mload(deploymentData)\r\n            )\r\n        }\r\n        require(address(proxy) != address(0), \"Create call failed\");\r\n\r\n        bytes memory initializer = _getInitializer(\r\n            moduleSetupContract,\r\n            moduleSetupData\r\n        );\r\n        address initialAuthorizationModule;\r\n\r\n        if (initializer.length > 0) {\r\n            assembly {\r\n                let success := call(\r\n                    gas(),\r\n                    proxy,\r\n                    0,\r\n                    add(initializer, 0x20),\r\n                    mload(initializer),\r\n                    0,\r\n                    0\r\n                )\r\n                let ptr := mload(0x40)\r\n                returndatacopy(ptr, 0, returndatasize())\r\n                if iszero(success) {\r\n                    revert(ptr, returndatasize())\r\n                }\r\n                initialAuthorizationModule := mload(ptr)\r\n            }\r\n        }\r\n        emit AccountCreationWithoutIndex(proxy, initialAuthorizationModule);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to retrieve the creation code used for the Proxy deployment.\r\n     * @return The creation code for the Proxy.\r\n     */\r\n    function accountCreationCode() public pure returns (bytes memory) {\r\n        return type(Proxy).creationCode;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to retrieve the initializer data for the account.\r\n     * @param moduleSetupContract Initializes the auth module; can be a factory or registry for multiple accounts.\r\n     * @param moduleSetupData modules setup data (a standard calldata for the module setup contract)\r\n     * @return initializer bytes for init method\r\n     */\r\n    function _getInitializer(\r\n        address moduleSetupContract,\r\n        bytes calldata moduleSetupData\r\n    ) internal view returns (bytes memory) {\r\n        return\r\n            abi.encodeCall(\r\n                BaseSmartAccount.init,\r\n                (address(minimalHandler), moduleSetupContract, moduleSetupData)\r\n            );\r\n    }\r\n}\r\n"
    },
    "contracts/handler/DefaultCallbackHandler.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity 0.8.17;\r\n\r\n/* solhint-disable no-empty-blocks */\r\n\r\nimport {IERC1155TokenReceiver} from \"../interfaces/IERC1155TokenReceiver.sol\";\r\nimport {IERC721TokenReceiver} from \"../interfaces/IERC721TokenReceiver.sol\";\r\nimport {IERC777TokensRecipient} from \"../interfaces/IERC777TokensRecipient.sol\";\r\nimport {IERC165} from \"../interfaces/IERC165.sol\";\r\n\r\n/** @title Default Callback Handler - returns true for known token callbacks\r\n *   @dev Handles EIP-1271 compliant isValidSignature requests.\r\n *  @notice inspired by Richard Meissner's <richard@gnosis.pm> implementation\r\n */\r\ncontract DefaultCallbackHandler is\r\n    IERC1155TokenReceiver,\r\n    IERC777TokensRecipient,\r\n    IERC721TokenReceiver,\r\n    IERC165\r\n{\r\n    string public constant NAME = \"Default Callback Handler\";\r\n    string public constant VERSION = \"1.0.0\";\r\n\r\n    function supportsInterface(\r\n        bytes4 interfaceId\r\n    ) external view virtual override returns (bool) {\r\n        return\r\n            interfaceId == type(IERC1155TokenReceiver).interfaceId ||\r\n            interfaceId == type(IERC721TokenReceiver).interfaceId ||\r\n            interfaceId == type(IERC777TokensRecipient).interfaceId ||\r\n            interfaceId == type(IERC165).interfaceId;\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes calldata\r\n    ) external pure override returns (bytes4) {\r\n        return IERC1155TokenReceiver.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] calldata,\r\n        uint256[] calldata,\r\n        bytes calldata\r\n    ) external pure override returns (bytes4) {\r\n        return IERC1155TokenReceiver.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes calldata\r\n    ) external pure override returns (bytes4) {\r\n        return IERC721TokenReceiver.onERC721Received.selector;\r\n    }\r\n\r\n    function tokensReceived(\r\n        address,\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes calldata,\r\n        bytes calldata\r\n    ) external pure override {\r\n        // We implement this for completeness, doesn't really have any value\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IAuthorizationModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\nimport {UserOperation} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\r\n\r\n// interface for modules to verify singatures signed over userOpHash\r\ninterface IAuthorizationModule {\r\n    function validateUserOp(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash\r\n    ) external returns (uint256 validationData);\r\n}\r\n"
    },
    "contracts/interfaces/IERC1155TokenReceiver.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n    Note: The ERC-165 identifier for this interface is 0x4e2312e0.\r\n*/\r\ninterface IERC1155TokenReceiver {\r\n    /**\r\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\r\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\r\n     *\r\n     * NOTE: To accept the transfer, this must return\r\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     * (i.e. 0xf23a6e61, or its own function selector).\r\n     *\r\n     * @param _operator The address which initiated the transfer (i.e. msg.sender)\r\n     * @param _from The address which previously owned the token\r\n     * @param _id The ID of the token being transferred\r\n     * @param _value The amount of tokens being transferred\r\n     * @param _data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155Received(\r\n        address _operator,\r\n        address _from,\r\n        uint256 _id,\r\n        uint256 _value,\r\n        bytes calldata _data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\r\n     * been updated.\r\n     *\r\n     * NOTE: To accept the transfer(s), this must return\r\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     * (i.e. 0xbc197c81, or its own function selector).\r\n     *\r\n     * @param _operator The address which initiated the batch transfer (i.e. msg.sender)\r\n     * @param _from The address which previously owned the token\r\n     * @param _ids An array containing ids of each token being transferred (order and length must match values array)\r\n     * @param _values An array containing amounts of each token transferred (order and length must match ids array)\r\n     * @param _data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if allowed\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address _operator,\r\n        address _from,\r\n        uint256[] calldata _ids,\r\n        uint256[] calldata _values,\r\n        bytes calldata _data\r\n    ) external returns (bytes4);\r\n}\r\n"
    },
    "contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n"
    },
    "contracts/interfaces/IERC721TokenReceiver.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity 0.8.17;\r\n\r\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\r\ninterface IERC721TokenReceiver {\r\n    /// @notice Handle the receipt of an NFT\r\n    /// @dev The ERC721 smart contract calls this function on the recipient\r\n    ///  after a `transfer`. This function MAY throw to revert and reject the\r\n    ///  transfer. Return of other than the magic value MUST result in the\r\n    ///  transaction being reverted.\r\n    ///  Note: the contract address is always the message sender.\r\n    /// @param _operator The address which called `safeTransferFrom` function\r\n    /// @param _from The address which previously owned the token\r\n    /// @param _tokenId The NFT identifier which is being transferred\r\n    /// @param _data Additional data with no specified format\r\n    /// @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    ///  unless throwing\r\n    function onERC721Received(\r\n        address _operator,\r\n        address _from,\r\n        uint256 _tokenId,\r\n        bytes calldata _data\r\n    ) external returns (bytes4);\r\n}\r\n"
    },
    "contracts/interfaces/IERC777TokensRecipient.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity 0.8.17;\r\n\r\ninterface IERC777TokensRecipient {\r\n    function tokensReceived(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    ) external;\r\n}\r\n"
    },
    "contracts/interfaces/ISessionKeyManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface ISessionKeyManager {\r\n    /**\r\n     * @dev validates that Session Key + parameters are enabled\r\n     * by being included into the merkle tree\r\n     * @param userOpSender smartAccount for which session key is being validated\r\n     * @param validUntil timestamp when the session key expires\r\n     * @param validAfter timestamp when the session key becomes valid\r\n     * @param sessionValidationModule address of the Session Validation Module\r\n     * @param sessionKeyData session parameters (limitations/permissions)\r\n     * @param merkleProof merkle proof for the leaf which represents this session key + params\r\n     * @dev if doesn't revert, session key is considered valid\r\n     */\r\n    function validateSessionKey(\r\n        address userOpSender,\r\n        uint48 validUntil,\r\n        uint48 validAfter,\r\n        address sessionValidationModule,\r\n        bytes calldata sessionKeyData,\r\n        bytes32[] calldata merkleProof\r\n    ) external;\r\n}\r\n"
    },
    "contracts/interfaces/ISignatureValidator.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity 0.8.17;\r\n\r\ncontract ISignatureValidatorConstants {\r\n    // bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")\r\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x1626ba7e;\r\n}\r\n\r\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\r\n    /**\r\n     * @dev Should return whether the signature provided is valid for the provided data\r\n     * @param _dataHash Arbitrary length data signed on behalf of address(this)\r\n     * @param _signature Signature byte array associated with _data\r\n     *\r\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\r\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\r\n     * MUST allow external calls\r\n     */\r\n    function isValidSignature(\r\n        bytes32 _dataHash,\r\n        bytes memory _signature\r\n    ) public view virtual returns (bytes4);\r\n}\r\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.17;\r\n\r\ninterface IWETH {\r\n    function withdraw(uint256 wad) external;\r\n}"
    },
    "contracts/libs/LibAddress.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nlibrary LibAddress {\r\n    /**\r\n     * @notice Will return true if provided address is a contract\r\n     * @param account Address to verify if contract or not\r\n     * @dev This contract will return false if called within the constructor of\r\n     *      a contract's deployment, as the code is not yet stored on-chain.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 csize;\r\n\r\n        assembly {\r\n            csize := extcodesize(account)\r\n        }\r\n        return csize != 0;\r\n    }\r\n}\r\n"
    },
    "contracts/libs/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\r\n\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\r\n                // The surrounding unchecked block does not change this fact.\r\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1, \"Math: mulDiv overflow\");\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(\r\n        uint256 a,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return\r\n                result +\r\n                (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(\r\n        uint256 value,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return\r\n                result +\r\n                (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10 ** 64) {\r\n                value /= 10 ** 64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10 ** 32) {\r\n                value /= 10 ** 32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10 ** 16) {\r\n                value /= 10 ** 16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10 ** 8) {\r\n                value /= 10 ** 8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10 ** 4) {\r\n                value /= 10 ** 4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10 ** 2) {\r\n                value /= 10 ** 2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10 ** 1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(\r\n        uint256 value,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return\r\n                result +\r\n                (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(\r\n        uint256 value,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return\r\n                result +\r\n                (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/libs/MultiSend.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity 0.8.17;\r\n\r\n/// @title Multi Send - Allows to batch multiple transactions into one.\r\n/// @author Nick Dodson - <nick.dodson@consensys.net>\r\n/// @author Gonçalo Sá - <goncalo.sa@consensys.net>\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract MultiSend {\r\n    address private immutable _multisendSingleton;\r\n\r\n    constructor() {\r\n        _multisendSingleton = address(this);\r\n    }\r\n\r\n    /// @dev Sends multiple transactions and reverts all if one fails.\r\n    /// @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\r\n    ///                     operation as a uint8 with 0 for a call or 1 for a delegatecall (=> 1 byte),\r\n    ///                     to as a address (=> 20 bytes),\r\n    ///                     value as a uint256 (=> 32 bytes),\r\n    ///                     data length as a uint256 (=> 32 bytes),\r\n    ///                     data as bytes.\r\n    ///                     see abi.encodePacked for more information on packed encoding\r\n    /// @notice This method is payable as delegatecalls keep the msg.value from the previous call\r\n    ///         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\r\n    function multiSend(bytes memory transactions) external {\r\n        require(\r\n            address(this) != _multisendSingleton,\r\n            \"should be called via delegatecall\"\r\n        );\r\n\r\n        assembly {\r\n            let length := mload(transactions)\r\n            let i := 0x20\r\n            for {\r\n                // Pre block is not used in \"while mode\"\r\n            } lt(i, length) {\r\n                // Post block is not used in \"while mode\"\r\n            } {\r\n                // First byte of the data is the operation.\r\n                // We shift by 248 bits (256 - 8 [operation byte]) it right since mload will always load 32 bytes (a word).\r\n                // This will also zero out unused data.\r\n                let operation := shr(0xf8, mload(add(transactions, i)))\r\n                // We offset the load address by 1 byte (operation byte)\r\n                // We shift it right by 96 bits (256 - 160 [20 address bytes]) to right-align the data and zero out unused data.\r\n                let to := shr(0x60, mload(add(transactions, add(i, 0x01))))\r\n                // We offset the load address by 21 byte (operation byte + 20 address bytes)\r\n                let value := mload(add(transactions, add(i, 0x15)))\r\n                // We offset the load address by 53 byte (operation byte + 20 address bytes + 32 value bytes)\r\n                let dataLength := mload(add(transactions, add(i, 0x35)))\r\n                // We offset the load address by 85 byte (operation byte + 20 address bytes + 32 value bytes + 32 data length bytes)\r\n                let data := add(transactions, add(i, 0x55))\r\n                let success := 0\r\n                switch operation\r\n                case 0 {\r\n                    success := call(gas(), to, value, data, dataLength, 0, 0)\r\n                }\r\n                case 1 {\r\n                    success := delegatecall(gas(), to, data, dataLength, 0, 0)\r\n                }\r\n                if eq(success, 0) {\r\n                    revert(0, 0)\r\n                }\r\n                // Next entry starts at 85 byte + data length\r\n                i := add(i, add(0x55, dataLength))\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/libs/MultiSendCallOnly.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity 0.8.17;\r\n\r\n/// @title Multi Send Call Only - Allows to batch multiple transactions into one, but only calls\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\n/// @notice The guard logic is not required here as this contract doesn't support nested delegate calls\r\ncontract MultiSendCallOnly {\r\n    /// @dev Sends multiple transactions and reverts all if one fails.\r\n    /// @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\r\n    ///                     operation has to be uint8(0) in this version (=> 1 byte),\r\n    ///                     to as a address (=> 20 bytes),\r\n    ///                     value as a uint256 (=> 32 bytes),\r\n    ///                     data length as a uint256 (=> 32 bytes),\r\n    ///                     data as bytes.\r\n    ///                     see abi.encodePacked for more information on packed encoding\r\n    /// @notice The code is for most part the same as the normal MultiSend (to keep compatibility),\r\n    ///         but reverts if a transaction tries to use a delegatecall.\r\n    /// @notice This method is payable as delegatecalls keep the msg.value from the previous call\r\n    ///         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\r\n    function multiSend(bytes memory transactions) external {\r\n        assembly {\r\n            let length := mload(transactions)\r\n            let i := 0x20\r\n            for {\r\n                // Pre block is not used in \"while mode\"\r\n            } lt(i, length) {\r\n                // Post block is not used in \"while mode\"\r\n            } {\r\n                // First byte of the data is the operation.\r\n                // We shift by 248 bits (256 - 8 [operation byte]) it right since mload will always load 32 bytes (a word).\r\n                // This will also zero out unused data.\r\n                let operation := shr(0xf8, mload(add(transactions, i)))\r\n                // We offset the load address by 1 byte (operation byte)\r\n                // We shift it right by 96 bits (256 - 160 [20 address bytes]) to right-align the data and zero out unused data.\r\n                let to := shr(0x60, mload(add(transactions, add(i, 0x01))))\r\n                // We offset the load address by 21 byte (operation byte + 20 address bytes)\r\n                let value := mload(add(transactions, add(i, 0x15)))\r\n                // We offset the load address by 53 byte (operation byte + 20 address bytes + 32 value bytes)\r\n                let dataLength := mload(add(transactions, add(i, 0x35)))\r\n                // We offset the load address by 85 byte (operation byte + 20 address bytes + 32 value bytes + 32 data length bytes)\r\n                let data := add(transactions, add(i, 0x55))\r\n                let success := 0\r\n                switch operation\r\n                case 0 {\r\n                    success := call(gas(), to, value, data, dataLength, 0, 0)\r\n                }\r\n                // This version does not allow delegatecalls\r\n                case 1 {\r\n                    revert(0, 0)\r\n                }\r\n                if eq(success, 0) {\r\n                    revert(0, 0)\r\n                }\r\n                // Next entry starts at 85 byte + data length\r\n                i := add(i, add(0x55, dataLength))\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/libs/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"./Math.sol\";\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(\r\n        uint256 value,\r\n        uint256 length\r\n    ) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n"
    },
    "contracts/modules/BaseAuthorizationModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n/* solhint-disable no-empty-blocks */\r\n\r\nimport {IAuthorizationModule} from \"../interfaces/IAuthorizationModule.sol\";\r\nimport {ISignatureValidator} from \"../interfaces/ISignatureValidator.sol\";\r\n\r\ncontract AuthorizationModulesConstants {\r\n    uint256 internal constant VALIDATION_SUCCESS = 0;\r\n    uint256 internal constant SIG_VALIDATION_FAILED = 1;\r\n}\r\n\r\nabstract contract BaseAuthorizationModule is\r\n    IAuthorizationModule,\r\n    ISignatureValidator,\r\n    AuthorizationModulesConstants\r\n{}\r\n"
    },
    "contracts/modules/EcdsaOwnershipRegistryModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport {BaseAuthorizationModule} from \"./BaseAuthorizationModule.sol\";\r\nimport {UserOperation} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\r\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\n\r\n/**\r\n * @title ECDSA ownership Authorization module for Biconomy Smart Accounts.\r\n * @dev Compatible with Biconomy Modular Interface v 0.1\r\n *         - It allows to validate user operations signed by EOA private key.\r\n *         - EIP-1271 compatible (ensures Smart Account can validate signed messages).\r\n *         - One owner per Smart Account.\r\n *         - Does not support outdated eth_sign flow for cheaper validations\r\n *         (see https://support.metamask.io/hc/en-us/articles/14764161421467-What-is-eth-sign-and-why-is-it-a-risk-)\r\n * !!!!!!! Only EOA owners supported, no Smart Account Owners\r\n *         For Smart Contract Owners check SmartContractOwnership module instead\r\n * @author Fil Makarov - <filipp.makarov@biconomy.io>\r\n */\r\n\r\ncontract EcdsaOwnershipRegistryModule is BaseAuthorizationModule {\r\n    using ECDSA for bytes32;\r\n\r\n    string public constant NAME = \"ECDSA Ownership Registry Module\";\r\n    string public constant VERSION = \"0.2.0\";\r\n    mapping(address => address) internal _smartAccountOwners;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed smartAccount,\r\n        address indexed oldOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    error NoOwnerRegisteredForSmartAccount(address smartAccount);\r\n    error AlreadyInitedForSmartAccount(address smartAccount);\r\n    error WrongSignatureLength();\r\n    error NotEOA(address account);\r\n    error ZeroAddressNotAllowedAsOwner();\r\n\r\n    /**\r\n     * @dev Initializes the module for a Smart Account.\r\n     * Should be used at a time of first enabling the module for a Smart Account.\r\n     * @param eoaOwner The owner of the Smart Account. Should be EOA!\r\n     */\r\n    function initForSmartAccount(address eoaOwner) external returns (address) {\r\n        if (_smartAccountOwners[msg.sender] != address(0))\r\n            revert AlreadyInitedForSmartAccount(msg.sender);\r\n        if (eoaOwner == address(0)) revert ZeroAddressNotAllowedAsOwner();\r\n        _smartAccountOwners[msg.sender] = eoaOwner;\r\n        return address(this);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets/changes an for a Smart Account.\r\n     * Should be called by Smart Account itself.\r\n     * @param owner The owner of the Smart Account.\r\n     */\r\n    function transferOwnership(address owner) external {\r\n        if (_isSmartContract(owner)) revert NotEOA(owner);\r\n        if (owner == address(0)) revert ZeroAddressNotAllowedAsOwner();\r\n        _transferOwnership(msg.sender, owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Renounces ownership\r\n     * should be called by Smart Account.\r\n     */\r\n    function renounceOwnership() external {\r\n        _transferOwnership(msg.sender, address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the owner of the Smart Account. Reverts for Smart Accounts without owners.\r\n     * @param smartAccount Smart Account address.\r\n     * @return owner The owner of the Smart Account.\r\n     */\r\n    function getOwner(address smartAccount) external view returns (address) {\r\n        address owner = _smartAccountOwners[smartAccount];\r\n        if (owner == address(0))\r\n            revert NoOwnerRegisteredForSmartAccount(smartAccount);\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev validates userOperation\r\n     * @param userOp User Operation to be validated.\r\n     * @param userOpHash Hash of the User Operation to be validated.\r\n     * @return sigValidationResult 0 if signature is valid, SIG_VALIDATION_FAILED otherwise.\r\n     */\r\n    function validateUserOp(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash\r\n    ) external view virtual returns (uint256) {\r\n        (bytes memory cleanEcdsaSignature, ) = abi.decode(\r\n            userOp.signature,\r\n            (bytes, address)\r\n        );\r\n        if (_verifySignature(userOpHash, cleanEcdsaSignature, userOp.sender)) {\r\n            return VALIDATION_SUCCESS;\r\n        }\r\n        return SIG_VALIDATION_FAILED;\r\n    }\r\n\r\n    /**\r\n     * @dev Validates a signature for a message.\r\n     * To be called from a Smart Account.\r\n     * @param dataHash Exact hash of the data that was signed.\r\n     * @param moduleSignature Signature to be validated.\r\n     * @return EIP1271_MAGIC_VALUE if signature is valid, 0xffffffff otherwise.\r\n     */\r\n    function isValidSignature(\r\n        bytes32 dataHash,\r\n        bytes memory moduleSignature\r\n    ) public view virtual override returns (bytes4) {\r\n        return\r\n            isValidSignatureForAddress(dataHash, moduleSignature, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Validates a signature for a message signed by address.\r\n     * @dev Also try dataHash.toEthSignedMessageHash()\r\n     * @param dataHash hash of the data\r\n     * @param moduleSignature Signature to be validated.\r\n     * @param smartAccount expected signer Smart Account address.\r\n     * @return EIP1271_MAGIC_VALUE if signature is valid, 0xffffffff otherwise.\r\n     */\r\n    function isValidSignatureForAddress(\r\n        bytes32 dataHash,\r\n        bytes memory moduleSignature,\r\n        address smartAccount\r\n    ) public view virtual returns (bytes4) {\r\n        if (_verifySignature(dataHash, moduleSignature, smartAccount)) {\r\n            return EIP1271_MAGIC_VALUE;\r\n        }\r\n        return bytes4(0xffffffff);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership for smartAccount and emits an event\r\n     * @param newOwner Smart Account address.\r\n     */\r\n    function _transferOwnership(\r\n        address smartAccount,\r\n        address newOwner\r\n    ) internal {\r\n        address _oldOwner = _smartAccountOwners[smartAccount];\r\n        _smartAccountOwners[smartAccount] = newOwner;\r\n        emit OwnershipTransferred(smartAccount, _oldOwner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Validates a signature for a message.\r\n     * @dev Check if signature was made over dataHash.toEthSignedMessageHash() or just dataHash\r\n     * The former is for personal_sign, the latter for the typed_data sign\r\n     * Only EOA owners supported, no Smart Account Owners\r\n     * For Smart Contract Owners check SmartContractOwnership Module instead\r\n     * @param dataHash Hash of the data to be validated.\r\n     * @param signature Signature to be validated.\r\n     * @param smartAccount expected signer Smart Account address.\r\n     * @return true if signature is valid, false otherwise.\r\n     */\r\n    function _verifySignature(\r\n        bytes32 dataHash,\r\n        bytes memory signature,\r\n        address smartAccount\r\n    ) internal view returns (bool) {\r\n        address expectedSigner = _smartAccountOwners[smartAccount];\r\n        if (expectedSigner == address(0))\r\n            revert NoOwnerRegisteredForSmartAccount(smartAccount);\r\n        if (signature.length < 65) revert WrongSignatureLength();\r\n        address recovered = (dataHash.toEthSignedMessageHash()).recover(\r\n            signature\r\n        );\r\n        if (expectedSigner == recovered) {\r\n            return true;\r\n        }\r\n        recovered = dataHash.recover(signature);\r\n        if (expectedSigner == recovered) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the address provided is a smart contract.\r\n     * @param account Address to be checked.\r\n     */\r\n    function _isSmartContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n"
    },
    "contracts/modules/Exotic/EcdsaEthSignSupportOwnershipRegistryModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport {BaseAuthorizationModule} from \"../BaseAuthorizationModule.sol\";\r\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport {UserOperation} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\r\n\r\n/**\r\n * @title ECDSA ownership Authorization module for Biconomy Smart Accounts.\r\n * @dev Compatible with Biconomy Modular Interface v 0.1\r\n *         - It allows to validate user operations signed by EOA private key.\r\n *         - EIP-1271 compatible (ensures Smart Account can validate signed messages).\r\n *         - One owner per Smart Account.\r\n *         - Supports eth_sign flow\r\n * !!!!!!! Only EOA owners supported, no Smart Account Owners\r\n *         For Smart Contract Owners check SmartContractOwnership module instead\r\n * @author Fil Makarov - <filipp.makarov@biconomy.io>\r\n */\r\n\r\ncontract EcdsaWithEthSignSupportOwnershipRegistryModule is\r\n    BaseAuthorizationModule\r\n{\r\n    using ECDSA for bytes32;\r\n\r\n    string public constant NAME = \"ECDSA Ownership Registry Module\";\r\n    string public constant VERSION = \"0.1.0\";\r\n    mapping(address => address) public smartAccountOwners;\r\n\r\n    error NoOwnerRegisteredForSmartAccount(address smartAccount);\r\n    error AlreadyInitedForSmartAccount(address smartAccount);\r\n    error WrongSignatureLength();\r\n    error NotEOA(address account);\r\n\r\n    /**\r\n     * @dev Initializes the module for a Smart Account.\r\n     * Should be used at a time of first enabling the module for a Smart Account.\r\n     * @param owner The owner of the Smart Account.\r\n     */\r\n    function initForSmartAccount(address owner) external returns (address) {\r\n        if (_isSmartAccount(owner)) revert NotEOA(owner);\r\n        if (smartAccountOwners[msg.sender] != address(0))\r\n            revert AlreadyInitedForSmartAccount(msg.sender);\r\n        smartAccountOwners[msg.sender] = owner;\r\n        return address(this);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets/changes an for a Smart Account.\r\n     * Should be called by Smart Account itself.\r\n     * @param owner The owner of the Smart Account.\r\n     */\r\n    function setOwner(address owner) external {\r\n        if (_isSmartAccount(owner)) revert NotEOA(owner);\r\n        smartAccountOwners[msg.sender] = owner;\r\n    }\r\n\r\n    /**\r\n     * @dev validates userOperation\r\n     * @param userOp User Operation to be validated.\r\n     * @param userOpHash Hash of the User Operation to be validated.\r\n     * @return sigValidationResult 0 if signature is valid, SIG_VALIDATION_FAILED otherwise.\r\n     */\r\n    function validateUserOp(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash\r\n    ) external view virtual returns (uint256) {\r\n        (bytes memory moduleSignature, ) = abi.decode(\r\n            userOp.signature,\r\n            (bytes, address)\r\n        );\r\n        // validateUserOp gets from EP a hash not prepended with 'x\\x19Ethereum Signed Message:\\n32'\r\n        // so we have to do it manually, as on the user side it is signed with personal_sign\r\n        // that prepends with \"\\x19Ethereum Signed Message\\n32\"\r\n        if (\r\n            _verifySignature(\r\n                userOpHash.toEthSignedMessageHash(),\r\n                moduleSignature,\r\n                userOp.sender\r\n            )\r\n        ) {\r\n            return 0;\r\n        }\r\n        return SIG_VALIDATION_FAILED;\r\n    }\r\n\r\n    /**\r\n     * @dev Validates a signature for a message.\r\n     * To be called from a Smart Account.\r\n     * @param dataHash Exact hash of the data that was signed.\r\n     * @param moduleSignature Signature to be validated.\r\n     * @return EIP1271_MAGIC_VALUE if signature is valid, 0xffffffff otherwise.\r\n     */\r\n    function isValidSignature(\r\n        bytes32 dataHash,\r\n        bytes memory moduleSignature\r\n    ) public view virtual override returns (bytes4) {\r\n        return\r\n            isValidSignatureForAddress(dataHash, moduleSignature, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Validates a signature for a message signed by address.\r\n     * @param dataHash Exact hash of the data that was signed.\r\n     * @param moduleSignature Signature to be validated.\r\n     * @param smartAccount expected signer Smart Account address.\r\n     * @return EIP1271_MAGIC_VALUE if signature is valid, 0xffffffff otherwise.\r\n     */\r\n    function isValidSignatureForAddress(\r\n        bytes32 dataHash,\r\n        bytes memory moduleSignature,\r\n        address smartAccount\r\n    ) public view virtual returns (bytes4) {\r\n        if (_verifySignature(dataHash, moduleSignature, smartAccount)) {\r\n            return EIP1271_MAGIC_VALUE;\r\n        }\r\n        return bytes4(0xffffffff);\r\n    }\r\n\r\n    /**\r\n     * @dev Validates a signature for a message.\r\n     * Only EOA owners supported, no Smart Account Owners\r\n     * For Smart Contrac Owners check SmartContractOwnership module instead\r\n     * @param dataHash Hash of the data to be validated.\r\n     * @param signature Signature to be validated.\r\n     * @param smartAccount expected signer Smart Account address.\r\n     * @return true if signature is valid, false otherwise.\r\n     */\r\n    function _verifySignature(\r\n        bytes32 dataHash,\r\n        bytes memory signature,\r\n        address smartAccount\r\n    ) internal view returns (bool) {\r\n        address expectedSigner = smartAccountOwners[smartAccount];\r\n        if (expectedSigner == address(0))\r\n            revert NoOwnerRegisteredForSmartAccount(smartAccount);\r\n        if (signature.length < 65) revert WrongSignatureLength();\r\n        (uint8 v, bytes32 r, bytes32 s) = _signatureSplit(signature);\r\n        if (v > 30) {\r\n            //eth_sign flow\r\n            (address _signer, ) = dataHash.toEthSignedMessageHash().tryRecover(\r\n                v - 4,\r\n                r,\r\n                s\r\n            );\r\n            return expectedSigner == _signer;\r\n        } else {\r\n            return expectedSigner == dataHash.recover(signature);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the address provided is a smart contract.\r\n     * @param account Address to be checked.\r\n     */\r\n    function _isSmartAccount(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function _signatureSplit(\r\n        bytes memory signature\r\n    ) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\r\n        // The signature format is a compact form of:\r\n        //   {bytes32 r}{bytes32 s}{uint8 v}\r\n        // Compact means, uint8 is not padded to 32 bytes.\r\n\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            // Here we are loading the last 32 bytes, including 31 bytes\r\n            // of 's'. There is no 'mload8' to do this.\r\n            //\r\n            // 'byte' is not working due to the Solidity parser, so let's\r\n            // use the second best option, 'and'\r\n            v := and(mload(add(signature, 0x41)), 0xff)\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/modules/ForwardFlowModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport {ISignatureValidator, ISignatureValidatorConstants} from \"../interfaces/ISignatureValidator.sol\";\r\nimport {Enum} from \"../common/Enum.sol\";\r\nimport {ReentrancyGuard} from \"../common/ReentrancyGuard.sol\";\r\nimport {Math} from \"../libs/Math.sol\";\r\n\r\nstruct Transaction {\r\n    address to;\r\n    Enum.Operation operation;\r\n    uint256 value;\r\n    bytes data;\r\n    uint256 targetTxGas;\r\n}\r\n\r\nstruct FeeRefund {\r\n    uint256 baseGas;\r\n    uint256 gasPrice; //gasPrice or tokenGasPrice\r\n    uint256 tokenGasPriceFactor;\r\n    address gasToken;\r\n    address payable refundReceiver;\r\n}\r\n\r\n/**\r\n * @notice Throws when the address that signed the data (restored from signature)\r\n * differs from the address we expected to sign the data (i.e. some authorized address)\r\n */\r\nerror InvalidSignature();\r\n\r\n/**\r\n * @notice Throws if not enough gas is left at some point\r\n * @param gasLeft how much gas left at the moment of a check\r\n * @param gasRequired how much gas required to proceed\r\n */\r\nerror NotEnoughGasLeft(uint256 gasLeft, uint256 gasRequired);\r\n\r\n/**\r\n * @notice Throws if not able to estimate gas\r\n * It can be when amount of gas and its price are both zero and at the same time\r\n * transaction has failed to be executed\r\n * @param targetTxGas gas required for target transaction\r\n * @param gasPrice gas price passed in Refund Info\r\n * @param success whether transaction has been executed successfully or not\r\n */\r\nerror CanNotEstimateGas(uint256 targetTxGas, uint256 gasPrice, bool success);\r\n\r\n/**\r\n * @notice Throws if transfer of tokens failed\r\n * @param token token contract address\r\n * @param dest token transfer receiver\r\n * @param amount the amount of tokens in a failed transfer\r\n */\r\nerror TokenTransferFailed(address token, address dest, uint256 amount);\r\n\r\n/**\r\n * @notice Thrown when trying to use 0 as tokenGasPriceFactor\r\n */\r\nerror TokenGasPriceFactorCanNotBeZero();\r\n\r\n/**\r\n * @notice Throws when the transaction execution fails\r\n */\r\nerror ExecutionFailed();\r\n\r\ninterface IExecFromModule {\r\n    function execTransactionFromModule(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation,\r\n        uint256 txGas\r\n    ) external returns (bool success);\r\n\r\n    function execTransactionFromModule(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation\r\n    ) external returns (bool success);\r\n}\r\n\r\ncontract ForwardFlowModule is ReentrancyGuard, ISignatureValidatorConstants {\r\n    // Domain Seperators keccak256(\"EIP712Domain(uint256 chainId,address verifyingContract)\");\r\n    bytes32 internal constant DOMAIN_SEPARATOR_TYPEHASH =\r\n        0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\r\n\r\n    // solhint-disable-next-line\r\n    // keccak256(\"AccountTx(address to,uint256 value,bytes data,uint8 operation,uint256 targetTxGas,uint256 baseGas,uint256 gasPrice,uint256 tokenGasPriceFactor,address gasToken,address refundReceiver,uint256 nonce)\");\r\n    bytes32 internal constant ACCOUNT_TX_TYPEHASH =\r\n        0xda033865d68bf4a40a5a7cb4159a99e33dba8569e65ea3e38222eb12d9e66eee;\r\n\r\n    uint256 private immutable CHAIN_ID;\r\n\r\n    mapping(uint256 => uint256) public nonces;\r\n\r\n    event AccountHandlePayment(bytes32 indexed txHash, uint256 indexed payment);\r\n\r\n    constructor() {\r\n        CHAIN_ID = block.chainid;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to estimate a transaction.\r\n     * @notice This method is for estimation only, it will always revert and encode the result in the revert data.\r\n     * @notice Call this method to get an estimate of the handlePayment costs that are deducted with `execTransaction`\r\n     * @param gasUsed Gas used by the transaction.\r\n     * @param baseGas Gas costs that are independent of the transaction execution\r\n     * (e.g. base transaction fee, signature check, payment of the refund, emitted events).\r\n     * @param gasPrice Gas price / TokenGasPrice (gas price in the context of token using offchain price feeds)\r\n     * that should be used for the payment calculation.\r\n     * @param tokenGasPriceFactor factor by which calculated token gas price is already multiplied.\r\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\r\n     * @return requiredGas Estimate of refunds\r\n     */\r\n    function handlePaymentRevert(\r\n        address smartAccount,\r\n        uint256 gasUsed,\r\n        uint256 baseGas,\r\n        uint256 gasPrice,\r\n        uint256 tokenGasPriceFactor,\r\n        address gasToken,\r\n        address payable refundReceiver\r\n    ) external returns (uint256 requiredGas) {\r\n        require(tokenGasPriceFactor != 0, \"invalid tokenGasPriceFactor\");\r\n        uint256 startGas = gasleft();\r\n        // solhint-disable-next-line avoid-tx-origin\r\n        address payable receiver = refundReceiver == address(0)\r\n            ? payable(tx.origin)\r\n            : refundReceiver;\r\n        if (gasToken == address(0)) {\r\n            // For ETH we will only adjust the gas price to not be higher than the actual used gas price\r\n            uint256 payment = (gasUsed + baseGas) *\r\n                (gasPrice < tx.gasprice ? gasPrice : tx.gasprice);\r\n            if (\r\n                !IExecFromModule(smartAccount).execTransactionFromModule(\r\n                    receiver,\r\n                    payment,\r\n                    \"0x\",\r\n                    Enum.Operation.Call,\r\n                    0\r\n                )\r\n            ) {\r\n                revert TokenTransferFailed(address(0), receiver, payment);\r\n            }\r\n        } else {\r\n            uint256 payment = ((gasUsed + baseGas) * (gasPrice)) /\r\n                (tokenGasPriceFactor);\r\n            if (\r\n                !IExecFromModule(smartAccount).execTransactionFromModule(\r\n                    gasToken,\r\n                    0,\r\n                    abi.encodeWithSignature(\r\n                        \"transfer(address,uint256)\",\r\n                        receiver,\r\n                        payment\r\n                    ),\r\n                    Enum.Operation.Call,\r\n                    0\r\n                )\r\n            ) {\r\n                revert TokenTransferFailed(gasToken, receiver, payment);\r\n            }\r\n        }\r\n        unchecked {\r\n            requiredGas = startGas - gasleft();\r\n        }\r\n        revert(string(abi.encodePacked(requiredGas)));\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to estimate a transaction.\r\n     * This method is for estimation only, it will always revert and encode the result in the revert data.\r\n     * Call this method to get an estimate of the handlePayment costs that are deducted with `execTransaction`\r\n     * @param to Destination address of the transaction.\r\n     * @param value Ether value of transaction.\r\n     * @param data Data payload of transaction.\r\n     * @param operation Operation type of transaction.\r\n     * @return Estimate without refunds and overhead fees (base transaction and payload data gas costs).\r\n     */\r\n    function requiredTxGas(\r\n        address smartAccount,\r\n        address to,\r\n        uint256 value,\r\n        bytes calldata data,\r\n        Enum.Operation operation\r\n    ) external returns (uint256) {\r\n        uint256 startGas = gasleft();\r\n        // We don't provide an error message here, as we use it to return the estimate\r\n        if (\r\n            !IExecFromModule(smartAccount).execTransactionFromModule(\r\n                to,\r\n                value,\r\n                data,\r\n                operation\r\n            )\r\n        ) revert ExecutionFailed();\r\n        // Convert response to string and return via error message\r\n        unchecked {\r\n            revert(string(abi.encodePacked(startGas - gasleft())));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Safe (ex-Gnosis) style transaction with optional repay in native tokens or ERC20\r\n     * @dev Execute a transaction confirmed by required signature/s and then pays the account that submitted it.\r\n     * @dev Function name optimized to have hash started with zeros to make this function calls cheaper\r\n     * @notice The fees are always transferred, even if the user transaction fails.\r\n     * @param _tx Smart Account transaction\r\n     * @param refundInfo Required information for gas refunds\r\n     * @param signatures Packed signature/s data ({bytes32 r}{bytes32 s}{uint8 v})\r\n     *                   Should be a signature over Typed Data Hash\r\n     *                   Use eth_signTypedData, not a personal_sign\r\n     */\r\n\r\n    function execTransaction(\r\n        address smartAccount,\r\n        Transaction memory _tx,\r\n        FeeRefund memory refundInfo,\r\n        bytes memory signatures\r\n    ) public payable virtual nonReentrant returns (bool success) {\r\n        uint256 startGas = gasleft();\r\n        bytes32 txHash;\r\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\r\n        {\r\n            bytes memory txHashData = encodeTransactionData(\r\n                // Smart Account to execute Transaction\r\n                smartAccount,\r\n                // Transaction info\r\n                _tx,\r\n                // Payment info\r\n                refundInfo,\r\n                // Signature info\r\n                nonces[1]++\r\n            );\r\n\r\n            txHash = keccak256(txHashData);\r\n            if (\r\n                ISignatureValidator(smartAccount).isValidSignature(\r\n                    txHash,\r\n                    signatures\r\n                ) != EIP1271_MAGIC_VALUE\r\n            ) {\r\n                revert InvalidSignature();\r\n            }\r\n        }\r\n\r\n        // We require some gas to emit the events (at least 2500) after the execution and some to\r\n        // perform code until the execution (7500 = call the external function + checks inside it)\r\n        // We also include the 1/64 in the check that is not send along with a call to counteract\r\n        // potential shortings because of EIP-150\r\n        // Bitshift left 6 bits means multiplying by 64, just more gas efficient\r\n        if (\r\n            gasleft() <\r\n            Math.max((_tx.targetTxGas << 6) / 63, _tx.targetTxGas + 2500) + 7500\r\n        )\r\n            revert NotEnoughGasLeft(\r\n                gasleft(),\r\n                Math.max((_tx.targetTxGas << 6) / 63, _tx.targetTxGas + 2500) +\r\n                    7500\r\n            );\r\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\r\n        {\r\n            //we always provide targetTxGas to execution\r\n            success = IExecFromModule(smartAccount).execTransactionFromModule(\r\n                _tx.to,\r\n                _tx.value,\r\n                _tx.data,\r\n                _tx.operation,\r\n                _tx.targetTxGas\r\n            );\r\n\r\n            // If targetTxGas and gasPrice are both 0, the internal tx must succeed.\r\n            // Enables safe use of `estimateGas` by finding the minimum gas where the transaction doesn't revert\r\n            if (!success && _tx.targetTxGas == 0 && refundInfo.gasPrice == 0)\r\n                revert CanNotEstimateGas(\r\n                    _tx.targetTxGas,\r\n                    refundInfo.gasPrice,\r\n                    success\r\n                );\r\n\r\n            // Transfer transaction costs to tx.origin to avoid intermediate contract payments.\r\n            uint256 payment;\r\n            if (refundInfo.gasPrice != 0) {\r\n                payment = _handlePayment(\r\n                    smartAccount,\r\n                    startGas - gasleft(),\r\n                    refundInfo.baseGas,\r\n                    refundInfo.gasPrice,\r\n                    refundInfo.tokenGasPriceFactor,\r\n                    refundInfo.gasToken,\r\n                    refundInfo.refundReceiver\r\n                );\r\n                emit AccountHandlePayment(txHash, payment);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns hash to be signed by owner.\r\n     * @param _nonce Transaction nonce.\r\n     * @param smartAccount Address of the Smart Account to execute the txn.\r\n     * @return Transaction hash.\r\n     */\r\n    function getTransactionHash(\r\n        Transaction calldata _tx,\r\n        FeeRefund calldata refundInfo,\r\n        uint256 _nonce,\r\n        address smartAccount\r\n    ) public view returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                encodeTransactionData(smartAccount, _tx, refundInfo, _nonce)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the bytes that are hashed to be signed by owner.\r\n     * @param _tx The wallet transaction to be signed.\r\n     * @param refundInfo Required information for gas refunds.\r\n     * @param _nonce Transaction nonce.\r\n     * @return transactionHash bytes that are hashed to be signed by the owner.\r\n     */\r\n    function encodeTransactionData(\r\n        address smartAccount,\r\n        Transaction memory _tx,\r\n        FeeRefund memory refundInfo,\r\n        uint256 _nonce\r\n    ) public view returns (bytes memory) {\r\n        bytes32 accountTxHash = keccak256(\r\n            abi.encode(\r\n                ACCOUNT_TX_TYPEHASH,\r\n                _tx.to,\r\n                _tx.value,\r\n                keccak256(_tx.data),\r\n                _tx.operation,\r\n                _tx.targetTxGas,\r\n                refundInfo.baseGas,\r\n                refundInfo.gasPrice,\r\n                refundInfo.tokenGasPriceFactor,\r\n                refundInfo.gasToken,\r\n                refundInfo.refundReceiver,\r\n                _nonce\r\n            )\r\n        );\r\n        return\r\n            bytes.concat(\r\n                bytes1(0x19),\r\n                bytes1(0x01),\r\n                domainSeparator(smartAccount),\r\n                accountTxHash\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev returns a value from the nonces 2d mapping\r\n     * @param batchId : the key of the user's batch being queried\r\n     * @return nonce : the number of transactions made within said batch\r\n     */\r\n    function getNonce(uint256 batchId) public view virtual returns (uint256) {\r\n        return nonces[batchId];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\r\n     * @return bytes32 The domain separator hash.\r\n     */\r\n    function domainSeparator(\r\n        address smartAccount\r\n    ) public view returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(DOMAIN_SEPARATOR_TYPEHASH, CHAIN_ID, smartAccount)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the ID of the chain the contract is currently deployed on.\r\n     * @return CHAIN_ID The ID of the current chain as a uint256.\r\n     */\r\n    function getChainId() public view returns (uint256) {\r\n        return CHAIN_ID;\r\n    }\r\n\r\n    /**\r\n     * @dev Handles the payment for a transaction refund from Smart Account to Relayer.\r\n     * @param gasUsed Gas used by the transaction.\r\n     * @param baseGas Gas costs that are independent of the transaction execution\r\n     * (e.g. base transaction fee, signature check, payment of the refund, emitted events).\r\n     * @param gasPrice Gas price / TokenGasPrice (gas price in the context of token using offchain price feeds)\r\n     * that should be used for the payment calculation.\r\n     * @param tokenGasPriceFactor factor by which calculated token gas price is already multiplied.\r\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\r\n     * @return payment The amount of payment made in the specified token.\r\n     */\r\n    function _handlePayment(\r\n        address smartAccount,\r\n        uint256 gasUsed,\r\n        uint256 baseGas,\r\n        uint256 gasPrice,\r\n        uint256 tokenGasPriceFactor,\r\n        address gasToken,\r\n        address payable refundReceiver\r\n    ) private returns (uint256 payment) {\r\n        if (tokenGasPriceFactor == 0) revert TokenGasPriceFactorCanNotBeZero();\r\n        // solhint-disable-next-line avoid-tx-origin\r\n        address payable receiver = refundReceiver == address(0)\r\n            ? payable(tx.origin)\r\n            : refundReceiver;\r\n        if (gasToken == address(0)) {\r\n            // For ETH we will only adjust the gas price to not be higher than the actual used gas price\r\n            payment =\r\n                (gasUsed + baseGas) *\r\n                (gasPrice < tx.gasprice ? gasPrice : tx.gasprice);\r\n            if (\r\n                !IExecFromModule(smartAccount).execTransactionFromModule(\r\n                    receiver,\r\n                    payment,\r\n                    \"0x\",\r\n                    Enum.Operation.Call,\r\n                    0\r\n                )\r\n            ) {\r\n                revert TokenTransferFailed(address(0), receiver, payment);\r\n            }\r\n        } else {\r\n            payment =\r\n                ((gasUsed + baseGas) * (gasPrice)) /\r\n                (tokenGasPriceFactor);\r\n            if (\r\n                !IExecFromModule(smartAccount).execTransactionFromModule(\r\n                    gasToken,\r\n                    0,\r\n                    abi.encodeWithSignature(\r\n                        \"transfer(address,uint256)\",\r\n                        receiver,\r\n                        payment\r\n                    ),\r\n                    Enum.Operation.Call,\r\n                    0\r\n                )\r\n            ) {\r\n                revert TokenTransferFailed(gasToken, receiver, payment);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/modules/KeyManagementContractRegistryModule/interfaces/IKeyManagementAuthorizationModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n// interface for modules to verify singatures signed over userOpHash\r\ninterface IKeyManagementAuthorizationModule {\r\n    function validate(bytes calldata data) external view returns (bool result);\r\n}\r\n"
    },
    "contracts/modules/KeyManagementContractRegistryModule/KeyManagement.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.17;\r\n\r\nimport \"./interfaces/IKeyManagementAuthorizationModule.sol\";\r\n\r\nimport {SignatureRSV, EthereumUtils} from \"@oasisprotocol/sapphire-contracts/contracts/EthereumUtils.sol\";\r\nimport {UserOperation} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\r\nimport {Sapphire} from \"@oasisprotocol/sapphire-contracts/contracts/Sapphire.sol\";\r\nimport {BaseAuthorizationModule} from \"../BaseAuthorizationModule.sol\";\r\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\n\r\ncontract KeyManagement is BaseAuthorizationModule {\r\n    using ECDSA for bytes32;\r\n\r\n    address internal constant SENTINEL_MODULES = address(0x1);\r\n\r\n    mapping(address => address) internal _modules;\r\n    mapping(address => address) internal publicAddress;\r\n    mapping(address => bytes32) private privateSecret;\r\n\r\n    bool private _initialized;\r\n\r\n    error WrongValidationModule(address validationModule);\r\n\r\n    constructor() {}\r\n\r\n    function initForSmartAccount(address _owner) external returns (address) {\r\n        require(!_initialized, \"AlreadyInitialized\");\r\n        address keypairAddress;\r\n        bytes32 keypairSecret;\r\n        (keypairAddress, keypairSecret) = EthereumUtils.generateKeypair();\r\n        publicAddress[_owner] = keypairAddress;\r\n        privateSecret[_owner] = keypairSecret;\r\n        return address(this);\r\n    }\r\n\r\n    modifier onlyOwner(bytes calldata data) {\r\n        (, address validationModule) = abi.decode(data, (bytes, address));\r\n        if (_modules[validationModule] != address(0)) {\r\n            require(\r\n                IKeyManagementAuthorizationModule(validationModule).validate(\r\n                    data\r\n                ) == true,\r\n                \"Validate wrong\"\r\n            );\r\n        } else {\r\n            revert WrongValidationModule(validationModule);\r\n        }\r\n        _;\r\n    }\r\n\r\n    function sign(\r\n        bytes calldata authenticationData,\r\n        address smartAccount,\r\n        bytes32 digest\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            // onlyOwner(authenticationData, smartAccount)\r\n            SignatureRSV memory\r\n        )\r\n    {\r\n        return\r\n            EthereumUtils.sign(\r\n                publicAddress[smartAccount],\r\n                privateSecret[smartAccount],\r\n                digest\r\n            );\r\n    }\r\n\r\n    function validateUserOp(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash\r\n    ) external view virtual returns (uint256) {\r\n        (bytes memory cleanEcdsaSignature, ) = abi.decode(\r\n            userOp.signature,\r\n            (bytes, address)\r\n        );\r\n        if (_verifySignature(userOpHash, cleanEcdsaSignature, userOp.sender)) {\r\n            return VALIDATION_SUCCESS;\r\n        }\r\n        return SIG_VALIDATION_FAILED;\r\n    }\r\n\r\n    function isValidSignature(\r\n        bytes32 dataHash,\r\n        bytes memory moduleSignature\r\n    ) public view override returns (bytes4) {\r\n        return\r\n            isValidSignatureForAddress(dataHash, moduleSignature, msg.sender);\r\n    }\r\n\r\n    function isValidSignatureForAddress(\r\n        bytes32 dataHash,\r\n        bytes memory moduleSignature,\r\n        address smartAccount\r\n    ) public view virtual returns (bytes4) {\r\n        if (_verifySignature(dataHash, moduleSignature, smartAccount)) {\r\n            return EIP1271_MAGIC_VALUE;\r\n        }\r\n        return bytes4(0xffffffff);\r\n    }\r\n\r\n    function _verifySignature(\r\n        bytes32 dataHash,\r\n        bytes memory signature,\r\n        address smartAccount\r\n    ) internal view returns (bool) {\r\n        address keypairAddress = publicAddress[smartAccount];\r\n        address recovered = (dataHash.toEthSignedMessageHash()).recover(\r\n            signature\r\n        );\r\n        if (keypairAddress == recovered) {\r\n            return true;\r\n        }\r\n        recovered = dataHash.recover(signature);\r\n        if (keypairAddress == recovered) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n// bool verify = Sapphire.verify(\r\n//     Sapphire.SigningAlg.Secp256k1PrehashedKeccak256,\r\n//     bytes(keypairAddress),\r\n//     dataHash,\r\n//     \"\",\r\n//     signature\r\n// );\r\n// return verify;\r\n"
    },
    "contracts/modules/KeyManagementContractRegistryModule/libs/CloneFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n/*\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2018 Murray Software, LLC.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included\r\nin all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n// Source: https://github.com/optionality/clone-factory/blob/ffa4dedcec53b68b11450b07685b4df80c33edcc/contracts/CloneFactory.sol\r\npragma solidity ^0.8.17;\r\n\r\n//solhint-disable max-line-length\r\n//solhint-disable no-inline-assembly\r\n\r\ncontract CloneFactory {\r\n    function createClone(address target) internal returns (address result) {\r\n        bytes20 targetBytes = bytes20(target);\r\n        assembly {\r\n            let clone := mload(0x40)\r\n            mstore(\r\n                clone,\r\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\r\n            )\r\n            mstore(add(clone, 0x14), targetBytes)\r\n            mstore(\r\n                add(clone, 0x28),\r\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\r\n            )\r\n            result := create(0, clone, 0x37)\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/modules/KeyManagementContractRegistryModule/modules/EcdsaOwnershipKMM.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\n\r\ncontract EcdsaOwnershipRegistryModuleKEY {\r\n    using ECDSA for bytes32;\r\n\r\n    string public constant NAME = \"ECDSA Ownership Module For Key Management\";\r\n    mapping(address => address) internal _keyManagementOwners;\r\n    uint256 limitBlock = 10;\r\n\r\n    error AlreadyInited(address smartAccount);\r\n    error ZeroAddressNotAllowedAsOwner();\r\n    error NoOwnerRegisteredForSmartAccount(address smartAccount);\r\n    error WrongSignatureLength();\r\n\r\n    function initForSmartAccount(address eoaOwner) external returns (address) {\r\n        if (_keyManagementOwners[msg.sender] != address(0))\r\n            revert AlreadyInited(msg.sender);\r\n        if (eoaOwner == address(0)) revert ZeroAddressNotAllowedAsOwner();\r\n        _keyManagementOwners[msg.sender] = eoaOwner;\r\n        return address(this);\r\n    }\r\n\r\n    function validate(\r\n        bytes calldata data\r\n    ) external view virtual returns (bool) {\r\n        (bytes32 plaintext, uint256 numBlock, bytes memory signature) = abi\r\n            .decode(data, (bytes32, uint256, bytes));\r\n\r\n        require(block.number - numBlock < limitBlock, \"too late\");\r\n\r\n        bytes32 ciphertext = keccak256(\r\n            abi.encode(plaintext, blockhash(numBlock), numBlock)\r\n        );\r\n\r\n        if (_verifySignature(ciphertext, signature, msg.sender)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _verifySignature(\r\n        bytes32 dataHash,\r\n        bytes memory signature,\r\n        address smartAccount\r\n    ) internal view returns (bool) {\r\n        address expectedSigner = _keyManagementOwners[smartAccount];\r\n        if (expectedSigner == address(0))\r\n            revert NoOwnerRegisteredForSmartAccount(smartAccount);\r\n        if (signature.length < 65) revert WrongSignatureLength();\r\n        address recovered = (dataHash.toEthSignedMessageHash()).recover(\r\n            signature\r\n        );\r\n        if (expectedSigner == recovered) {\r\n            return true;\r\n        }\r\n        recovered = dataHash.recover(signature);\r\n        if (expectedSigner == recovered) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the address provided is a smart contract.\r\n     * @param account Address to be checked.\r\n     */\r\n    function _isSmartContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n"
    },
    "contracts/modules/KeyManagementContractRegistryModule/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @title Proxy // This is the user's Smart Account\r\n * @notice Basic proxy that delegates all calls to a fixed implementation contract.\r\n * @dev    Implementation address is stored in the slot defined by the Proxy's address\r\n */\r\ncontract Proxy {\r\n    constructor(address _implementation) {\r\n        require(\r\n            _implementation != address(0),\r\n            \"Invalid implementation address\"\r\n        );\r\n        assembly {\r\n            sstore(address(), _implementation)\r\n        }\r\n    }\r\n\r\n    fallback() external payable {\r\n        address target;\r\n        assembly {\r\n            target := sload(address())\r\n            calldatacopy(0, 0, calldatasize())\r\n            let result := delegatecall(gas(), target, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            switch result\r\n            case 0 {\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/modules/MultichainECDSAValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport {UserOperation} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\r\nimport {EcdsaOwnershipRegistryModule} from \"./EcdsaOwnershipRegistryModule.sol\";\r\nimport {UserOperationLib} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\r\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\nimport {_packValidationData} from \"@account-abstraction/contracts/core/Helpers.sol\";\r\n\r\n/**\r\n * @title ECDSA Multichain Validator module for Biconomy Smart Accounts.\r\n * @dev Biconomy’s Multichain Validator module enables use cases which\r\n * require several actions to be authorized for several chains with just one\r\n * signature required from user.\r\n *         - Leverages Merkle Trees to efficiently manage large datasets\r\n *         - Inherits from the ECDSA Ownership Registry Module\r\n *         - Compatible with Biconomy Modular Interface v 0.1\r\n *         - Does not introduce any additional security trade-offs compared to the\r\n *           vanilla ERC-4337 flow.\r\n * @author Fil Makarov - <filipp.makarov@biconomy.io>\r\n */\r\n\r\ncontract MultichainECDSAValidator is EcdsaOwnershipRegistryModule {\r\n    using UserOperationLib for UserOperation;\r\n\r\n    /**\r\n     * @dev Validates User Operation.\r\n     * leaf = validUntil + validAfter + userOpHash\r\n     * If the leaf is the part of the Tree with a root provided, userOp considered\r\n     * to be authorized by user\r\n     * @param userOp user operation to be validated\r\n     * @param userOpHash hash of the userOp provided by the EP\r\n     */\r\n\r\n    function validateUserOp(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash\r\n    ) external view virtual override returns (uint256) {\r\n        (bytes memory moduleSignature, ) = abi.decode(\r\n            userOp.signature,\r\n            (bytes, address)\r\n        );\r\n\r\n        address sender;\r\n        //read sender from userOp, which is first userOp member (saves gas)\r\n        assembly {\r\n            sender := calldataload(userOp)\r\n        }\r\n\r\n        if (moduleSignature.length == 65) {\r\n            //it's not a multichain signature\r\n            return\r\n                _verifySignature(\r\n                    userOpHash,\r\n                    moduleSignature,\r\n                    address(uint160(sender))\r\n                )\r\n                    ? VALIDATION_SUCCESS\r\n                    : SIG_VALIDATION_FAILED;\r\n        }\r\n\r\n        //otherwise it is a multichain signature\r\n        (\r\n            uint48 validUntil,\r\n            uint48 validAfter,\r\n            bytes32 merkleTreeRoot,\r\n            bytes32[] memory merkleProof,\r\n            bytes memory multichainSignature\r\n        ) = abi.decode(\r\n                moduleSignature,\r\n                (uint48, uint48, bytes32, bytes32[], bytes)\r\n            );\r\n\r\n        //make a leaf out of userOpHash, validUntil and validAfter\r\n        bytes32 leaf = keccak256(\r\n            abi.encodePacked(validUntil, validAfter, userOpHash)\r\n        );\r\n\r\n        if (!MerkleProof.verify(merkleProof, merkleTreeRoot, leaf)) {\r\n            revert(\"Invalid UserOp\");\r\n        }\r\n\r\n        return\r\n            _verifySignature(\r\n                merkleTreeRoot,\r\n                multichainSignature,\r\n                address(uint160(sender))\r\n            )\r\n                ? _packValidationData(\r\n                    false, //sigVerificationFailed = false\r\n                    validUntil == 0 ? type(uint48).max : validUntil,\r\n                    validAfter\r\n                )\r\n                : SIG_VALIDATION_FAILED;\r\n    }\r\n\r\n    /**\r\n     * Inherits isValideSignature method from EcdsaOwnershipRegistryModule\r\n     * isValidSignature is intended to work not with a multichain signature\r\n     * but with a regular ecdsa signature over a message hash\r\n     */\r\n}\r\n"
    },
    "contracts/modules/PasskeyRegistryModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.17;\r\n\r\nimport {BaseAuthorizationModule} from \"./BaseAuthorizationModule.sol\";\r\nimport {UserOperation} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\r\nimport {Base64} from \"@openzeppelin/contracts/utils/Base64.sol\";\r\nimport {Secp256r1, PassKeyId} from \"./PasskeyValidationModules/Secp256r1.sol\";\r\n\r\n/**\r\n * @title Passkey ownership Authorization module for Biconomy Smart Accounts.\r\n * @dev Compatible with Biconomy Modular Interface v 0.2\r\n *         - It allows to validate user operations signed by passkeys.\r\n *         - One owner per Smart Account.\r\n *         For Smart Contract Owners check SmartContractOwnership module instead\r\n * @author Aman Raj - <aman.raj@biconomy.io>\r\n */\r\n\r\ncontract PasskeyRegistryModule is BaseAuthorizationModule {\r\n    string public constant NAME = \"PassKeys Ownership Registry Module\";\r\n    string public constant VERSION = \"0.2.0\";\r\n\r\n    mapping(address => PassKeyId) public smartAccountPassKeys;\r\n\r\n    error NoPassKeyRegisteredForSmartAccount(address smartAccount);\r\n    error AlreadyInitedForSmartAccount(address smartAccount);\r\n\r\n    /**\r\n     * @dev Initializes the module for a Smart Account.\r\n     * Should be used at a time of first enabling the module for a Smart Account.\r\n     * @param _pubKeyX The x coordinate of the public key.\r\n     * @param _pubKeyY The y coordinate of the public key.\r\n     * @param _keyId The keyId of the Smart Account.\r\n     * @return address of the module.\r\n     */\r\n    function initForSmartAccount(\r\n        uint256 _pubKeyX,\r\n        uint256 _pubKeyY,\r\n        string calldata _keyId\r\n    ) external returns (address) {\r\n        if (\r\n            smartAccountPassKeys[msg.sender].pubKeyX != 0 &&\r\n            smartAccountPassKeys[msg.sender].pubKeyY != 0\r\n        ) revert AlreadyInitedForSmartAccount(msg.sender);\r\n        smartAccountPassKeys[msg.sender] = PassKeyId(\r\n            _pubKeyX,\r\n            _pubKeyY,\r\n            _keyId\r\n        );\r\n        return address(this);\r\n    }\r\n\r\n    /**\r\n     * @dev validates userOperation\r\n     * @param userOp User Operation to be validated.\r\n     * @param userOpHash Hash of the User Operation to be validated.\r\n     * @return sigValidationResult 0 if signature is valid, SIG_VALIDATION_FAILED otherwise.\r\n     */\r\n    function validateUserOp(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash\r\n    ) external view virtual returns (uint256) {\r\n        return _validateSignature(userOp, userOpHash);\r\n    }\r\n\r\n    function isValidSignature(\r\n        bytes32 signedDataHash,\r\n        bytes memory moduleSignature\r\n    ) public view virtual override returns (bytes4) {\r\n        return isValidSignatureForAddress(signedDataHash, moduleSignature);\r\n    }\r\n\r\n    function isValidSignatureForAddress(\r\n        bytes32 signedDataHash,\r\n        bytes memory moduleSignature\r\n    ) public view virtual returns (bytes4) {\r\n        if (_verifySignature(signedDataHash, moduleSignature)) {\r\n            return EIP1271_MAGIC_VALUE;\r\n        }\r\n        return bytes4(0xffffffff);\r\n    }\r\n\r\n    function _verifySignature(\r\n        bytes32 userOpDataHash,\r\n        bytes memory moduleSignature\r\n    ) internal view returns (bool) {\r\n        (\r\n            bytes32 keyHash,\r\n            uint256 sigx,\r\n            uint256 sigy,\r\n            bytes memory authenticatorData,\r\n            string memory clientDataJSONPre,\r\n            string memory clientDataJSONPost\r\n        ) = abi.decode(\r\n                moduleSignature,\r\n                (bytes32, uint256, uint256, bytes, string, string)\r\n            );\r\n        (keyHash);\r\n        string memory opHashBase64 = Base64.encode(\r\n            bytes.concat(userOpDataHash)\r\n        );\r\n        string memory clientDataJSON = string.concat(\r\n            clientDataJSONPre,\r\n            opHashBase64,\r\n            clientDataJSONPost\r\n        );\r\n        bytes32 clientHash = sha256(bytes(clientDataJSON));\r\n        bytes32 sigHash = sha256(bytes.concat(authenticatorData, clientHash));\r\n\r\n        PassKeyId memory passKey = smartAccountPassKeys[msg.sender];\r\n        if (passKey.pubKeyX == 0 && passKey.pubKeyY == 0)\r\n            revert NoPassKeyRegisteredForSmartAccount(msg.sender);\r\n        return Secp256r1.verify(passKey, sigx, sigy, uint256(sigHash));\r\n    }\r\n\r\n    function _validateSignature(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash\r\n    ) internal view virtual returns (uint256 sigValidationResult) {\r\n        if (_verifySignature(userOpHash, userOp.signature)) {\r\n            return 0;\r\n        }\r\n        return SIG_VALIDATION_FAILED;\r\n    }\r\n}\r\n"
    },
    "contracts/modules/PasskeyValidationModules/Secp256r1.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.8.17;\r\n//\r\n// Heavily inspired from\r\n// https://github.com/maxrobot/elliptic-solidity/blob/master/contracts/Secp256r1.sol\r\n// https://github.com/tdrerup/elliptic-curve-solidity/blob/master/contracts/curves/EllipticCurve.sol\r\n// modified to use precompile 0x05 modexp\r\n// and modified jacobian double\r\n// optimisations to avoid to an from from affine and jacobian coordinates\r\n//\r\nstruct PassKeyId {\r\n    uint256 pubKeyX;\r\n    uint256 pubKeyY;\r\n    string keyId;\r\n}\r\n\r\nstruct JPoint {\r\n    uint256 x;\r\n    uint256 y;\r\n    uint256 z;\r\n}\r\n\r\nlibrary Secp256r1 {\r\n    uint256 private constant GX =\r\n        0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296;\r\n    uint256 private constant GY =\r\n        0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5;\r\n    uint256 private constant PP =\r\n        0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    uint256 private constant NN =\r\n        0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551;\r\n    uint256 private constant A =\r\n        0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC;\r\n    uint256 private constant B =\r\n        0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B;\r\n    uint256 private constant MOST_SIGNIFICANT =\r\n        0xc000000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    /*\r\n     * verify\r\n     * @description - verifies that a public key has signed a given message\r\n     * @param X - public key coordinate X\r\n     * @param Y - public key coordinate Y\r\n     * @param R - signature half R\r\n     * @param S - signature half S\r\n     * @param input - hashed message\r\n     */\r\n    function verify(\r\n        PassKeyId memory passKey,\r\n        uint256 r,\r\n        uint256 s,\r\n        uint256 e\r\n    ) internal view returns (bool) {\r\n        if (r >= NN || s >= NN) {\r\n            return false;\r\n        }\r\n\r\n        JPoint[16] memory points = preComputeJacobianPoints(passKey);\r\n        return verifyWithPrecompute(points, r, s, e);\r\n    }\r\n\r\n    function verifyWithPrecompute(\r\n        JPoint[16] memory points,\r\n        uint256 r,\r\n        uint256 s,\r\n        uint256 e\r\n    ) internal view returns (bool) {\r\n        if (r >= NN || s >= NN) {\r\n            return false;\r\n        }\r\n\r\n        uint256 w = primemod(s, NN);\r\n\r\n        uint256 u1 = mulmod(e, w, NN);\r\n        uint256 u2 = mulmod(r, w, NN);\r\n\r\n        uint256 x;\r\n        uint256 y;\r\n\r\n        (x, y) = shamirMultJacobian(points, u1, u2);\r\n        return (x == r);\r\n    }\r\n\r\n    /*\r\n     * Strauss Shamir trick for EC multiplication\r\n     * https://stackoverflow.com/questions/50993471/ec-scalar-multiplication-with-strauss-shamir-method\r\n     * we optimise on this a bit to do with 2 bits at a time rather than a single bit\r\n     * the individual points for a single pass are precomputed\r\n     * overall this reduces the number of additions while keeping the same number of doublings\r\n     */\r\n    function shamirMultJacobian(\r\n        JPoint[16] memory points,\r\n        uint256 u1,\r\n        uint256 u2\r\n    ) internal view returns (uint256, uint256) {\r\n        uint256 x = 0;\r\n        uint256 y = 0;\r\n        uint256 z = 0;\r\n        uint256 bits = 128;\r\n        uint256 index = 0;\r\n\r\n        while (bits > 0) {\r\n            if (z > 0) {\r\n                (x, y, z) = modifiedJacobianDouble(x, y, z);\r\n                (x, y, z) = modifiedJacobianDouble(x, y, z);\r\n            }\r\n            index =\r\n                ((u1 & MOST_SIGNIFICANT) >> 252) |\r\n                ((u2 & MOST_SIGNIFICANT) >> 254);\r\n            if (index > 0) {\r\n                (x, y, z) = jAdd(\r\n                    x,\r\n                    y,\r\n                    z,\r\n                    points[index].x,\r\n                    points[index].y,\r\n                    points[index].z\r\n                );\r\n            }\r\n            u1 <<= 2;\r\n            u2 <<= 2;\r\n            bits--;\r\n        }\r\n        (x, y) = affineFromJacobian(x, y, z);\r\n        return (x, y);\r\n    }\r\n\r\n    /* affineFromJacobian\r\n     * @desription returns affine coordinates from a jacobian input follows\r\n     * golang elliptic/crypto library\r\n     */\r\n    function affineFromJacobian(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 z\r\n    ) internal view returns (uint256 ax, uint256 ay) {\r\n        if (z == 0) {\r\n            return (0, 0);\r\n        }\r\n\r\n        uint256 zinv = primemod(z, PP);\r\n        uint256 zinvsq = mulmod(zinv, zinv, PP);\r\n\r\n        ax = mulmod(x, zinvsq, PP);\r\n        ay = mulmod(y, mulmod(zinvsq, zinv, PP), PP);\r\n    }\r\n\r\n    // Fermats little theorem https://en.wikipedia.org/wiki/Fermat%27s_little_theorem\r\n    // a^(p-1) = 1 mod p\r\n    // a^(-1) ≅ a^(p-2) (mod p)\r\n    // we then use the precompile bigModExp to compute a^(-1)\r\n    function primemod(\r\n        uint256 value,\r\n        uint256 p\r\n    ) internal view returns (uint256 ret) {\r\n        ret = modexp(value, p - 2, p);\r\n        return ret;\r\n    }\r\n\r\n    // Wrapper for built-in BigNumber_modexp (contract 0x5) as described here. https://github.com/ethereum/EIPs/pull/198\r\n    function modexp(\r\n        uint256 _base,\r\n        uint256 _exp,\r\n        uint256 _mod\r\n    ) internal view returns (uint256 ret) {\r\n        // bigModExp(_base, _exp, _mod);\r\n        assembly {\r\n            if gt(_base, _mod) {\r\n                _base := mod(_base, _mod)\r\n            }\r\n            // Free memory pointer is always stored at 0x40\r\n            let freemem := mload(0x40)\r\n\r\n            mstore(freemem, 0x20)\r\n            mstore(add(freemem, 0x20), 0x20)\r\n            mstore(add(freemem, 0x40), 0x20)\r\n\r\n            mstore(add(freemem, 0x60), _base)\r\n            mstore(add(freemem, 0x80), _exp)\r\n            mstore(add(freemem, 0xa0), _mod)\r\n\r\n            let success := staticcall(1500, 0x5, freemem, 0xc0, freemem, 0x20)\r\n            switch success\r\n            case 0 {\r\n                revert(0x0, 0x0)\r\n            }\r\n            default {\r\n                ret := mload(freemem)\r\n            }\r\n        }\r\n    }\r\n\r\n    function preComputeJacobianPoints(\r\n        PassKeyId memory passKey\r\n    ) internal pure returns (JPoint[16] memory points) {\r\n        // JPoint[] memory u1Points = new JPoint[](4);\r\n        // u1Points[0] = JPoint(0, 0, 0);\r\n        // u1Points[1] = JPoint(GX, GY, 1); // u1\r\n        // u1Points[2] = jPointDouble(u1Points[1]);\r\n        // u1Points[3] = jPointAdd(u1Points[1], u1Points[2]);\r\n        // avoiding this intermediate step by using it in a single array below\r\n        // these are pre computed points for u1\r\n\r\n        // JPoint[16] memory points;\r\n        points[0] = JPoint(0, 0, 0);\r\n        points[1] = JPoint(passKey.pubKeyX, passKey.pubKeyY, 1); // u2\r\n        points[2] = jPointDouble(points[1]);\r\n        points[3] = jPointAdd(points[1], points[2]);\r\n\r\n        points[4] = JPoint(GX, GY, 1); // u1Points[1]\r\n        points[5] = jPointAdd(points[4], points[1]);\r\n        points[6] = jPointAdd(points[4], points[2]);\r\n        points[7] = jPointAdd(points[4], points[3]);\r\n\r\n        points[8] = jPointDouble(points[4]); // u1Points[2]\r\n        points[9] = jPointAdd(points[8], points[1]);\r\n        points[10] = jPointAdd(points[8], points[2]);\r\n        points[11] = jPointAdd(points[8], points[3]);\r\n\r\n        points[12] = jPointAdd(points[4], points[8]); // u1Points[3]\r\n        points[13] = jPointAdd(points[12], points[1]);\r\n        points[14] = jPointAdd(points[12], points[2]);\r\n        points[15] = jPointAdd(points[12], points[3]);\r\n    }\r\n\r\n    function jPointAdd(\r\n        JPoint memory p1,\r\n        JPoint memory p2\r\n    ) internal pure returns (JPoint memory) {\r\n        uint256 x;\r\n        uint256 y;\r\n        uint256 z;\r\n        (x, y, z) = jAdd(p1.x, p1.y, p1.z, p2.x, p2.y, p2.z);\r\n        return JPoint(x, y, z);\r\n    }\r\n\r\n    function jPointDouble(\r\n        JPoint memory p\r\n    ) internal pure returns (JPoint memory) {\r\n        uint256 x;\r\n        uint256 y;\r\n        uint256 z;\r\n        (x, y, z) = modifiedJacobianDouble(p.x, p.y, p.z);\r\n        return JPoint(x, y, z);\r\n    }\r\n\r\n    /*\r\n     * jAdd\r\n     * @description performs double Jacobian as defined below:\r\n     * https://hyperelliptic.org/EFD/g1p/auto-code/shortw/jacobian-3/doubling/mdbl-2007-bl.op3\r\n     */\r\n    function jAdd(\r\n        uint256 p1,\r\n        uint256 p2,\r\n        uint256 p3,\r\n        uint256 q1,\r\n        uint256 q2,\r\n        uint256 q3\r\n    ) internal pure returns (uint256 r1, uint256 r2, uint256 r3) {\r\n        if (p3 == 0) {\r\n            r1 = q1;\r\n            r2 = q2;\r\n            r3 = q3;\r\n\r\n            return (r1, r2, r3);\r\n        } else if (q3 == 0) {\r\n            r1 = p1;\r\n            r2 = p2;\r\n            r3 = p3;\r\n\r\n            return (r1, r2, r3);\r\n        }\r\n\r\n        assembly {\r\n            let\r\n                pd\r\n            := 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\r\n            let z1z1 := mulmod(p3, p3, pd) // Z1Z1 = Z1^2\r\n            let z2z2 := mulmod(q3, q3, pd) // Z2Z2 = Z2^2\r\n\r\n            let u1 := mulmod(p1, z2z2, pd) // U1 = X1*Z2Z2\r\n            let u2 := mulmod(q1, z1z1, pd) // U2 = X2*Z1Z1\r\n\r\n            let s1 := mulmod(p2, mulmod(z2z2, q3, pd), pd) // S1 = Y1*Z2*Z2Z2\r\n            let s2 := mulmod(q2, mulmod(z1z1, p3, pd), pd) // S2 = Y2*Z1*Z1Z1\r\n\r\n            let p3q3 := addmod(p3, q3, pd)\r\n\r\n            if lt(u2, u1) {\r\n                u2 := add(pd, u2) // u2 = u2+pd\r\n            }\r\n            let h := sub(u2, u1) // H = U2-U1\r\n\r\n            let i := mulmod(0x02, h, pd)\r\n            i := mulmod(i, i, pd) // I = (2*H)^2\r\n\r\n            let j := mulmod(h, i, pd) // J = H*I\r\n            if lt(s2, s1) {\r\n                s2 := add(pd, s2) // u2 = u2+pd\r\n            }\r\n            let rr := mulmod(0x02, sub(s2, s1), pd) // r = 2*(S2-S1)\r\n            r1 := mulmod(rr, rr, pd) // X3 = R^2\r\n\r\n            let v := mulmod(u1, i, pd) // V = U1*I\r\n            let j2v := addmod(j, mulmod(0x02, v, pd), pd)\r\n            if lt(r1, j2v) {\r\n                r1 := add(pd, r1) // X3 = X3+pd\r\n            }\r\n            r1 := sub(r1, j2v)\r\n\r\n            // Y3 = r*(V-X3)-2*S1*J\r\n            let s12j := mulmod(mulmod(0x02, s1, pd), j, pd)\r\n\r\n            if lt(v, r1) {\r\n                v := add(pd, v)\r\n            }\r\n            r2 := mulmod(rr, sub(v, r1), pd)\r\n\r\n            if lt(r2, s12j) {\r\n                r2 := add(pd, r2)\r\n            }\r\n            r2 := sub(r2, s12j)\r\n\r\n            // Z3 = ((Z1+Z2)^2-Z1Z1-Z2Z2)*H\r\n            z1z1 := addmod(z1z1, z2z2, pd)\r\n            j2v := mulmod(p3q3, p3q3, pd)\r\n            if lt(j2v, z1z1) {\r\n                j2v := add(pd, j2v)\r\n            }\r\n            r3 := mulmod(sub(j2v, z1z1), h, pd)\r\n        }\r\n        return (r1, r2, r3);\r\n    }\r\n\r\n    // Point doubling on the modified jacobian coordinates\r\n    // http://point-at-infinity.org/ecc/Prime_Curve_Modified_Jacobian_Coordinates.html\r\n    function modifiedJacobianDouble(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 z\r\n    ) internal pure returns (uint256 x3, uint256 y3, uint256 z3) {\r\n        assembly {\r\n            let\r\n                pd\r\n            := 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\r\n            let z2 := mulmod(z, z, pd)\r\n            let az4 := mulmod(\r\n                0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC,\r\n                mulmod(z2, z2, pd),\r\n                pd\r\n            )\r\n            let y2 := mulmod(y, y, pd)\r\n            let s := mulmod(0x04, mulmod(x, y2, pd), pd)\r\n            let u := mulmod(0x08, mulmod(y2, y2, pd), pd)\r\n            let m := addmod(mulmod(0x03, mulmod(x, x, pd), pd), az4, pd)\r\n            let twos := mulmod(0x02, s, pd)\r\n            let m2 := mulmod(m, m, pd)\r\n            if lt(m2, twos) {\r\n                m2 := add(pd, m2)\r\n            }\r\n            x3 := sub(m2, twos)\r\n            if lt(s, x3) {\r\n                s := add(pd, s)\r\n            }\r\n            y3 := mulmod(m, sub(s, x3), pd)\r\n            if lt(y3, u) {\r\n                y3 := add(pd, y3)\r\n            }\r\n            y3 := sub(y3, u)\r\n            z3 := mulmod(0x02, mulmod(y, z, pd), pd)\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/modules/SmartContractOwnershipRegistryModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport {BaseAuthorizationModule, ISignatureValidator} from \"./BaseAuthorizationModule.sol\";\r\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport {UserOperation} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\r\n\r\n/**\r\n * @title Smart Contract Ownership Authorization module for Biconomy Smart Accounts.\r\n * @dev Compatible with Biconomy Modular Interface v 0.1\r\n *         - It allows to validate user operations signed by other smart contracts via EIP-1271.\r\n *         - EIP-1271 compatible (ensures Smart Account can validate signed messages).\r\n *         - One owner per Smart Account.\r\n * @dev No EOA owners supported\r\n *         For EOA Owners check EcdsaOwnership module instead\r\n * @notice !!! This module doesn't follow the Storage Access Rules set by ERC-4337 !!!\r\n * https://eips.ethereum.org/EIPS/eip-4337#storage-associated-with-an-address\r\n * Thus it will not be compatible with the standard bundlers.\r\n * You can still use it in private environments or with custom bundlers which have\r\n * less restrictions than ones participating in the unified userOps mempool.\r\n *\r\n * @author Fil Makarov - <filipp.makarov@biconomy.io>\r\n */\r\n\r\ncontract SmartContractOwnershipRegistryModule is BaseAuthorizationModule {\r\n    using ECDSA for bytes32;\r\n\r\n    string public constant NAME = \"Smart Contract Ownership Registry Module\";\r\n    string public constant VERSION = \"0.1.0\";\r\n    mapping(address => address) internal _smartAccountOwners;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed smartAccount,\r\n        address indexed oldOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    error NoOwnerRegisteredForSmartAccount(address smartAccount);\r\n    error AlreadyInitedForSmartAccount(address smartAccount);\r\n    error WrongSignatureLength();\r\n    error NotSmartContract(address account);\r\n\r\n    /**\r\n     * @dev Initializes the module for a Smart Account.\r\n     * @dev no need to check for address(0) as it is not a Smart Contract\r\n     * Should be used at a time of first enabling the module for a Smart Account.\r\n     * @param owner The owner of the Smart Account.\r\n     */\r\n    function initForSmartAccount(address owner) external returns (address) {\r\n        if (_smartAccountOwners[msg.sender] != address(0))\r\n            revert AlreadyInitedForSmartAccount(msg.sender);\r\n        if (!_isSmartContract(owner)) revert NotSmartContract(owner);\r\n        _smartAccountOwners[msg.sender] = owner;\r\n        return address(this);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets/changes an for a Smart Account.\r\n     * @dev no need to check for address(0) as it is not a Smart Contract\r\n     * Should be called by Smart Account itself.\r\n     * @param owner The owner of the Smart Account.\r\n     */\r\n    function transferOwnership(address owner) external {\r\n        if (!_isSmartContract(owner)) revert NotSmartContract(owner);\r\n        _transferOwnership(msg.sender, owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Renounces ownership\r\n     * should be called by Smart Account.\r\n     */\r\n    function renounceOwnership() external {\r\n        _transferOwnership(msg.sender, address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the owner of the Smart Account. Reverts for Smart Accounts without owners.\r\n     * @param smartAccount Smart Account address.\r\n     * @return owner The owner of the Smart Account.\r\n     */\r\n    function getOwner(address smartAccount) external view returns (address) {\r\n        address owner = _smartAccountOwners[smartAccount];\r\n        if (owner == address(0))\r\n            revert NoOwnerRegisteredForSmartAccount(smartAccount);\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev validates userOperation\r\n     * @param userOp User Operation to be validated.\r\n     * @param userOpHash Hash of the User Operation to be validated.\r\n     * @return sigValidationResult 0 if signature is valid, SIG_VALIDATION_FAILED otherwise.\r\n     */\r\n    function validateUserOp(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash\r\n    ) external view virtual returns (uint256) {\r\n        (bytes memory moduleSignature, ) = abi.decode(\r\n            userOp.signature,\r\n            (bytes, address)\r\n        );\r\n        // we send exactly the hash that has been received from EP\r\n        // as in theory owner.isValidSignature can expect signatures not only\r\n        // over eth signed hash. So if the frontend/backend creates a signature for\r\n        // this module, it is in charge to provide a signature over the non-modified hash\r\n        // or over a hash that is modiefied in the way owner expects\r\n        if (_verifySignature(userOpHash, moduleSignature, userOp.sender)) {\r\n            return 0;\r\n        }\r\n        return SIG_VALIDATION_FAILED;\r\n    }\r\n\r\n    /**\r\n     * @dev Validates a signature for a message.\r\n     * To be called from a Smart Account.\r\n     * @param dataHash Exact hash of the data that was signed.\r\n     * @param moduleSignature Signature to be validated.\r\n     * @return EIP1271_MAGIC_VALUE if signature is valid, 0xffffffff otherwise.\r\n     */\r\n    function isValidSignature(\r\n        bytes32 dataHash,\r\n        bytes memory moduleSignature\r\n    ) public view virtual override returns (bytes4) {\r\n        return\r\n            isValidSignatureForAddress(dataHash, moduleSignature, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Validates a signature for a message signed by address.\r\n     * @param dataHash Exact hash of the data that was signed.\r\n     * @param moduleSignature Signature to be validated.\r\n     * @param smartAccount expected signer Smart Account address.\r\n     * @return EIP1271_MAGIC_VALUE if signature is valid, 0xffffffff otherwise.\r\n     */\r\n    function isValidSignatureForAddress(\r\n        bytes32 dataHash,\r\n        bytes memory moduleSignature,\r\n        address smartAccount\r\n    ) public view virtual returns (bytes4) {\r\n        if (_verifySignature(dataHash, moduleSignature, smartAccount)) {\r\n            return EIP1271_MAGIC_VALUE;\r\n        }\r\n        return bytes4(0xffffffff);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership for smartAccount and emits an event\r\n     * @param newOwner Smart Account address.\r\n     */\r\n    function _transferOwnership(\r\n        address smartAccount,\r\n        address newOwner\r\n    ) internal {\r\n        address _oldOwner = _smartAccountOwners[smartAccount];\r\n        _smartAccountOwners[smartAccount] = newOwner;\r\n        emit OwnershipTransferred(smartAccount, _oldOwner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Validates a signature for a message.\r\n     * Only Smart Account Owners, no EOA owners supported\r\n     * For Smart Contrac Owners check SmartContractOwnership module instead\r\n     * @param dataHash Hash of the data to be validated.\r\n     * @param signature Signature to be validated.\r\n     * @param smartAccount expected signer Smart Account address.\r\n     * @return true if signature is valid, false otherwise.\r\n     */\r\n    function _verifySignature(\r\n        bytes32 dataHash,\r\n        bytes memory signature,\r\n        address smartAccount\r\n    ) internal view returns (bool) {\r\n        address expectedContractSigner = _smartAccountOwners[smartAccount];\r\n        if (expectedContractSigner == address(0))\r\n            revert NoOwnerRegisteredForSmartAccount(smartAccount);\r\n        return\r\n            ISignatureValidator(expectedContractSigner).isValidSignature(\r\n                dataHash,\r\n                signature\r\n            ) == EIP1271_MAGIC_VALUE\r\n                ? true\r\n                : false;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the address provided is a smart contract.\r\n     * @param account Address to be checked.\r\n     */\r\n    function _isSmartContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n"
    },
    "contracts/modules/SwapSessionValidationModules/BuyValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\nimport \"solidity-bytes-utils/contracts/BytesLib.sol\";\r\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\r\nimport {UserOperation} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\r\n\r\nlibrary BuyValidator {\r\n    using BytesLib for bytes;\r\n\r\n    struct UniV3ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    struct AlgebraExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    bytes4 public constant WRAP_ETH_SELECTOR = 0xd0e30db0;\r\n    bytes4 public constant ERC20_APPROVE_SELECTOR = 0x095ea7b3;\r\n\r\n    bytes4 public constant UNIV3_EXACT_INPUT_SINGLE_SELECTOR = 0x414bf389;\r\n    bytes4 public constant ALGEBRA_EXACT_INPUT_SINGLE_SELECTOR = 0xbc651188;\r\n    bytes4 public constant UNIV2_SWAP_EXACT_ETH_FOR_TOKENS = 0x7ff36ab5;\r\n    bytes4 public constant UNIV2_SWAP_EXACT_TOKENS_FOR_TOKENS = 0x38ed1739;\r\n\r\n    // execute_ncC(address,uint256,bytes)\r\n    bytes4 public constant EXECUTE_OPTIMIZED_SELECTOR = 0x0000189a;\r\n    // function executeBatch_y6U( address[] calldata dest, uint256[] calldata value, bytes[] calldata func)\r\n    bytes4 public constant EXECUTE_BATCH_SELECTOR = 0x00004680;\r\n\r\n    /**\r\n     * @dev validates if the _op (UserOperation) matches the SessionKey permissions\r\n     * and that _op has been signed by this SessionKey\r\n     * Please mind the decimals of your exact token when setting maxAmount\r\n     * @param token the non-native token of the pair\r\n     * @return true if the _op is valid, false otherwise.\r\n     */\r\n    function validateBuy(\r\n        UserOperation memory op,\r\n        address token,\r\n        uint256 spentAmount,\r\n        uint256 payment,\r\n        address WRAPPED_NATIVE_TOKEN,\r\n        address ROUTER,\r\n        address FEE_RECIPIENT\r\n    ) internal pure returns (bool) {\r\n        bytes4 opFncSig = bytes4(op.callData.slice(0, 4));\r\n\r\n        bytes memory opData = op.callData.slice(4, op.callData.length - 4);\r\n\r\n        if (opFncSig == EXECUTE_OPTIMIZED_SELECTOR) {\r\n            require(payment == 0, \"BV: no payment required\");\r\n            (address router, uint256 callValue, bytes memory data) = abi.decode(\r\n                opData,\r\n                (address, uint256, bytes)\r\n            );\r\n            require(\r\n                callValue == 0 || callValue == spentAmount,\r\n                \"BV: invalid call value\"\r\n            );\r\n            require(router == ROUTER, \"BV: invalid router\");\r\n            validateBuyTx(\r\n                data,\r\n                op.sender,\r\n                token,\r\n                WRAPPED_NATIVE_TOKEN,\r\n                spentAmount\r\n            );\r\n        } else if (opFncSig == EXECUTE_BATCH_SELECTOR) {\r\n            (\r\n                address[] memory addresses,\r\n                uint256[] memory callValues,\r\n                bytes[] memory data\r\n            ) = abi.decode(opData, (address[], uint256[], bytes[]));\r\n\r\n            require(\r\n                addresses.length == callValues.length &&\r\n                    addresses.length == data.length,\r\n                \"BV: invalid tx list's length\"\r\n            );\r\n            uint256 fncNum = addresses.length;\r\n            require(fncNum >= 2 && fncNum <= 4, \"BV: invalid number of txs\");\r\n\r\n            uint256 buyTxIndex;\r\n\r\n            if (payment > 0) {\r\n                require(\r\n                    addresses[fncNum - 1] == FEE_RECIPIENT,\r\n                    \"BV: must pay fee\"\r\n                );\r\n                require(\r\n                    callValues[fncNum - 1] == payment,\r\n                    \"BV: invalid payment\"\r\n                );\r\n                buyTxIndex = fncNum - 2;\r\n            } else {\r\n                buyTxIndex = fncNum - 1;\r\n            }\r\n\r\n            require(addresses[buyTxIndex] == ROUTER, \"BV: invalid router\");\r\n            validateBuyTx(\r\n                data[buyTxIndex],\r\n                op.sender,\r\n                token,\r\n                WRAPPED_NATIVE_TOKEN,\r\n                spentAmount\r\n            );\r\n\r\n            if (buyTxIndex == 0) {\r\n                require(\r\n                    callValues[0] == 0 || callValues[0] == spentAmount,\r\n                    \"BV: invalid callvalue\"\r\n                );\r\n            } else if (buyTxIndex == 1) {\r\n                require(callValues[1] == 0, \"BV: invalid callvalue\");\r\n                require(\r\n                    addresses[0] == WRAPPED_NATIVE_TOKEN,\r\n                    \"BV: must call the wrapped native\"\r\n                );\r\n                bytes4 fncSig = bytes4(data[0].slice(0, 4));\r\n\r\n                if (fncSig == ERC20_APPROVE_SELECTOR) {\r\n                    validateApproveTx(data[0], ROUTER);\r\n                } else {\r\n                    require(\r\n                        fncSig == WRAP_ETH_SELECTOR,\r\n                        \"BV: Invalid op funtion signature\"\r\n                    );\r\n                }\r\n            } else {\r\n                require(callValues[2] == 0, \"BV: invalid callvalue\");\r\n                require(\r\n                    addresses[0] == WRAPPED_NATIVE_TOKEN &&\r\n                        addresses[1] == WRAPPED_NATIVE_TOKEN,\r\n                    \"BV: must call the wrapped native\"\r\n                );\r\n                require(\r\n                    bytes4(data[0].slice(0, 4)) == WRAP_ETH_SELECTOR &&\r\n                        bytes4(data[1].slice(0, 4)) == ERC20_APPROVE_SELECTOR,\r\n                    \"BV: Invalid op funtion signature\"\r\n                );\r\n                validateApproveTx(data[1], ROUTER);\r\n            }\r\n        } else {\r\n            revert(\"Invalid op funtion signature\");\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function validateBuyTx(\r\n        bytes memory data,\r\n        address sender,\r\n        address token,\r\n        address WRAPPED_NATIVE_TOKEN,\r\n        uint256 spentAmount\r\n    ) internal pure {\r\n        bytes4 fncSig = bytes4(data.slice(0, 4));\r\n\r\n        bytes memory funcData = data.slice(4, data.length - 4);\r\n\r\n        if (fncSig == UNIV3_EXACT_INPUT_SINGLE_SELECTOR) {\r\n            UniV3ExactInputSingleParams memory params = abi.decode(\r\n                funcData,\r\n                (UniV3ExactInputSingleParams)\r\n            );\r\n\r\n            require(\r\n                params.tokenIn == WRAPPED_NATIVE_TOKEN,\r\n                \"BV: only accept Wrapped native token as tokenIn\"\r\n            );\r\n            require(params.tokenOut == token, \"BV: Wrong token out\");\r\n            require(\r\n                params.amountIn == spentAmount,\r\n                \"BV: spent amounts mismatch\"\r\n            );\r\n            require(params.recipient == sender, \"BV: Wrong recipient\");\r\n        } else if (fncSig == ALGEBRA_EXACT_INPUT_SINGLE_SELECTOR) {\r\n            AlgebraExactInputSingleParams memory params = abi.decode(\r\n                funcData,\r\n                (AlgebraExactInputSingleParams)\r\n            );\r\n\r\n            require(\r\n                params.tokenIn == WRAPPED_NATIVE_TOKEN,\r\n                \"BV: only accept Wrapped native token as tokenIn\"\r\n            );\r\n            require(params.tokenOut == token, \"BV: Wrong token out\");\r\n            require(\r\n                params.amountIn == spentAmount,\r\n                \"BV: spent amounts mismatch\"\r\n            );\r\n            require(params.recipient == sender, \"BV: Wrong recipient\");\r\n        } else if (fncSig == UNIV2_SWAP_EXACT_ETH_FOR_TOKENS) {\r\n            (, address[] memory path, address to, ) = abi.decode(\r\n                funcData,\r\n                (uint256, address[], address, uint256)\r\n            );\r\n            require(path[0] == WRAPPED_NATIVE_TOKEN, \"BV: invalid token in\");\r\n            require(path[path.length - 1] == token, \"BV: invalid token out\");\r\n            require(to == sender, \"BV: invalid recipient\");\r\n        } else if (fncSig == UNIV2_SWAP_EXACT_TOKENS_FOR_TOKENS) {\r\n            (uint256 amountIn, , address[] memory path, address to, ) = abi\r\n                .decode(\r\n                    funcData,\r\n                    (uint256, uint256, address[], address, uint256)\r\n                );\r\n            require(amountIn == spentAmount, \"BV: invalid amount in\");\r\n            require(path[0] == WRAPPED_NATIVE_TOKEN, \"BV: invalid token in\");\r\n            require(path[path.length - 1] == token, \"BV: invalid token out\");\r\n            require(to == sender, \"BV: invalid recipient\");\r\n        } else {\r\n            revert(\"BV: Swap function is not supported\");\r\n        }\r\n    }\r\n\r\n    function validateApproveTx(\r\n        bytes memory data,\r\n        address ROUTER\r\n    ) internal pure {\r\n        bytes memory funcData = data.slice(4, data.length - 4);\r\n        (address router, ) = abi.decode(funcData, (address, uint256));\r\n        require(router == ROUTER, \"BV: invalid spender\");\r\n    }\r\n}\r\n"
    },
    "contracts/modules/SwapSessionValidationModules/PreApproveValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\nimport \"solidity-bytes-utils/contracts/BytesLib.sol\";\r\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\r\nimport {UserOperation} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\r\n\r\nlibrary PreApproveValidator {\r\n    using BytesLib for bytes;\r\n\r\n    bytes4 public constant ERC20_APPROVE_SELECTOR = 0x095ea7b3;\r\n    // execute_ncC(address,uint256,bytes)\r\n    bytes4 public constant EXECUTE_OPTIMIZED_SELECTOR = 0x0000189a;\r\n\r\n    /**\r\n     * @dev validates if the _op (UserOperation) matches the SessionKey permissions\r\n     * and that _op has been signed by this SessionKey\r\n     * Please mind the decimals of your exact token when setting maxAmount\r\n     * @param op User Operation to be validated.\r\n     * @param asset erc20 token to approve\r\n     * @return true if the _op is valid, false otherwise.\r\n     */\r\n    function validatePreApprove(\r\n        UserOperation calldata op,\r\n        address asset,\r\n        address ROUTER\r\n    ) internal pure returns (bool) {\r\n        require(\r\n            bytes4(op.callData.slice(0, 4)) == EXECUTE_OPTIMIZED_SELECTOR,\r\n            \"PV: Wrong function selector\"\r\n        );\r\n        (address tokenAddress,, bytes memory data) = abi\r\n            .decode(\r\n                op.callData[4:], // skip selector\r\n                (address, uint256, bytes)\r\n            );\r\n        if (tokenAddress != asset) {\r\n            revert(\"PV: Wrong approved asset\");\r\n        }\r\n        bytes4 fncSig = bytes4(data.slice(0, 4));\r\n\r\n        require(\r\n            fncSig == ERC20_APPROVE_SELECTOR,\r\n            \"PV: wrong function signature\"\r\n        );\r\n        bytes memory funcData = data.slice(4, data.length - 4);\r\n\r\n        (address routerAddr, ) = abi.decode(funcData, (address, uint256));\r\n        require(routerAddr == ROUTER, \"PV: can only approve router\");\r\n\r\n        return true;\r\n    }\r\n}\r\n"
    },
    "contracts/modules/SwapSessionValidationModules/SellValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\nimport \"solidity-bytes-utils/contracts/BytesLib.sol\";\r\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\r\nimport {UserOperation} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\r\n\r\nlibrary SellValidator {\r\n    using BytesLib for bytes;\r\n\r\n    struct ExactOutputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    bytes4 public constant ERC20_APPROVE_SELECTOR = 0x095ea7b3;\r\n    bytes4 public constant EXACT_OUTPUT_SINGLE_SELECTOR = 0xdb3e2198;\r\n    bytes4 public constant UNIV2_SWAP_TOKENS_FOR_EXACT_ETH = 0x4a25d94a;\r\n\r\n    // execute_ncC(address,uint256,bytes)\r\n    bytes4 public constant EXECUTE_OPTIMIZED_SELECTOR = 0x0000189a;\r\n    // function executeBatch_y6U( address[] calldata dest, uint256[] calldata value, bytes[] calldata func)\r\n    bytes4 public constant EXECUTE_BATCH_SELECTOR = 0x00004680;\r\n\r\n    /**\r\n     * @dev validates if the _op (UserOperation) matches the SessionKey permissions\r\n     * and that _op has been signed by this SessionKey\r\n     * Please mind the decimals of your exact token when setting maxAmount\r\n     * @param token the non-native token of the pair\r\n     * @return true if the _op is valid, false otherwise.\r\n     */\r\n    function validateSell(\r\n        UserOperation memory op,\r\n        address token,\r\n        uint256 spentAmount,\r\n        uint256 payment,\r\n        address WRAPPED_NATIVE_TOKEN,\r\n        address ROUTER,\r\n        address FEE_RECIPIENT\r\n    ) internal pure returns (bool) {\r\n        bytes4 opFncSig = bytes4(op.callData.slice(0, 4));\r\n\r\n        bytes memory opData = op.callData.slice(4, op.callData.length - 4);\r\n\r\n        if (opFncSig == EXECUTE_OPTIMIZED_SELECTOR) {\r\n            require(payment == 0, \"SV: no payment required\");\r\n            (address router, , bytes memory data) = abi.decode(\r\n                opData,\r\n                (address, uint256, bytes)\r\n            );\r\n            require(router == ROUTER, \"SV: invalid router\");\r\n            validateSellTx(\r\n                data,\r\n                op.sender,\r\n                token,\r\n                WRAPPED_NATIVE_TOKEN,\r\n                spentAmount\r\n            );\r\n        } else if (opFncSig == EXECUTE_BATCH_SELECTOR) {\r\n            (\r\n                address[] memory addresses,\r\n                uint256[] memory callValues,\r\n                bytes[] memory data\r\n            ) = abi.decode(opData, (address[], uint256[], bytes[]));\r\n\r\n            require(\r\n                addresses.length == callValues.length &&\r\n                    addresses.length == data.length,\r\n                \"SV: invalid tx list's length\"\r\n            );\r\n            uint256 fncNum = addresses.length;\r\n            require(fncNum >= 2 && fncNum <= 3, \"SV: invalid number of txs\");\r\n\r\n            uint256 sellTxIndex;\r\n            if (payment > 0) {\r\n                require(\r\n                    addresses[fncNum - 1] == FEE_RECIPIENT,\r\n                    \"SV: must pay fee\"\r\n                );\r\n                require(\r\n                    callValues[fncNum - 1] == payment,\r\n                    \"SV: invalid payment\"\r\n                );\r\n                sellTxIndex = fncNum - 2;\r\n            } else {\r\n                sellTxIndex = fncNum - 1;\r\n            }\r\n\r\n            require(addresses[sellTxIndex] == ROUTER, \"SV: invalid router\");\r\n            validateSellTx(\r\n                data[sellTxIndex],\r\n                op.sender,\r\n                token,\r\n                WRAPPED_NATIVE_TOKEN,\r\n                spentAmount\r\n            );\r\n\r\n            if (sellTxIndex == 1) {\r\n                require(addresses[0] == token, \"SV: must approve token\");\r\n\r\n                bytes4 fncSig = bytes4(data[0].slice(0, 4));\r\n                require(\r\n                    fncSig == ERC20_APPROVE_SELECTOR,\r\n                    \"SV: Invalid op funtion signature\"\r\n                );\r\n\r\n                bytes memory funcData = data[0].slice(4, data[0].length - 4);\r\n                (address router, ) = abi.decode(funcData, (address, uint256));\r\n                require(router == ROUTER, \"SV: invalid spender\");\r\n            }\r\n        } else {\r\n            revert(\"Invalid op funtion signature\");\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function validateSellTx(\r\n        bytes memory data,\r\n        address sender,\r\n        address token,\r\n        address WRAPPED_NATIVE_TOKEN,\r\n        uint256 spentAmount\r\n    ) internal pure {\r\n        bytes4 fncSig = bytes4(data.slice(0, 4));\r\n\r\n        bytes memory funcData = data.slice(4, data.length - 4);\r\n\r\n        if (fncSig == EXACT_OUTPUT_SINGLE_SELECTOR) {\r\n            ExactOutputSingleParams memory params = abi.decode(\r\n                funcData,\r\n                (ExactOutputSingleParams)\r\n            );\r\n\r\n            require(\r\n                params.tokenOut == WRAPPED_NATIVE_TOKEN,\r\n                \"SV: only accept Wrapped native token as tokenOut\"\r\n            );\r\n            require(params.tokenIn == token, \"SV: Wrong token out\");\r\n            require(\r\n                params.amountOut == spentAmount,\r\n                \"SV: spent amounts mismatch\"\r\n            );\r\n            require(params.recipient == sender, \"SV: Wrong recipient\");\r\n        } else if (fncSig == UNIV2_SWAP_TOKENS_FOR_EXACT_ETH) {\r\n            (uint256 amountOut, , address[] memory path, address to, ) = abi\r\n                .decode(\r\n                    funcData,\r\n                    (uint256, uint256, address[], address, uint256)\r\n                );\r\n            require(amountOut == spentAmount, \"BV: invalid amount in\");\r\n            require(path[0] == token, \"BV: invalid token in\");\r\n            require(\r\n                path[path.length - 1] == WRAPPED_NATIVE_TOKEN,\r\n                \"BV: invalid token out\"\r\n            );\r\n            require(to == sender, \"BV: invalid recipient\");\r\n        } else {\r\n            revert(\"SV: swap function is not supported\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/modules/SwapSessionValidationModules/SwapSessionKeyManagerModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport {BaseAuthorizationModule} from \"../BaseAuthorizationModule.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\nimport \"@account-abstraction/contracts/core/Helpers.sol\";\r\nimport {ISessionKeyManager} from \"../../interfaces/ISessionKeyManager.sol\";\r\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"./BuyValidator.sol\";\r\nimport \"./SellValidator.sol\";\r\nimport \"./PreApproveValidator.sol\";\r\n\r\ninterface ISmartAccount {\r\n    function getOwner(address smartAccount) external view returns (address);\r\n}\r\n\r\ncontract SwapSessionKeyManager is BaseAuthorizationModule {\r\n    address public ECDSA_MODULE_ADDRESS;\r\n    address public WRAPPED_NATIVE_TOKEN;\r\n    address public FEE_RECIPIENT;\r\n    uint48 public constant FEE_RATE_PRECISION = 1e6;\r\n    uint48 public constant HALF_FEE_RATE_PRECISION = 5e5;\r\n    uint48 public FEE_RATE;\r\n    uint256 public FEE_THRESHOLD;\r\n\r\n    constructor(\r\n        address _ECDSA_MODULE_ADDRESS,\r\n        address _WRAPPED_NATIVE_TOKEN,\r\n        address _FEE_RECIPIENT,\r\n        uint48 _FEE_RATE,\r\n        uint256 _FEE_THRESHOLD\r\n    ) {\r\n        ECDSA_MODULE_ADDRESS = _ECDSA_MODULE_ADDRESS;\r\n        WRAPPED_NATIVE_TOKEN = _WRAPPED_NATIVE_TOKEN;\r\n        FEE_RECIPIENT = _FEE_RECIPIENT;\r\n        require(\r\n            _FEE_RATE < FEE_RATE_PRECISION,\r\n            \"Fee rate must be less than 100%\"\r\n        );\r\n        FEE_RATE = _FEE_RATE;\r\n        FEE_THRESHOLD = _FEE_THRESHOLD;\r\n    }\r\n\r\n    /**\r\n     * @dev mapping of owner to a session root\r\n     */\r\n    mapping(address => bytes32) public merkleRoot;\r\n\r\n    /**\r\n     * @dev mapping of owner to trading quota\r\n     */\r\n    mapping(address => uint256) public tradingQuota;\r\n\r\n    /**\r\n     * @dev mapping of session key to accumulated fee\r\n     */\r\n    mapping(address => uint256) public accumulatedFee;\r\n\r\n    function setMerkleRootAndTradingQuota(bytes32 _merkleRoot, uint256 _tradingQuota) external {\r\n        merkleRoot[msg.sender] = _merkleRoot;\r\n        tradingQuota[msg.sender] = _tradingQuota;\r\n    }\r\n\r\n    /**\r\n     * @dev validates userOperation\r\n     * @param userOp User Operation to be validated.\r\n     * @param userOpHash Hash of the User Operation to be validated.\r\n     * @return sigValidationResult 0 if signature is valid, SIG_VALIDATION_FAILED otherwise.\r\n     */\r\n    function validateUserOp(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash\r\n    ) external virtual returns (uint256) {\r\n        address sender = userOp.sender;\r\n        address owner = ISmartAccount(ECDSA_MODULE_ADDRESS).getOwner(sender);\r\n\r\n        (bytes memory moduleSignature, ) = abi.decode(\r\n            userOp.signature,\r\n            (bytes, address)\r\n        );\r\n        (\r\n            uint48 validUntil,\r\n            uint48 validAfter,\r\n            address router,\r\n            address token,\r\n            address sessionKey,\r\n            uint256 maxETHSpend,\r\n            uint256 spentAmount,\r\n            bool approveAll,\r\n            bool isBuyOrder,\r\n            bytes32[] memory merkleProof,\r\n            bytes memory sessionKeySignature\r\n        ) = abi.decode(\r\n                moduleSignature,\r\n                (\r\n                    uint48,\r\n                    uint48,\r\n                    address,\r\n                    address,\r\n                    address,\r\n                    uint256,\r\n                    uint256,\r\n                    bool,\r\n                    bool,\r\n                    bytes32[],\r\n                    bytes\r\n                )\r\n            );\r\n\r\n        bytes32 root = merkleRoot[owner];\r\n\r\n        bytes32 leaf;\r\n        if (!approveAll)\r\n            leaf = keccak256(\r\n                abi.encodePacked(\r\n                    validUntil,\r\n                    validAfter,\r\n                    token,\r\n                    sessionKey,\r\n                    sender,\r\n                    router,\r\n                    maxETHSpend\r\n                )\r\n            );\r\n        else\r\n            leaf = keccak256(\r\n                abi.encodePacked(\r\n                    validUntil,\r\n                    validAfter,\r\n                    sessionKey,\r\n                    sender,\r\n                    router,\r\n                    maxETHSpend\r\n                )\r\n            );\r\n        if (!MerkleProof.verify(merkleProof, root, leaf)) {\r\n            revert(\"SessionNotApproved\");\r\n        }\r\n\r\n        bool validSig = ECDSA.recover(\r\n            ECDSA.toEthSignedMessageHash(userOpHash),\r\n            sessionKeySignature\r\n        ) == sessionKey;\r\n\r\n        bool validOp;\r\n\r\n        if (spentAmount > 0) {\r\n            require(\r\n                token != address(0) && token != WRAPPED_NATIVE_TOKEN,\r\n                \"Specified token must be non-native\"\r\n            );\r\n\r\n            if (spentAmount > maxETHSpend)\r\n                revert(\"Maximum ETH per tx exceeded\");\r\n            uint256 currentTradingQuota = tradingQuota[owner];\r\n            if (spentAmount > currentTradingQuota)\r\n                revert(\"Trading quota exceeded\");\r\n            tradingQuota[owner] = currentTradingQuota - spentAmount;\r\n\r\n            uint256 fee = (spentAmount * FEE_RATE + HALF_FEE_RATE_PRECISION) /\r\n                FEE_RATE_PRECISION;\r\n\r\n            uint256 currentAccumulatedFee = accumulatedFee[sessionKey] + fee;\r\n            uint256 payment;\r\n            if (currentAccumulatedFee >= FEE_THRESHOLD) {\r\n                payment = currentAccumulatedFee;\r\n                accumulatedFee[sessionKey] = 0;\r\n            } else {\r\n                payment = 0;\r\n                accumulatedFee[sessionKey] = currentAccumulatedFee;\r\n            }\r\n\r\n            if (isBuyOrder) {\r\n                validOp = BuyValidator.validateBuy(\r\n                    userOp,\r\n                    token,\r\n                    spentAmount,\r\n                    payment,\r\n                    WRAPPED_NATIVE_TOKEN,\r\n                    router,\r\n                    FEE_RECIPIENT\r\n                );\r\n            } else {\r\n                validOp = SellValidator.validateSell(\r\n                    userOp,\r\n                    token,\r\n                    spentAmount,\r\n                    payment,\r\n                    WRAPPED_NATIVE_TOKEN,\r\n                    router,\r\n                    FEE_RECIPIENT\r\n                );\r\n            }\r\n        } else {\r\n            // approve\r\n            validOp = PreApproveValidator.validatePreApprove(\r\n                userOp,\r\n                token,\r\n                router\r\n            );\r\n        }\r\n\r\n        return\r\n            _packValidationData(\r\n                //_packValidationData expects true if sig validation has failed, false otherwise\r\n                !(validOp && validSig),\r\n                validUntil,\r\n                validAfter\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev returns the SessionStorage object for a given owner\r\n     * @param owner owner address\r\n     */\r\n    function getSessionRoot(address owner) external view returns (bytes32) {\r\n        return merkleRoot[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev returns the accumulated fee of a given sessionKey\r\n     * @param sessionKey sessionKey address\r\n     */\r\n    function getAccumulatedFee(\r\n        address sessionKey\r\n    ) external view returns (uint256) {\r\n        return accumulatedFee[sessionKey];\r\n    }\r\n\r\n    /**\r\n     * @dev isValidSignature according to BaseAuthorizationModule\r\n     * @param _dataHash Hash of the data to be validated.\r\n     * @param _signature Signature over the the _dataHash.\r\n     * @return always returns 0xffffffff as signing messages is not supported by SessionKeys\r\n     */\r\n    function isValidSignature(\r\n        bytes32 _dataHash,\r\n        bytes memory _signature\r\n    ) public pure override returns (bytes4) {\r\n        (_dataHash, _signature);\r\n        return 0xffffffff; // do not support it here\r\n    }\r\n}\r\n"
    },
    "contracts/paymasters/BasePaymaster.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.17;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {IPaymaster} from \"@account-abstraction/contracts/interfaces/IPaymaster.sol\";\r\nimport {IEntryPoint} from \"@account-abstraction/contracts/interfaces/IEntryPoint.sol\";\r\nimport {UserOperation} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\r\nimport {BaseSmartAccountErrors} from \"../common/Errors.sol\";\r\nimport \"@account-abstraction/contracts/core/Helpers.sol\";\r\n\r\n/**\r\n * Helper class for creating a paymaster.\r\n * provides helper methods for staking.\r\n * validates that the postOp is called only by the ENTRY_POINT\r\n @notice Could have Ownable2Step\r\n */\r\nabstract contract BasePaymaster is IPaymaster, Ownable, BaseSmartAccountErrors {\r\n    IEntryPoint public immutable ENTRY_POINT;\r\n\r\n    constructor(address _owner, IEntryPoint _entryPoint) {\r\n        ENTRY_POINT = _entryPoint;\r\n        _transferOwnership(_owner);\r\n    }\r\n\r\n    /**\r\n     * add a deposit for this paymaster, used for paying for transaction fees\r\n     */\r\n    function deposit() external payable virtual;\r\n\r\n    /// @inheritdoc IPaymaster\r\n    function postOp(\r\n        PostOpMode mode,\r\n        bytes calldata context,\r\n        uint256 actualGasCost\r\n    ) external override {\r\n        _requireFromEntryPoint();\r\n        _postOp(mode, context, actualGasCost);\r\n    }\r\n\r\n    /// @inheritdoc IPaymaster\r\n    function validatePaymasterUserOp(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash,\r\n        uint256 maxCost\r\n    ) external override returns (bytes memory context, uint256 validationData) {\r\n        _requireFromEntryPoint();\r\n        return _validatePaymasterUserOp(userOp, userOpHash, maxCost);\r\n    }\r\n\r\n    /**\r\n     * withdraw value from the deposit\r\n     * @param withdrawAddress target to send to\r\n     * @param amount to withdraw\r\n     */\r\n    function withdrawTo(\r\n        address payable withdrawAddress,\r\n        uint256 amount\r\n    ) external virtual;\r\n\r\n    /**\r\n     * add stake for this paymaster.\r\n     * This method can also carry eth value to add to the current stake.\r\n     * @param unstakeDelaySec - the unstake delay for this paymaster. Can only be increased.\r\n     */\r\n    function addStake(uint32 unstakeDelaySec) external payable onlyOwner {\r\n        ENTRY_POINT.addStake{value: msg.value}(unstakeDelaySec);\r\n    }\r\n\r\n    /**\r\n     * unlock the stake, in order to withdraw it.\r\n     * The paymaster can't serve requests once unlocked, until it calls addStake again\r\n     */\r\n    function unlockStake() external onlyOwner {\r\n        ENTRY_POINT.unlockStake();\r\n    }\r\n\r\n    /**\r\n     * withdraw the entire paymaster's stake.\r\n     * stake must be unlocked first (and then wait for the unstakeDelay to be over)\r\n     * @param withdrawAddress the address to send withdrawn value.\r\n     */\r\n    function withdrawStake(address payable withdrawAddress) external onlyOwner {\r\n        ENTRY_POINT.withdrawStake(withdrawAddress);\r\n    }\r\n\r\n    /**\r\n     * return current paymaster's deposit on the ENTRY_POINT.\r\n     */\r\n    function getDeposit() public view returns (uint256) {\r\n        return ENTRY_POINT.balanceOf(address(this));\r\n    }\r\n\r\n    function _validatePaymasterUserOp(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash,\r\n        uint256 maxCost\r\n    ) internal virtual returns (bytes memory context, uint256 validationData);\r\n\r\n    /**\r\n     * post-operation handler.\r\n     * (verified to be called only through the ENTRY_POINT)\r\n     * @dev if subclass returns a non-empty context from validatePaymasterUserOp, it must also implement this method.\r\n     * @param mode enum with the following options:\r\n     *      opSucceeded - user operation succeeded.\r\n     *      opReverted  - user op reverted. still has to pay for gas.\r\n     *      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.\r\n     *                       Now this is the 2nd call, after user's op was deliberately reverted.\r\n     * @param context - the context value returned by validatePaymasterUserOp\r\n     * @param actualGasCost - actual gas used so far (without this postOp call).\r\n     */\r\n    function _postOp(\r\n        PostOpMode mode,\r\n        bytes calldata context,\r\n        uint256 actualGasCost\r\n    ) internal virtual {\r\n        (mode, context, actualGasCost); // unused params\r\n        // subclass must override this method if validatePaymasterUserOp returns a context\r\n        revert(\"must override\");\r\n    }\r\n\r\n    /// validate the call is made from a valid entrypoint\r\n    function _requireFromEntryPoint() internal virtual {\r\n        if (msg.sender != address(ENTRY_POINT))\r\n            revert CallerIsNotAnEntryPoint(msg.sender);\r\n    }\r\n}\r\n"
    },
    "contracts/paymasters/interfaces/ILuminexRouterV1.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.0;\r\n\r\ninterface ILuminexRouterV1 {\r\n    function swapExactTokensForROSE(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function getAmountsOut(\r\n        uint amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n}\r\n"
    },
    "contracts/paymasters/interfaces/ILuminexV1Factory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./ILuminexV1Pair.sol\";\r\n\r\ninterface ILuminexV1Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint\r\n    );\r\n\r\n    function feeFreePairs(address pair) external view returns (bool);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (ILuminexV1Pair pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n"
    },
    "contracts/paymasters/interfaces/ILuminexV1Pair.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.0;\r\n\r\ninterface ILuminexV1Pair {\r\n    event Mint(address sender, uint amount0, uint amount1);\r\n    event Burn(address sender, uint amount0, uint amount1, address to);\r\n    event Swap(\r\n        address sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n"
    },
    "contracts/paymasters/interfaces/IWrappedNative.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.17;\r\n\r\ninterface IWETH {\r\n    function withdraw(uint256 wad) external;\r\n}\r\n"
    },
    "contracts/paymasters/PaymasterHelpers.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.17;\r\n\r\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport {UserOperation} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\r\n\r\nstruct PaymasterData {\r\n    address paymasterId;\r\n    uint48 validUntil;\r\n    uint48 validAfter;\r\n    bytes signature;\r\n    uint256 signatureLength;\r\n}\r\n\r\nstruct PaymasterContext {\r\n    address paymasterId;\r\n    // could add maxFeePerGas and maxPriorityFeePerGas if needed\r\n    // by making approprate changes in paymaster contract\r\n}\r\n\r\n/**\r\n * @title PaymasterHelpers - helper functions for paymasters\r\n */\r\nlibrary PaymasterHelpers {\r\n    using ECDSA for bytes32;\r\n\r\n    /**\r\n     * @dev Encodes the paymaster context: paymasterId and gasPrice\r\n     * @param data PaymasterData passed\r\n     */\r\n    function paymasterContext(\r\n        PaymasterData memory data\r\n    )\r\n        internal\r\n        pure\r\n        returns (\r\n            // Could add maxFeePerGas and maxPriorityFeePerGas if needed\r\n            bytes memory context\r\n        )\r\n    {\r\n        return abi.encode(data.paymasterId);\r\n    }\r\n\r\n    /**\r\n     * @dev Decodes paymaster data assuming it follows PaymasterData\r\n     */\r\n    function decodePaymasterData(\r\n        UserOperation calldata op\r\n    ) internal pure returns (PaymasterData memory) {\r\n        bytes calldata paymasterAndData = op.paymasterAndData;\r\n        (\r\n            address paymasterId,\r\n            uint48 validUntil,\r\n            uint48 validAfter,\r\n            bytes memory signature\r\n        ) = abi.decode(paymasterAndData[20:], (address, uint48, uint48, bytes));\r\n        return\r\n            PaymasterData(\r\n                paymasterId,\r\n                validUntil,\r\n                validAfter,\r\n                signature,\r\n                signature.length\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Decodes paymaster context assuming it follows PaymasterContext\r\n     */\r\n    function decodePaymasterContext(\r\n        bytes memory context\r\n    ) internal pure returns (PaymasterContext memory) {\r\n        address paymasterId = abi.decode(context, (address));\r\n        return PaymasterContext(paymasterId);\r\n    }\r\n}\r\n"
    },
    "contracts/paymasters/TokenPaymaster.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.17;\r\n\r\n// Import the required libraries and contracts\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\";\r\nimport \"@account-abstraction/contracts/core/BasePaymaster.sol\";\r\nimport \"./utils/LuminexSwapHelper.sol\";\r\n\r\n/**\r\n * @title TokenPaymaster\r\n * @notice This Paymaster covers gas fees in exchange for ERC20 tokens charged using allowance pre-issued by ERC-4337 accounts.\r\n * The contract refunds excess tokens if the actual gas cost is lower than the initially provided amount.\r\n * The token price cannot be queried in the validation code due to storage access restrictions of ERC-4337.\r\n * It is theoretically possible the token has depreciated so much since the last 'postOp' the refund becomes negative.\r\n * The contract reverts the inner user transaction in that case but keeps the charge.\r\n * The contract also allows honest clients to prepay tokens at a higher price to avoid getting reverted.\r\n * It also allows updating price configuration and withdrawing tokens by the contract owner.\r\n * @dev Inherits from BasePaymaster.\r\n */\r\ncontract TokenPaymaster is BasePaymaster, LuminexSwapHelper {\r\n    struct TokenPaymasterConfig {\r\n        /// @notice Estimated gas cost for refunding tokens after the transaction is completed\r\n        uint48 refundPostopCost;\r\n        /// @notice Expected minimum amount of native tokens to be exchanged in a ERC20 to native token swap when refill EntryPoint deposit\r\n        uint256 minSwapAmount;\r\n    }\r\n\r\n    // List of supported ERC20 tokens to be used for charging gas fees\r\n    mapping(address => bool) public tokenSupport;\r\n    mapping(address => uint256) public tokenToOrdinal;\r\n    mapping(uint256 => address) public ordinalToToken;\r\n\r\n    uint256 public countTokenSupport;\r\n    uint256 public totalToken;\r\n\r\n    address[] public listTokenSupport;\r\n\r\n    event ConfigUpdated(TokenPaymasterConfig tokenPaymasterConfig);\r\n\r\n    event UserOperationSponsored(\r\n        address indexed user,\r\n        uint256 actualTokenCharge,\r\n        uint256 actualGasCost\r\n    );\r\n\r\n    event Received(address indexed sender, uint256 value);\r\n\r\n    TokenPaymasterConfig public tokenPaymasterConfig;\r\n\r\n    /// @notice Initializes the TokenPaymaster contract with the given parameters.\r\n    /// @param _entryPoint The EntryPoint contract used in the Account Abstraction infrastructure.\r\n    /// @param _wrappedNative The ERC-20 token that wraps the native asset for current chain.\r\n    /// @param _luminexRouterV1 The LuminexRouterV1 contract used for token swaps.\r\n    /// @param _tokenPaymasterConfig The configuration for the Token Paymaster.\r\n    /// @param _owner The address that will be set as the owner of the contract.\r\n    constructor(\r\n        IEntryPoint _entryPoint,\r\n        IERC20 _wrappedNative,\r\n        ILuminexRouterV1 _luminexRouterV1,\r\n        TokenPaymasterConfig memory _tokenPaymasterConfig,\r\n        address _owner\r\n    )\r\n        BasePaymaster(_entryPoint)\r\n        LuminexSwapHelper(address(_luminexRouterV1), address(_wrappedNative))\r\n    {\r\n        setTokenPaymasterConfig(_tokenPaymasterConfig);\r\n        transferOwnership(_owner);\r\n    }\r\n\r\n    /// @notice Adds support for an ERC20 token to be used for charging gas fees.\r\n    /// @param token The address of the ERC20 token to be supported.\r\n    function addERC20Support(address token) public onlyOwner {\r\n        if (tokenSupport[token]) revert(\"token was enabled\");\r\n\r\n        if (tokenToOrdinal[token] == 0) {\r\n            // add new token\r\n            totalToken++;\r\n            countTokenSupport++;\r\n            tokenToOrdinal[token] = totalToken;\r\n            ordinalToToken[totalToken] = token;\r\n            tokenSupport[token] = true;\r\n        } else {\r\n            // change state\r\n            countTokenSupport++;\r\n            tokenSupport[token] = true;\r\n        }\r\n    }\r\n\r\n    function removeERC20Support(address token) public onlyOwner {\r\n        require(tokenSupport[token], \"Token was removed\");\r\n        countTokenSupport--;\r\n        tokenSupport[token] = false;\r\n    }\r\n\r\n    function getListTokenSupport()\r\n        public\r\n        view\r\n        returns (address[] memory result)\r\n    {\r\n        result = new address[](countTokenSupport);\r\n        uint256 j = 0;\r\n        for (uint256 i = 1; i <= totalToken; i++) {\r\n            if (tokenSupport[ordinalToToken[i]] == true) {\r\n                result[j] = ordinalToToken[i];\r\n                j++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /// @notice Updates the configuration for the Token Paymaster.\r\n    /// @param _tokenPaymasterConfig The new configuration struct.\r\n    function setTokenPaymasterConfig(\r\n        TokenPaymasterConfig memory _tokenPaymasterConfig\r\n    ) public onlyOwner {\r\n        tokenPaymasterConfig = _tokenPaymasterConfig;\r\n        emit ConfigUpdated(_tokenPaymasterConfig);\r\n    }\r\n\r\n    /// @notice Allows the contract owner to withdraw a specified amount of tokens from the contract.\r\n    /// @param token The ERC20 token to withdraw.\r\n    /// @param to The address to transfer the tokens to.\r\n    /// @param amount The amount of tokens to transfer.\r\n    function withdrawToken(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        SafeERC20.safeTransfer(token, to, amount);\r\n    }\r\n\r\n    /// @notice Validates a paymaster user operation and calculates the required token amount for the transaction.\r\n    /// @param userOp The user operation data.\r\n    /// @param requiredPreFund The maximum cost (in native token) the paymaster has to prefund.\r\n    /// @return context The context containing the token amount and user sender address (if applicable).\r\n    /// @return validationResult A uint256 value indicating the result of the validation (always 0 in this implementation).\r\n    function _validatePaymasterUserOp(\r\n        UserOperation calldata userOp,\r\n        bytes32,\r\n        uint256 requiredPreFund\r\n    )\r\n        internal\r\n        override\r\n        returns (bytes memory context, uint256 validationResult)\r\n    {\r\n        unchecked {\r\n            uint256 maxFeePerGas = userOp.maxFeePerGas;\r\n            uint256 refundPostopCost = tokenPaymasterConfig.refundPostopCost;\r\n            uint256 postOpGasLimit = uint128(\r\n                bytes16(userOp.paymasterAndData[36:52])\r\n            );\r\n            require(\r\n                refundPostopCost < postOpGasLimit,\r\n                \"TPM: postOpGasLimit too low\"\r\n            );\r\n\r\n            uint256 preChargeNative = requiredPreFund +\r\n                (refundPostopCost * maxFeePerGas);\r\n            address token = address(bytes20(userOp.paymasterAndData[52:72]));\r\n            uint256 tokenAmount = 0;\r\n            if (token == address(wrappedNative)) {\r\n                tokenAmount = preChargeNative;\r\n            } else {\r\n                require(tokenSupport[token], \"Token not support\");\r\n                tokenAmount = estimateNativeToToken(token, preChargeNative);\r\n            }\r\n\r\n            SafeERC20.safeTransferFrom(\r\n                IERC20(token),\r\n                userOp.sender,\r\n                address(this),\r\n                tokenAmount\r\n            );\r\n\r\n            context = abi.encode(\r\n                tokenAmount,\r\n                token,\r\n                userOp.sender,\r\n                userOp.maxFeePerGas\r\n            );\r\n\r\n            validationResult = 0;\r\n        }\r\n    }\r\n\r\n    /// @notice Performs post-operation tasks, such as updating the token price and refunding excess tokens.\r\n    /// @dev This function is called after a user operation has been executed or reverted.\r\n    /// @param context The context containing the token amount and user sender address.\r\n    /// @param actualGasCost The actual gas cost of the transaction.\r\n    //      It is not the same as tx.gasprice, which is what the bundler pays.\r\n\r\n    function _postOp(\r\n        PostOpMode,\r\n        bytes calldata context,\r\n        uint256 actualGasCost\r\n    ) internal override {\r\n        unchecked {\r\n            (\r\n                uint256 preCharge,\r\n                address token,\r\n                address userOpSender,\r\n                uint256 actualUserOpFeePerGas\r\n            ) = abi.decode(context, (uint256, address, address, uint256));\r\n\r\n            // Refund tokens based on actual gas cost\r\n            uint256 actualChargeNative = actualGasCost +\r\n                tokenPaymasterConfig.refundPostopCost *\r\n                actualUserOpFeePerGas;\r\n\r\n            uint256 actualTokenNeeded = 0;\r\n\r\n            // if the token is wrapped native token, the actual token needed is the actual native token charged\r\n            if (token == address(wrappedNative)) {\r\n                actualTokenNeeded = actualChargeNative;\r\n                // otherwise, estimate the token needed using router helper\r\n            } else {\r\n                actualTokenNeeded = estimateNativeToToken(\r\n                    token,\r\n                    actualChargeNative\r\n                );\r\n            }\r\n\r\n            if (preCharge > actualTokenNeeded) {\r\n                // If the initially provided token amount is greater than the actual amount needed, refund the difference\r\n                SafeERC20.safeTransfer(\r\n                    IERC20(token),\r\n                    userOpSender,\r\n                    preCharge - actualTokenNeeded\r\n                );\r\n            } else if (preCharge < actualTokenNeeded) {\r\n                // Attempt to cover Paymaster's gas expenses by withdrawing the 'overdraft' from the client\r\n                // If the transfer reverts also revert the 'postOp' to remove the incentive to cheat\r\n                SafeERC20.safeTransferFrom(\r\n                    IERC20(token),\r\n                    userOpSender,\r\n                    address(this),\r\n                    actualTokenNeeded - preCharge\r\n                );\r\n            }\r\n\r\n            emit UserOperationSponsored(\r\n                userOpSender,\r\n                actualTokenNeeded,\r\n                actualGasCost\r\n            );\r\n\r\n            refillEntryPointDeposit(token);\r\n        }\r\n    }\r\n\r\n    /// @notice If necessary this function uses this Paymaster's token balance to refill the deposit on EntryPoint\r\n    /// @param token The ERC20 token address to be used for refilling the deposit\r\n    function refillEntryPointDeposit(address token) private {\r\n        // if the ERC20 token is wrapped native token and paymaster's balance of that token is greater than minSwapAmount, unwrap and deposit to entry point\r\n        if (address(token) == address(wrappedNative)) {\r\n            if (\r\n                IERC20(token).balanceOf(address(this)) >\r\n                tokenPaymasterConfig.minSwapAmount\r\n            ) {\r\n                unwrapWeth(IERC20(token).balanceOf(address(this)));\r\n                entryPoint.depositTo{value: address(this).balance}(\r\n                    address(this)\r\n                );\r\n            }\r\n        } else {\r\n            // if the ERC20 token is not wrapped native token and paymaster's balance of that token is greater than minSwapAmount, swap and deposit to entry point\r\n            uint256 tokenBalance = IERC20(token).balanceOf(address(this));\r\n\r\n            uint256 estimateReceiveNative = estimateTokenToNative(\r\n                token,\r\n                tokenBalance\r\n            );\r\n\r\n            if (estimateReceiveNative > tokenPaymasterConfig.minSwapAmount) {\r\n                _swapTokenToNative(token, tokenBalance);\r\n                entryPoint.depositTo{value: address(this).balance}(\r\n                    address(this)\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    receive() external payable {\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n\r\n    /// @notice For contract owner to withdraw ETH from the contract\r\n    /// @param recipient The address to transfer the ETH to\r\n    /// @param amount The amount of ETH to transfer\r\n    function withdrawEth(\r\n        address payable recipient,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"withdraw failed\");\r\n    }\r\n}\r\n"
    },
    "contracts/paymasters/utils/LuminexSwapHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.17;\r\nimport \"../interfaces/ILuminexRouterV1.sol\";\r\nimport \"../interfaces/IWrappedNative.sol\";\r\n\r\n/**\r\n * @title LuminexSwapHelper\r\n * @notice Helper contract to interact with LuminexRouterV1 for swapping native token to ERC20 token and vice versa\r\n */\r\nabstract contract LuminexSwapHelper {\r\n    address public immutable luminexRouterV1;\r\n    address public immutable wrappedNative;\r\n\r\n    /// @param _luminexRouterV1 LuminexRouterV1 contract address\r\n    /// @param _wrappnative Wrapped native token contract address\r\n    constructor(address _luminexRouterV1, address _wrappnative) {\r\n        luminexRouterV1 = _luminexRouterV1;\r\n        wrappedNative = _wrappnative;\r\n    }\r\n\r\n    /// @notice estimate ERC20 token receive in exchange with amountIn of native token by calling LuminexRouterV1\r\n    /// @param token ERC20 token address\r\n    /// @param amountIn amount of native token\r\n    /// @return amountOut amount of ERC20 token receive in exchange with amountIn of native token\r\n    function estimateNativeToToken(\r\n        address token,\r\n        uint256 amountIn\r\n    ) public view returns (uint256 amountOut) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = wrappedNative;\r\n        path[1] = token;\r\n        uint256[] memory result = ILuminexRouterV1(luminexRouterV1)\r\n            .getAmountsOut(amountIn, path);\r\n        amountOut = result[1];\r\n    }\r\n\r\n    /// @notice estimate native token receive in exchange with amountIn of ERC20 token by calling LuminexRouterV1\r\n    /// @param token ERC20 token address\r\n    /// @param amountIn amount of ERC20 token\r\n    /// @return amountOut amount of native token receive in exchange with amountIn of ERC20 token\r\n    function estimateTokenToNative(\r\n        address token,\r\n        uint256 amountIn\r\n    ) public view returns (uint256 amountOut) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = token;\r\n        path[1] = wrappedNative;\r\n        uint256[] memory result = ILuminexRouterV1(luminexRouterV1)\r\n            .getAmountsOut(amountIn, path);\r\n        amountOut = result[1];\r\n    }\r\n\r\n    /// @notice swap native token to ERC20 token by calling LuminexRouterV1\r\n    /// @param token ERC20 token address\r\n    /// @param amountIn amount of native token\r\n    function _swapTokenToNative(address token, uint256 amountIn) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = token;\r\n        path[1] = wrappedNative;\r\n        ILuminexRouterV1(luminexRouterV1).swapExactTokensForROSE(\r\n            amountIn,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /// @notice unwrap WETH by withdrawing\r\n    /// @param amount amount of WETH to withdraw\r\n    function unwrapWeth(uint256 amount) internal {\r\n        IWETH(address(wrappedNative)).withdraw(amount);\r\n    }\r\n}\r\n"
    },
    "contracts/paymasters/verifying/singleton/VerifyingSingletonPaymaster.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.17;\r\n\r\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport {UserOperation, UserOperationLib} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\r\nimport \"../../BasePaymaster.sol\";\r\nimport {PaymasterHelpers, PaymasterData, PaymasterContext} from \"../../PaymasterHelpers.sol\";\r\nimport {SingletonPaymasterErrors} from \"../../../common/Errors.sol\";\r\n\r\n/**\r\n * @title A sample paymaster that uses external service to decide whether to pay for the UserOp.\r\n * @dev The paymaster trusts an external signer to sign the transaction.\r\n * The calling user must pass the UserOp to that external signer first, which performs whatever\r\n * off-chain verification before signing the UserOp.\r\n * @notice That this signature is NOT a replacement for wallet signature:\r\n *  - The paymaster signs to agree to PAY for GAS.\r\n *  - The wallet signs to prove identity and wallet ownership.\r\n */\r\ncontract VerifyingSingletonPaymaster is\r\n    BasePaymaster,\r\n    ReentrancyGuard,\r\n    SingletonPaymasterErrors\r\n{\r\n    using ECDSA for bytes32;\r\n    using UserOperationLib for UserOperation;\r\n    using PaymasterHelpers for UserOperation;\r\n    using PaymasterHelpers for bytes;\r\n    using PaymasterHelpers for PaymasterData;\r\n\r\n    // Gas used in EntryPoint._handlePostOp() method (including this#postOp() call)\r\n    uint256 private _unaccountedEPGasOverhead;\r\n    mapping(address => uint256) public paymasterIdBalances;\r\n\r\n    address public verifyingSigner;\r\n\r\n    event EPGasOverheadChanged(\r\n        uint256 indexed _oldValue,\r\n        uint256 indexed _newValue\r\n    );\r\n\r\n    event VerifyingSignerChanged(\r\n        address indexed _oldSigner,\r\n        address indexed _newSigner,\r\n        address indexed _actor\r\n    );\r\n    event GasDeposited(address indexed _paymasterId, uint256 indexed _value);\r\n    event GasWithdrawn(\r\n        address indexed _paymasterId,\r\n        address indexed _to,\r\n        uint256 indexed _value\r\n    );\r\n    event GasBalanceDeducted(\r\n        address indexed _paymasterId,\r\n        uint256 indexed _charge\r\n    );\r\n\r\n    constructor(\r\n        address _owner,\r\n        IEntryPoint _entryPoint,\r\n        address _verifyingSigner\r\n    ) payable BasePaymaster(_owner, _entryPoint) {\r\n        if (address(_entryPoint) == address(0)) revert EntryPointCannotBeZero();\r\n        if (_verifyingSigner == address(0))\r\n            revert VerifyingSignerCannotBeZero();\r\n        assembly {\r\n            sstore(verifyingSigner.slot, _verifyingSigner)\r\n        }\r\n        _unaccountedEPGasOverhead = 9600;\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit funds for a given paymasterId to cover transaction fees.\r\n     * @param paymasterId Identifier of the dapp receiving the deposit.\r\n     */\r\n    function depositFor(address paymasterId) external payable nonReentrant {\r\n        if (paymasterId == address(0)) revert PaymasterIdCannotBeZero();\r\n        if (msg.value == 0) revert DepositCanNotBeZero();\r\n        paymasterIdBalances[paymasterId] =\r\n            paymasterIdBalances[paymasterId] +\r\n            msg.value;\r\n        ENTRY_POINT.depositTo{value: msg.value}(address(this));\r\n        emit GasDeposited(paymasterId, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Set a new verifying signer address.\r\n     * Can only be called by the owner of the contract.\r\n     * @param _newVerifyingSigner The new address to be set as the verifying signer.\r\n     * @notice If _newVerifyingSigner is set to zero address, it will revert with an error.\r\n     * After setting the new signer address, it will emit an event VerifyingSignerChanged.\r\n     */\r\n    function setSigner(address _newVerifyingSigner) external payable onlyOwner {\r\n        if (_newVerifyingSigner == address(0))\r\n            revert VerifyingSignerCannotBeZero();\r\n        address oldSigner = verifyingSigner;\r\n        assembly {\r\n            sstore(verifyingSigner.slot, _newVerifyingSigner)\r\n        }\r\n        emit VerifyingSignerChanged(oldSigner, _newVerifyingSigner, msg.sender);\r\n    }\r\n\r\n    function setUnaccountedEPGasOverhead(uint256 value) external onlyOwner {\r\n        uint256 oldValue = _unaccountedEPGasOverhead;\r\n        _unaccountedEPGasOverhead = value;\r\n        emit EPGasOverheadChanged(oldValue, value);\r\n    }\r\n\r\n    /**\r\n     * @dev get the current deposit for paymasterId (Dapp Depositor address)\r\n     * @param paymasterId dapp identifier\r\n     */\r\n    function getBalance(\r\n        address paymasterId\r\n    ) external view returns (uint256 balance) {\r\n        balance = paymasterIdBalances[paymasterId];\r\n    }\r\n\r\n    /**\r\n     @dev Override the default implementation.\r\n     */\r\n    function deposit() public payable virtual override {\r\n        revert(\"user DepositFor instead\");\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws specified gas tokens from paymaster's balance to a given address.\r\n     * @param withdrawAddress Address receiving the gas tokens.\r\n     * @param amount Amount of gas tokens to withdraw.\r\n     */\r\n    function withdrawTo(\r\n        address payable withdrawAddress,\r\n        uint256 amount\r\n    ) public override nonReentrant {\r\n        if (withdrawAddress == address(0)) revert CanNotWithdrawToZeroAddress();\r\n        uint256 currentBalance = paymasterIdBalances[msg.sender];\r\n        if (amount > currentBalance)\r\n            revert InsufficientBalance(amount, currentBalance);\r\n        paymasterIdBalances[msg.sender] =\r\n            paymasterIdBalances[msg.sender] -\r\n            amount;\r\n        ENTRY_POINT.withdrawTo(withdrawAddress, amount);\r\n        emit GasWithdrawn(msg.sender, withdrawAddress, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by off-chain service for signing, and on-chain in validatePaymasterUserOp for validation.\r\n     * @notice Signature covers all UserOperation fields except \"paymasterAndData\" which carries the signature.\r\n     * @return Hash to sign off-chain and validate on-chain.\r\n     */\r\n    function getHash(\r\n        UserOperation calldata userOp,\r\n        address paymasterId,\r\n        uint48 validUntil,\r\n        uint48 validAfter\r\n    ) public view returns (bytes32) {\r\n        // can't use userOp.hash(), since it contains also the paymasterAndData itself.\r\n        address sender = userOp.getSender();\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    sender,\r\n                    userOp.nonce,\r\n                    keccak256(userOp.initCode),\r\n                    keccak256(userOp.callData),\r\n                    userOp.callGasLimit,\r\n                    userOp.verificationGasLimit,\r\n                    userOp.preVerificationGas,\r\n                    userOp.maxFeePerGas,\r\n                    userOp.maxPriorityFeePerGas,\r\n                    block.chainid,\r\n                    address(this),\r\n                    paymasterId,\r\n                    validUntil,\r\n                    validAfter\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Executes the paymaster's payment conditions\r\n     * @param mode tells whether the op succeeded, reverted, or if the op succeeded but cause the postOp to revert\r\n     * @param context payment conditions signed by the paymaster in `validatePaymasterUserOp`\r\n     * @param actualGasCost amount to be paid to the entry point in wei\r\n     */\r\n    function _postOp(\r\n        PostOpMode mode,\r\n        bytes calldata context,\r\n        uint256 actualGasCost\r\n    ) internal virtual override {\r\n        (mode);\r\n        PaymasterContext memory data = context.decodePaymasterContext();\r\n        address extractedPaymasterId = data.paymasterId;\r\n        uint256 balToDeduct = actualGasCost +\r\n            _unaccountedEPGasOverhead *\r\n            tx.gasprice;\r\n        paymasterIdBalances[extractedPaymasterId] =\r\n            paymasterIdBalances[extractedPaymasterId] -\r\n            balToDeduct;\r\n        emit GasBalanceDeducted(extractedPaymasterId, balToDeduct);\r\n    }\r\n\r\n    /**\r\n     * @dev Verify that an external signer signed the paymaster data of a user operation.\r\n     * The paymaster data is expected to be the paymaster and a signature over the entire request parameters.\r\n     * @param userOp The UserOperation struct that represents the current user operation.\r\n     * userOpHash The hash of the UserOperation struct.\r\n     * @param requiredPreFund The required amount of pre-funding for the paymaster.\r\n     * @return context A context string returned by the entry point after successful validation.\r\n     * @return validationData An integer returned by the entry point after successful validation.\r\n     */\r\n    function _validatePaymasterUserOp(\r\n        UserOperation calldata userOp,\r\n        bytes32 /*userOpHash*/,\r\n        uint256 requiredPreFund\r\n    )\r\n        internal\r\n        view\r\n        override\r\n        returns (bytes memory context, uint256 validationData)\r\n    {\r\n        PaymasterData memory paymasterData = userOp.decodePaymasterData();\r\n        bytes32 hash = getHash(\r\n            userOp,\r\n            paymasterData.paymasterId,\r\n            paymasterData.validUntil,\r\n            paymasterData.validAfter\r\n        );\r\n        uint256 sigLength = paymasterData.signatureLength;\r\n        // Ensure revert reason is from \"VerifyingPaymaster\" not \"ECDSA\" on invalid signature.\r\n\r\n        if (sigLength != 65) revert InvalidPaymasterSignatureLength(sigLength);\r\n        // Don't revert on signature failure: return SIG_VALIDATION_FAILED.\r\n        if (\r\n            verifyingSigner !=\r\n            hash.toEthSignedMessageHash().recover(paymasterData.signature)\r\n        ) {\r\n            // Empty context and sigFailed with time range provided\r\n            return (\r\n                \"\",\r\n                _packValidationData(\r\n                    true,\r\n                    paymasterData.validUntil,\r\n                    paymasterData.validAfter\r\n                )\r\n            );\r\n        }\r\n        if (requiredPreFund > paymasterIdBalances[paymasterData.paymasterId])\r\n            revert InsufficientBalance(\r\n                requiredPreFund,\r\n                paymasterIdBalances[paymasterData.paymasterId]\r\n            );\r\n        return (\r\n            PaymasterHelpers.paymasterContext(paymasterData),\r\n            _packValidationData(\r\n                false,\r\n                paymasterData.validUntil,\r\n                paymasterData.validAfter\r\n            )\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @title Proxy // This is the user's Smart Account\r\n * @notice Basic proxy that delegates all calls to a fixed implementation contract.\r\n * @dev    Implementation address is stored in the slot defined by the Proxy's address\r\n */\r\ncontract Proxy {\r\n    constructor(address _implementation) {\r\n        require(\r\n            _implementation != address(0),\r\n            \"Invalid implementation address\"\r\n        );\r\n        assembly {\r\n            sstore(address(), _implementation)\r\n        }\r\n    }\r\n\r\n    fallback() external payable {\r\n        address target;\r\n        assembly {\r\n            target := sload(address())\r\n            calldatacopy(0, 0, calldatasize())\r\n            let result := delegatecall(gas(), target, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            switch result\r\n            case 0 {\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/SmartAccount.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport {BaseSmartAccount, IEntryPoint, UserOperation} from \"./BaseSmartAccount.sol\";\r\nimport {ModuleManager} from \"./base/ModuleManager.sol\";\r\nimport {FallbackManager} from \"./base/FallbackManager.sol\";\r\nimport {LibAddress} from \"./libs/LibAddress.sol\";\r\nimport {ISignatureValidator} from \"./interfaces/ISignatureValidator.sol\";\r\nimport {IERC165} from \"./interfaces/IERC165.sol\";\r\nimport {SmartAccountErrors} from \"./common/Errors.sol\";\r\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport {IAuthorizationModule} from \"./interfaces/IAuthorizationModule.sol\";\r\n\r\n/**\r\n * @title SmartAccount - EIP-4337 compatible smart contract wallet.\r\n * @dev This contract is the base for the Smart Account functionality.\r\n *         - It is modular by nature. UserOp and txns validation happens in Authorization Modules.\r\n *         - It provides the functionality to execute AA (EIP-4337) userOps. Gnosis style txns removed to a module.\r\n *         - It allows to receive and manage assets.\r\n *         - It is responsible for managing the modules and fallbacks.\r\n *         - The Smart Account can be extended with modules, such as Social Recovery, Session Key and others.\r\n * @author Chirag Titiya - <chirag@biconomy.io>, Filipp Makarov - <filipp.makarov@biconomy.io>\r\n */\r\ncontract SmartAccount is\r\n    BaseSmartAccount,\r\n    ModuleManager,\r\n    FallbackManager,\r\n    IERC165,\r\n    SmartAccountErrors,\r\n    ISignatureValidator\r\n{\r\n    using ECDSA for bytes32;\r\n    using LibAddress for address;\r\n\r\n    // Storage Version\r\n    string public constant VERSION = \"2.0.0\";\r\n\r\n    // Owner storage. Deprecated. Left for storage layout compatibility\r\n    address public ownerDeprecated;\r\n\r\n    // changed to 2D nonce below\r\n    // @notice there is no _nonce\r\n    // Deprecated. Left for storage layout compatibility\r\n    mapping(uint256 => uint256) public noncesDeprecated;\r\n\r\n    // AA immutable storage\r\n    IEntryPoint private immutable ENTRY_POINT;\r\n    address private immutable SELF;\r\n\r\n    // Events\r\n    event ImplementationUpdated(\r\n        address indexed oldImplementation,\r\n        address indexed newImplementation\r\n    );\r\n    event SmartAccountReceivedNativeToken(\r\n        address indexed sender,\r\n        uint256 indexed value\r\n    );\r\n\r\n    /**\r\n     * @dev Constructor that sets the entry point contract.\r\n     *      _modules[SENTINEL_MODULES] = SENTINEL_MODULES protects implementation from initialization\r\n     * @param anEntryPoint The address of the entry point contract.\r\n     */\r\n    constructor(IEntryPoint anEntryPoint) {\r\n        SELF = address(this);\r\n        if (address(anEntryPoint) == address(0))\r\n            revert EntryPointCannotBeZero();\r\n        ENTRY_POINT = anEntryPoint;\r\n        _modules[SENTINEL_MODULES] = SENTINEL_MODULES;\r\n    }\r\n\r\n    /**\r\n     * @dev This function is a special fallback function that is triggered when the contract receives Ether.\r\n     * It logs an event indicating the amount of Ether received and the sender's address.\r\n     * @notice This function is marked as external and payable, meaning it can be called from external\r\n     * sources and accepts Ether as payment.\r\n     */\r\n    receive() external payable {\r\n        if (address(this) == SELF) revert DelegateCallsOnly();\r\n        emit SmartAccountReceivedNativeToken(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Initialize the Smart Account with required states\r\n     * @param handler Default fallback handler provided in Smart Account\r\n     * @param moduleSetupContract Contract, that setups initial auth module for this smart account.\r\n     * It can be a module factory or a registry module that serves several smart accounts\r\n     * @param moduleSetupData modules setup data (a standard calldata for the module setup contract)\r\n     * @notice devs need to make sure it is only callable once by initializer or state check restrictions\r\n     * @notice any further implementations that introduces a new state must have a reinit method\r\n     * @notice reinitialization is not possible, as _initialSetupModules reverts if the account is already initialized\r\n     *         which is when there is at least one enabled module\r\n     */\r\n    function init(\r\n        address handler,\r\n        address moduleSetupContract,\r\n        bytes calldata moduleSetupData\r\n    ) external virtual override returns (address) {\r\n        if (\r\n            _modules[SENTINEL_MODULES] != address(0) ||\r\n            getFallbackHandler() != address(0)\r\n        ) revert AlreadyInitialized();\r\n        _setFallbackHandler(handler);\r\n        return _initialSetupModules(moduleSetupContract, moduleSetupData);\r\n    }\r\n\r\n    /**\r\n     * @dev Interface function with the standard name for execute_ncC\r\n     * @param dest Address of the contract to call\r\n     * @param value Amount of native tokens to send along with the transaction\r\n     * @param func Data of the transaction\r\n     */\r\n    function execute(\r\n        address dest,\r\n        uint256 value,\r\n        bytes calldata func\r\n    ) external {\r\n        execute_ncC(dest, value, func);\r\n    }\r\n\r\n    /**\r\n     * @dev Interface function with the standard name for executeBatch_y6U\r\n     * @param dest Addresses of the contracts to call\r\n     * @param value Amounts of native tokens to send along with the transactions\r\n     * @param func Data of the transactions\r\n     */\r\n    function executeBatch(\r\n        address[] calldata dest,\r\n        uint256[] calldata value,\r\n        bytes[] calldata func\r\n    ) external {\r\n        executeBatch_y6U(dest, value, func);\r\n    }\r\n\r\n    function validateUserOp(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash,\r\n        uint256 missingAccountFunds\r\n    ) external virtual override returns (uint256 validationData) {\r\n        if (msg.sender != address(entryPoint()))\r\n            revert CallerIsNotAnEntryPoint(msg.sender);\r\n\r\n        (, address validationModule) = abi.decode(\r\n            userOp.signature,\r\n            (bytes, address)\r\n        );\r\n        if (address(_modules[validationModule]) != address(0)) {\r\n            validationData = IAuthorizationModule(validationModule)\r\n                .validateUserOp(userOp, userOpHash);\r\n        } else {\r\n            revert WrongValidationModule(validationModule);\r\n        }\r\n        // Check nonce requirement if any\r\n        _payPrefund(missingAccountFunds);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a module to the allowlist.\r\n     * @notice This can only be done via a userOp or a selfcall.\r\n     * @notice Enables the module `module` for the wallet.\r\n     * @param module Module to be allow-listed.\r\n     */\r\n    function enableModule(address module) external virtual override {\r\n        _requireFromEntryPointOrSelf();\r\n        _enableModule(module);\r\n    }\r\n\r\n    /**\r\n     * @dev Setups module for this Smart Account and enables it.\r\n     * @notice This can only be done via userOp or a selfcall.\r\n     * @notice Enables the module `module` for the wallet.\r\n     */\r\n    function setupAndEnableModule(\r\n        address setupContract,\r\n        bytes memory setupData\r\n    ) external virtual override returns (address) {\r\n        _requireFromEntryPointOrSelf();\r\n        return _setupAndEnableModule(setupContract, setupData);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the fallback handler.\r\n     * @notice This can only be done via a UserOp sent by EntryPoint.\r\n     * @param handler Handler to be set.\r\n     */\r\n    function setFallbackHandler(address handler) external virtual override {\r\n        _requireFromEntryPointOrSelf();\r\n        _setFallbackHandler(handler);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the implementation contract associated with this contract.\r\n     * @notice The implementation address is stored in the contract's storage slot with index 0.\r\n     */\r\n    function getImplementation()\r\n        external\r\n        view\r\n        returns (address _implementation)\r\n    {\r\n        assembly {\r\n            _implementation := sload(address())\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @param _interfaceId The interface identifier, as specified in ERC165\r\n     * @return `true` if the contract implements `_interfaceID`\r\n     */\r\n    function supportsInterface(\r\n        bytes4 _interfaceId\r\n    ) external view virtual override returns (bool) {\r\n        return _interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\r\n    }\r\n\r\n    /**\r\n     * @notice All the new implementations MUST have this method!\r\n     * @notice Updates the implementation of the base wallet\r\n     * @param _implementation New wallet implementation\r\n     */\r\n    function updateImplementation(address _implementation) public virtual {\r\n        _requireFromEntryPointOrSelf();\r\n        require(_implementation != address(0), \"Address cannot be zero\");\r\n        if (!_implementation.isContract())\r\n            revert InvalidImplementation(_implementation);\r\n        address oldImplementation;\r\n\r\n        assembly {\r\n            oldImplementation := sload(address())\r\n            sstore(address(), _implementation)\r\n        }\r\n        emit ImplementationUpdated(oldImplementation, _implementation);\r\n    }\r\n\r\n    /* solhint-disable func-name-mixedcase */\r\n\r\n    /**\r\n     * @dev Execute a transaction (called by entryPoint)\r\n     * @notice Name is optimized for this method to be cheaper to be called\r\n     * @param dest Address of the contract to call\r\n     * @param value Amount of native tokens to send along with the transaction\r\n     * @param func Data of the transaction\r\n     */\r\n    function execute_ncC(\r\n        address dest,\r\n        uint256 value,\r\n        bytes calldata func\r\n    ) public {\r\n        _requireFromEntryPoint();\r\n        _call(dest, value, func);\r\n    }\r\n\r\n    /**\r\n     * @dev Execute a sequence of transactions\r\n     * @notice Name is optimized for this method to be cheaper to be called\r\n     * @param dest Addresses of the contracts to call\r\n     * @param value Amounts of native tokens to send along with the transactions\r\n     * @param func Data of the transactions\r\n     */\r\n    function executeBatch_y6U(\r\n        address[] calldata dest,\r\n        uint256[] calldata value,\r\n        bytes[] calldata func\r\n    ) public {\r\n        _requireFromEntryPoint();\r\n        if (\r\n            dest.length == 0 ||\r\n            dest.length != value.length ||\r\n            value.length != func.length\r\n        ) revert WrongBatchProvided(dest.length, value.length, func.length, 0);\r\n        for (uint256 i; i < dest.length; ) {\r\n            _call(dest[i], value[i], func[i]);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /* solhint-enable func-name-mixedcase */\r\n\r\n    /**\r\n     * @dev Deposit more funds for this account in the entryPoint\r\n     */\r\n    function addDeposit() public payable {\r\n        entryPoint().depositTo{value: msg.value}(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw value from the account's deposit\r\n     * @param withdrawAddress target to send to\r\n     * @param amount to withdraw\r\n     */\r\n    function withdrawDepositTo(\r\n        address payable withdrawAddress,\r\n        uint256 amount\r\n    ) public payable {\r\n        _requireFromEntryPointOrSelf();\r\n        entryPoint().withdrawTo(withdrawAddress, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a module from the allowlist.\r\n     * @notice This can only be done via a wallet transaction.\r\n     * @notice Disables the module `module` for the wallet.\r\n     * @param prevModule Module that pointed to the module to be removed in the linked list\r\n     * @param module Module to be removed.\r\n     */\r\n    function disableModule(address prevModule, address module) public virtual {\r\n        _requireFromEntryPointOrSelf();\r\n        _disableModule(prevModule, module);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current entry point used by this account.\r\n     * @return EntryPoint as an `IEntryPoint` interface.\r\n     * @dev This function should be implemented by the subclass to return the current entry point used by this account.\r\n     */\r\n    function entryPoint() public view virtual override returns (IEntryPoint) {\r\n        return ENTRY_POINT;\r\n    }\r\n\r\n    /**\r\n     * @dev Check current account deposit in the entryPoint\r\n     */\r\n    function getDeposit() public view returns (uint256) {\r\n        return entryPoint().balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)\r\n     * @dev Forwards the validation to the module specified in the signature\r\n     * @param dataHash 32 bytes hash of the data signed on the behalf of address(msg.sender)\r\n     * @param signature Signature byte array associated with dataHash\r\n     * @return bytes4 value.\r\n     */\r\n    function isValidSignature(\r\n        bytes32 dataHash,\r\n        bytes memory signature\r\n    ) public view override returns (bytes4) {\r\n        (bytes memory moduleSignature, address validationModule) = abi.decode(\r\n            signature,\r\n            (bytes, address)\r\n        );\r\n        if (address(_modules[validationModule]) != address(0)) {\r\n            return\r\n                ISignatureValidator(validationModule).isValidSignature(\r\n                    dataHash,\r\n                    moduleSignature\r\n                );\r\n        } else {\r\n            revert WrongValidationModule(validationModule);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev internal method that fecilitates the extenral calls from SmartAccount\r\n     * @dev similar to execute() of Executor.sol\r\n     * @param target destination address contract/non-contract\r\n     * @param value amount of native tokens\r\n     * @param data function singature of destination\r\n     */\r\n    function _call(address target, uint256 value, bytes memory data) internal {\r\n        assembly {\r\n            let success := call(\r\n                gas(),\r\n                target,\r\n                value,\r\n                add(data, 0x20),\r\n                mload(data),\r\n                0,\r\n                0\r\n            )\r\n            let ptr := mload(0x40)\r\n            returndatacopy(ptr, 0, returndatasize())\r\n            if iszero(success) {\r\n                revert(ptr, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This function allows entry point or SA itself to execute certain actions.\r\n     * If the caller is not authorized, the function will revert with an error message.\r\n     * @notice This function acts as modifier and is marked as internal to be be called\r\n     * within the contract itself only.\r\n     */\r\n    function _requireFromEntryPointOrSelf() internal view {\r\n        if (msg.sender != address(entryPoint()) && msg.sender != address(this))\r\n            revert CallerIsNotEntryPointOrSelf(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev This function allows entry point to execute certain actions.\r\n     * If the caller is not authorized, the function will revert with an error message.\r\n     * @notice This function acts as modifier and is marked as internal to be be called\r\n     * within the contract itself only.\r\n     */\r\n    function _requireFromEntryPoint() internal view {\r\n        if (msg.sender != address(entryPoint()))\r\n            revert CallerIsNotEntryPoint(msg.sender);\r\n    }\r\n}\r\n"
    },
    "contracts/test/ForbiddenOpcodeInvokingAuthModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport {EcdsaOwnershipRegistryModule} from \"../modules/EcdsaOwnershipRegistryModule.sol\";\r\nimport {UserOperation} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\r\n\r\ncontract ForbiddenOpcodeInvokingAuthModule is EcdsaOwnershipRegistryModule {\r\n    function validateUserOp(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash\r\n    ) external view virtual override returns (uint256) {\r\n        // Acesss the forbidden opcode\r\n        require(block.timestamp > 0);\r\n\r\n        // Usual Stuff\r\n        (bytes memory cleanEcdsaSignature, ) = abi.decode(\r\n            userOp.signature,\r\n            (bytes, address)\r\n        );\r\n        if (_verifySignature(userOpHash, cleanEcdsaSignature, userOp.sender)) {\r\n            return VALIDATION_SUCCESS;\r\n        }\r\n        return SIG_VALIDATION_FAILED;\r\n    }\r\n}\r\n"
    },
    "contracts/test/mocks/MockAuthModule.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.17;\r\n\r\nimport {BaseAuthorizationModule} from \"../../modules/BaseAuthorizationModule.sol\";\r\nimport {UserOperation} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\r\n\r\ncontract MockAuthModule is BaseAuthorizationModule {\r\n    mapping(address => bytes) internal setupData;\r\n\r\n    function init(bytes calldata setupData_) external returns (address) {\r\n        setupData[msg.sender] = setupData_;\r\n        return address(this);\r\n    }\r\n\r\n    function validateUserOp(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash\r\n    ) external returns (uint256 validationData) {\r\n        (userOp, userOpHash);\r\n        validationData = 0; //means validation success\r\n    }\r\n\r\n    function isValidSignature(\r\n        bytes32 _dataHash,\r\n        bytes memory _signature\r\n    ) public view virtual override returns (bytes4) {\r\n        (_dataHash, _signature);\r\n        return EIP1271_MAGIC_VALUE; //always valid signature\r\n    }\r\n}\r\n"
    },
    "contracts/test/mocks/MockEntryPoint.sol": {
      "content": "import \"@account-abstraction/contracts/core/EntryPoint.sol\";\r\n\r\ncontract MockEntryPoint is EntryPoint {}\r\n"
    },
    "contracts/test/mocks/MockInvalidAuthModule.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.17;\r\n\r\ncontract MockInvalidAuthModule {\r\n    mapping(address => bytes) internal _setupData;\r\n\r\n    function init(bytes calldata setupData_) external returns (address) {\r\n        _setupData[msg.sender] = setupData_;\r\n        return address(this);\r\n    }\r\n\r\n    // Doesn't have validateUserOp function\r\n    // Doesn't have isValidSignature function\r\n}\r\n"
    },
    "contracts/test/mocks/MockInvalidInitialAuthModule copy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.17;\r\n\r\nimport {BaseAuthorizationModule} from \"../../modules/BaseAuthorizationModule.sol\";\r\nimport {UserOperation} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\r\n\r\ncontract MockInvalidInitialAuthModule is BaseAuthorizationModule {\r\n    mapping(address => bytes) internal _setupData;\r\n\r\n    function init(bytes calldata setupData_) external returns (address) {\r\n        _setupData[msg.sender] = setupData_;\r\n        // return address(this);\r\n        // should return an address of a module that has been set up but it doesn't\r\n    }\r\n\r\n    function validateUserOp(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash\r\n    ) external returns (uint256 validationData) {\r\n        (userOp, userOpHash);\r\n        validationData = 0; //means validation success\r\n    }\r\n\r\n    function isValidSignature(\r\n        bytes32 _dataHash,\r\n        bytes memory _signature\r\n    ) public view virtual override returns (bytes4) {\r\n        (_dataHash, _signature);\r\n        return EIP1271_MAGIC_VALUE; //always valid signature\r\n    }\r\n}\r\n"
    },
    "contracts/test/mocks/MockLuminexV1Route.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract MockLuminexRouterV1 {\r\n    address public immutable wrappedNative;\r\n\r\n    constructor(address _wrappedNative) {\r\n        wrappedNative = _wrappedNative;\r\n    }\r\n\r\n    function safeTransferNative(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \"STE\");\r\n    }\r\n\r\n    function swapExactTokensForROSE(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts) {\r\n        uint8 decimal = ERC20(path[0]).decimals();\r\n        if (decimal == 6) {\r\n            safeTransferNative(msg.sender, amountIn * 1e12);\r\n        } else {\r\n            safeTransferNative(msg.sender, amountIn);\r\n        }\r\n    }\r\n\r\n    function getAmountsOut(\r\n        uint amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts) {\r\n        uint[] memory result = new uint[](2);\r\n\r\n        if (path[0] == wrappedNative) {\r\n            uint8 decimal = ERC20(path[1]).decimals();\r\n            result[0] = amountIn;\r\n            if (decimal == 6) {\r\n                result[1] = amountIn / 1e12;\r\n            } else {\r\n                result[1] = amountIn;\r\n            }\r\n        }\r\n\r\n        if (path[1] == wrappedNative) {\r\n            result[0] = amountIn;\r\n            uint8 decimal = ERC20(path[0]).decimals();\r\n            if (decimal == 6) {\r\n                result[1] = amountIn * 1e12;\r\n            } else {\r\n                result[1] = amountIn;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n"
    },
    "contracts/test/mocks/MockProtocol/MockProtocol.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.17;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ncontract MockProtocol {\r\n    function interact(address token, uint256 amount) external {\r\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\r\n    }\r\n}\r\n"
    },
    "contracts/test/mocks/MockQuoter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.17;\r\n\r\ncontract MockQuoter {\r\n    struct QuoteExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint256 amountIn;\r\n        uint24 fee;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    function quoteExactInputSingle(\r\n        QuoteExactInputSingleParams memory params\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountOut,\r\n            uint160 sqrtPriceX96After,\r\n            uint32 initializedTicksCrossed,\r\n            uint256 gasEstimate\r\n        )\r\n    {}\r\n\r\n    struct QuoteExactOutputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint256 amount;\r\n        uint24 fee;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    function quoteExactOutputSingle(\r\n        QuoteExactOutputSingleParams memory params\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountIn,\r\n            uint160 sqrtPriceX96After,\r\n            uint32 initializedTicksCrossed,\r\n            uint256 gasEstimate\r\n        )\r\n    {}\r\n}\r\n"
    },
    "contracts/test/mocks/MockRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.17;\r\n\r\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\r\n\r\ncontract MockRouter is ISwapRouter {\r\n    function uniswapV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata data\r\n    ) external override {}\r\n\r\n    function exactInputSingle(\r\n        ExactInputSingleParams calldata params\r\n    ) external payable override returns (uint256 amountOut) {\r\n        \r\n    }\r\n\r\n    function exactInput(\r\n        ExactInputParams calldata params\r\n    ) external payable override returns (uint256 amountOut) {\r\n\r\n    }\r\n\r\n    function exactOutputSingle(\r\n        ExactOutputSingleParams calldata params\r\n    ) external payable override returns (uint256 amountIn) {\r\n\r\n    }\r\n\r\n    function exactOutput(\r\n        ExactOutputParams calldata params\r\n    ) external payable override returns (uint256 amountIn) {\r\n\r\n    }\r\n}"
    },
    "contracts/test/mocks/MockToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract MockToken is ERC20 {\r\n    constructor() ERC20(\"TST\", \"MockToken\") {}\r\n\r\n    function mint(address sender, uint256 amount) external {\r\n        console.log(\"log in contract: mint to \", sender, \"amount = \", amount);\r\n        _mint(sender, amount);\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 6;\r\n    }\r\n\r\n    function sudoApprove(address _from, address _to, uint256 _amount) external {\r\n        _approve(_from, _to, _amount);\r\n    }\r\n}\r\n"
    },
    "contracts/test/mocks/MockUniswapv3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.17;\r\n\r\ncontract MockPool {\r\n    struct Slot0 {\r\n        // the current price\r\n        uint160 sqrtPriceX96;\r\n        // the current tick\r\n        int24 tick;\r\n        // the most-recently updated index of the observations array\r\n        uint16 observationIndex;\r\n        // the current maximum number of observations that are being stored\r\n        uint16 observationCardinality;\r\n        // the next maximum number of observations to store, triggered in observations.write\r\n        uint16 observationCardinalityNext;\r\n        // the current protocol fee as a percentage of the swap fee taken on withdrawal\r\n        // represented as an integer denominator (1/x)%\r\n        uint8 feeProtocol;\r\n        // whether the pool is locked\r\n        bool unlocked;\r\n    }\r\n    address public token0;\r\n    Slot0 public slot0;\r\n}\r\n"
    },
    "contracts/test/mocks/MockWETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract MockWrappedETH is ERC20 {\r\n    constructor() ERC20(\"MWE\", \"MockWrappedETH\") {}\r\n\r\n    function mint(address sender, uint256 amount) external {\r\n        _mint(sender, amount);\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n}\r\n"
    },
    "contracts/test/mocks/MockWrappNative.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\r\n\r\ncontract MockWrappedNative is ERC20, ERC20Burnable {\r\n    event Deposit(address indexed dst, uint256 wad);\r\n    event Withdrawal(address indexed src, uint256 wad);\r\n\r\n    constructor() ERC20(\"MockWrappedNative\", \"wNATIVE\") {}\r\n\r\n    function mint(address sender, uint256 amount) external {\r\n        _mint(sender, amount);\r\n    }\r\n\r\n    function deposit() external payable {\r\n        _deposit();\r\n    }\r\n\r\n    function withdraw(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n        payable(msg.sender).transfer(amount);\r\n        emit Withdrawal(msg.sender, amount);\r\n    }\r\n\r\n    function _deposit() internal {\r\n        _mint(msg.sender, msg.value);\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function sudoApprove(address _from, address _to, uint256 _amount) external {\r\n        _approve(_from, _to, _amount);\r\n    }\r\n}\r\n"
    },
    "contracts/test/SocialRecoveryModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\nimport \"../SmartAccount.sol\";\r\nimport {Enum} from \"../common/Enum.sol\";\r\nimport {IAuthorizationModule} from \"../interfaces/IAuthorizationModule.sol\";\r\n\r\n// TODO: To be rebuilt for an ownerless setup => like which validation method does it recover?\r\n\r\ncontract SocialRecoveryModule is IAuthorizationModule {\r\n    struct Friends {\r\n        address[] friends;\r\n        uint256 threshold;\r\n    }\r\n\r\n    string public constant NAME = \"Social Recovery Module\";\r\n    string public constant VERSION = \"0.1.0\";\r\n    uint256 internal constant SIG_VALIDATION_FAILED = 1;\r\n\r\n    // @review\r\n    // Might as well keep a state to mark seen userOpHashes\r\n    mapping(bytes32 => bool) public opsSeen;\r\n\r\n    // @todo\r\n    // Notice validateAndUpdateNonce in just skipped in case of modules. To avoid replay of same userOpHash I think it should be done.\r\n\r\n    mapping(address => Friends) internal _friendsEntries;\r\n    mapping(address => mapping(address => bool)) public isFriend;\r\n\r\n    // isConfirmed - map of [recoveryHash][friend] to bool\r\n    mapping(bytes32 => mapping(address => bool)) public isConfirmed;\r\n    mapping(address => uint256) internal _walletsNonces;\r\n\r\n    /**\r\n     * @dev Setup function sets initial storage of contract.\r\n     */\r\n    function setup(\r\n        address[] memory _friends,\r\n        uint256 _threshold\r\n    ) public returns (address) {\r\n        require(\r\n            _threshold <= _friends.length,\r\n            \"Threshold exceeds friends count\"\r\n        );\r\n        require(_threshold >= 2, \"At least 2 friends required\");\r\n        Friends storage entry = _friendsEntries[msg.sender];\r\n        // check for duplicates in friends list\r\n        for (uint256 i = 0; i < _friends.length; i++) {\r\n            address friend = _friends[i];\r\n            require(friend != address(0), \"Invalid friend address provided\");\r\n            require(\r\n                !isFriend[msg.sender][friend],\r\n                \"Duplicate friends provided\"\r\n            );\r\n            isFriend[msg.sender][friend] = true;\r\n        }\r\n        // update friends list and threshold for smart account\r\n        entry.friends = _friends;\r\n        entry.threshold = _threshold;\r\n        return address(this);\r\n    }\r\n\r\n    function validateUserOp(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash\r\n    ) external virtual returns (uint256) {\r\n        (bytes memory moduleSignature, ) = abi.decode(\r\n            userOp.signature,\r\n            (bytes, address)\r\n        );\r\n        return _validateSignature(userOp, userOpHash, moduleSignature);\r\n    }\r\n\r\n    /**\r\n     * @dev standard validateSignature for modules to validate and mark userOpHash as seen\r\n     * @param userOp the operation that is about to be executed.\r\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\r\n     * @return sigValidationResult sigAuthorizer to be passed back to trusting Account, aligns with validationData\r\n     */\r\n    function _validateSignature(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash,\r\n        bytes memory moduleSignature\r\n    ) internal virtual returns (uint256 sigValidationResult) {\r\n        (userOp, moduleSignature);\r\n        if (opsSeen[userOpHash] == true) return SIG_VALIDATION_FAILED;\r\n        opsSeen[userOpHash] = true;\r\n        // can perform it's own access control logic, verify agaisnt expected signer and return SIG_VALIDATION_FAILED\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Confirm friend recovery transaction. Only by friends.\r\n     */\r\n    function confirmTransaction(address _wallet, address _newOwner) public {\r\n        require(onlyFriends(_wallet, msg.sender), \"sender not a friend\");\r\n        bytes32 recoveryHash = getRecoveryHash(\r\n            _wallet,\r\n            _newOwner,\r\n            _walletsNonces[_wallet]\r\n        );\r\n        isConfirmed[recoveryHash][msg.sender] = true;\r\n    }\r\n\r\n    function recoverAccess(address payable _wallet, address _newOwner) public {\r\n        // require(onlyFriends(_wallet, msg.sender), \"sender not a friend\");\r\n        bytes32 recoveryHash = getRecoveryHash(\r\n            _wallet,\r\n            _newOwner,\r\n            _walletsNonces[_wallet]\r\n        );\r\n        require(\r\n            isConfirmedByRequiredFriends(recoveryHash, _wallet),\r\n            \"Not enough confirmations\"\r\n        );\r\n        SmartAccount smartAccount = SmartAccount(payable(_wallet));\r\n        require(\r\n            smartAccount.execTransactionFromModule(\r\n                _wallet,\r\n                0,\r\n                // abi.encodeCall(\"setOwner\", (newOwner)),\r\n                abi.encodeWithSignature(\"setOwner(address)\", _newOwner),\r\n                Enum.Operation.Call\r\n            ),\r\n            \"Could not execute recovery\"\r\n        );\r\n        _walletsNonces[_wallet]++;\r\n    }\r\n\r\n    function isConfirmedByRequiredFriends(\r\n        bytes32 recoveryHash,\r\n        address _wallet\r\n    ) public view returns (bool) {\r\n        uint256 confirmationCount;\r\n        Friends storage entry = _friendsEntries[_wallet];\r\n        for (uint256 i = 0; i < entry.friends.length; i++) {\r\n            if (isConfirmed[recoveryHash][entry.friends[i]])\r\n                confirmationCount++;\r\n            if (confirmationCount == entry.threshold) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function onlyFriends(\r\n        address _wallet,\r\n        address _friend\r\n    ) public view returns (bool) {\r\n        Friends storage entry = _friendsEntries[_wallet];\r\n        for (uint256 i = 0; i < entry.friends.length; i++) {\r\n            if (entry.friends[i] == _friend) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /// @dev Returns hash of data encoding owner replacement.\r\n    /// @return Data hash.\r\n    function getRecoveryHash(\r\n        address _wallet,\r\n        address _newOwner,\r\n        uint256 _nonce\r\n    ) public pure returns (bytes32) {\r\n        return keccak256(abi.encode(_wallet, _newOwner, _nonce));\r\n    }\r\n}\r\n"
    },
    "contracts/test/upgrades/BaseSmartAccountNew.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.17;\r\n\r\n/* solhint-disable avoid-low-level-calls */\r\n/* solhint-disable no-inline-assembly */\r\n/* solhint-disable reason-string */\r\n\r\nimport {IAccount} from \"@account-abstraction/contracts/interfaces/IAccount.sol\";\r\nimport {IEntryPoint} from \"@account-abstraction/contracts/interfaces/IEntryPoint.sol\";\r\nimport {UserOperationLib, UserOperation} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\r\nimport {Enum} from \"../../common/Enum.sol\";\r\nimport {BaseSmartAccountErrors} from \"../../common/Errors.sol\";\r\nimport \"@account-abstraction/contracts/core/Helpers.sol\";\r\n\r\nstruct Transaction {\r\n    address to;\r\n    uint256 value;\r\n    bytes data;\r\n    Enum.Operation operation;\r\n    uint256 targetTxGas;\r\n}\r\n\r\nstruct FeeRefund {\r\n    uint256 baseGas;\r\n    uint256 gasPrice; //gasPrice or tokenGasPrice\r\n    uint256 tokenGasPriceFactor;\r\n    address gasToken;\r\n    address payable refundReceiver;\r\n}\r\n\r\n/**\r\n * Basic account implementation.\r\n * this contract provides the basic logic for implementing the IAccount interface  - validateUserOp\r\n * specific account implementation should inherit it and provide the account-specific logic\r\n */\r\nabstract contract BaseSmartAccountNew is IAccount, BaseSmartAccountErrors {\r\n    using UserOperationLib for UserOperation;\r\n\r\n    //return value in case of signature failure, with no time-range.\r\n    // equivalent to _packValidationData(true,0,0);\r\n    uint256 internal constant SIG_VALIDATION_FAILED = 1;\r\n\r\n    /**\r\n     * Validate user's signature and nonce.\r\n     * subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\r\n     */\r\n    function validateUserOp(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash,\r\n        uint256 missingAccountFunds\r\n    ) external virtual override returns (uint256 validationData) {\r\n        if (msg.sender != address(entryPoint()))\r\n            revert CallerIsNotAnEntryPoint(msg.sender);\r\n        validationData = _validateSignature(userOp, userOpHash);\r\n        _payPrefund(missingAccountFunds);\r\n    }\r\n\r\n    function execTransaction(\r\n        Transaction memory _tx,\r\n        uint256 _batchId,\r\n        FeeRefund memory refundInfo,\r\n        bytes memory signatures\r\n    ) external payable virtual returns (bool success);\r\n\r\n    function init(address _owner, address _handler) external virtual;\r\n\r\n    /**\r\n     * @return nonce the account nonce.\r\n     * @dev This method returns the next sequential nonce.\r\n     * @notice For a nonce of a specific key, use `entrypoint.getNonce(account, key)`\r\n     */\r\n    function nonce() public view virtual returns (uint256) {\r\n        return entryPoint().getNonce(address(this), 0);\r\n    }\r\n\r\n    /**\r\n     * return the entryPoint used by this account.\r\n     * subclass should return the current entryPoint used by this account.\r\n     */\r\n    function entryPoint() public view virtual returns (IEntryPoint);\r\n\r\n    /**\r\n     * validate the signature is valid for this message.\r\n     * @param userOp validate the userOp.signature field\r\n     * @param userOpHash convenient field: the hash of the request, to check the signature against\r\n     *          (also hashes the entrypoint and chain id)\r\n     * @return validationData signature and time-range of this operation\r\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\r\n     *         otherwise, an address of an \"authorizer\" contract.\r\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\r\n     *      <6-byte> validAfter - first timestamp this operation is valid\r\n     *      If the account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\r\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\r\n     */\r\n    function _validateSignature(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash\r\n    ) internal virtual returns (uint256 validationData);\r\n\r\n    /**\r\n     * sends to the entrypoint (msg.sender) the missing funds for this transaction.\r\n     * subclass MAY override this method for better funds management\r\n     * (e.g. send to the entryPoint more than the minimum required, so that in future transactions\r\n     * it will not be required to send again)\r\n     * @param missingAccountFunds the minimum value this method should send the entrypoint.\r\n     *  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\r\n     */\r\n    function _payPrefund(uint256 missingAccountFunds) internal virtual {\r\n        if (missingAccountFunds != 0) {\r\n            (bool success, ) = payable(msg.sender).call{\r\n                value: missingAccountFunds,\r\n                gas: type(uint256).max\r\n            }(\"\");\r\n            (success);\r\n            //ignore failure (its EntryPoint's job to verify, not account.)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ensure the request comes from the known entrypoint.\r\n     */\r\n    function _requireFromEntryPoint() internal view virtual {\r\n        require(\r\n            msg.sender == address(entryPoint()),\r\n            \"account: not from EntryPoint\"\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/test/upgrades/ModuleManagerNew.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../common/Enum.sol\";\r\nimport \"../../common/SelfAuthorized.sol\";\r\nimport \"../../base/Executor.sol\";\r\n\r\n/// @title Module Manager - A contract that manages modules that can execute transactions via this contract\r\ncontract ModuleManagerNew is SelfAuthorized, Executor {\r\n    // Events\r\n    event EnabledModule(address module);\r\n    event DisabledModule(address module);\r\n    event ExecutionFromModuleSuccess(address indexed module);\r\n    event ExecutionFromModuleFailure(address indexed module);\r\n\r\n    address internal constant SENTINEL_MODULES = address(0x1);\r\n    bytes32 internal constant VERSION = \"1.0.1\";\r\n\r\n    mapping(address => address) internal _modules;\r\n    bool internal _isActive = true;\r\n\r\n    function _setupModules(address to, bytes memory data) internal {\r\n        require(_modules[SENTINEL_MODULES] == address(0), \"BSA100\");\r\n        _modules[SENTINEL_MODULES] = SENTINEL_MODULES;\r\n        if (to != address(0))\r\n            // Setup has to complete successfully or transaction fails.\r\n            require(\r\n                _execute(to, 0, data, Enum.Operation.DelegateCall, gasleft()),\r\n                \"BSA000\"\r\n            );\r\n    }\r\n\r\n    /// @dev Allows to add a module to the whitelist.\r\n    ///      This can only be done via a wallet transaction.\r\n    /// @notice Enables the module `module` for the wallet.\r\n    /// @param module Module to be whitelisted.\r\n    function enableModule(address module) public authorized {\r\n        // Module address cannot be null or sentinel.\r\n        require(module != address(0) && module != SENTINEL_MODULES, \"BSA101\");\r\n        // Module cannot be added twice.\r\n        require(_modules[module] == address(0), \"BSA102\");\r\n        _modules[module] = _modules[SENTINEL_MODULES];\r\n        _modules[SENTINEL_MODULES] = module;\r\n        emit EnabledModule(module);\r\n    }\r\n\r\n    /// @dev Allows to remove a module from the whitelist.\r\n    ///      This can only be done via a wallet transaction.\r\n    /// @notice Disables the module `module` for the wallet.\r\n    /// @param prevModule Module that pointed to the module to be removed in the linked list\r\n    /// @param module Module to be removed.\r\n    function disableModule(\r\n        address prevModule,\r\n        address module\r\n    ) public authorized {\r\n        // Validate module address and check that it corresponds to module index.\r\n        require(module != address(0) && module != SENTINEL_MODULES, \"BSA101\");\r\n        require(_modules[prevModule] == module, \"BSA103\");\r\n        _modules[prevModule] = _modules[module];\r\n        delete _modules[module];\r\n        emit DisabledModule(module);\r\n    }\r\n\r\n    /// @dev Allows a Module to execute a wallet transaction without any further confirmations.\r\n    /// @param to Destination address of module transaction.\r\n    /// @param value Ether value of module transaction.\r\n    /// @param data Data payload of module transaction.\r\n    /// @param operation Operation type of module transaction.\r\n    function execTransactionFromModule(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation\r\n    ) public virtual returns (bool success) {\r\n        require(_isActive == true, \"disabled\");\r\n        // Only whitelisted modules are allowed.\r\n        require(\r\n            msg.sender != SENTINEL_MODULES &&\r\n                _modules[msg.sender] != address(0),\r\n            \"BSA104\"\r\n        );\r\n        // Execute transaction without further confirmations.\r\n        success = _execute(to, value, data, operation, gasleft());\r\n        if (success) emit ExecutionFromModuleSuccess(msg.sender);\r\n        else emit ExecutionFromModuleFailure(msg.sender);\r\n    }\r\n\r\n    /// @dev Allows a Module to execute a wallet transaction without any further confirmations and return data\r\n    /// @param to Destination address of module transaction.\r\n    /// @param value Ether value of module transaction.\r\n    /// @param data Data payload of module transaction.\r\n    /// @param operation Operation type of module transaction.\r\n    function execTransactionFromModuleReturnData(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation\r\n    ) public returns (bool success, bytes memory returnData) {\r\n        success = execTransactionFromModule(to, value, data, operation);\r\n\r\n        assembly {\r\n            // Load free memory location\r\n            let ptr := mload(0x40)\r\n            // We allocate memory for the return data by setting the free memory location to\r\n            // current free memory location + data size + 32 bytes for data size value\r\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\r\n            // Store the size\r\n            mstore(ptr, returndatasize())\r\n            // Store the data\r\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\r\n            // Point the return data to the correct memory location\r\n            returnData := ptr\r\n        }\r\n    }\r\n\r\n    /// @dev Returns if an module is enabled\r\n    /// @return True if the module is enabled\r\n    function isModuleEnabled(address module) public view returns (bool) {\r\n        return SENTINEL_MODULES != module && _modules[module] != address(0);\r\n    }\r\n\r\n    /// @dev Returns array of modules. Useful for a widget\r\n    /// @param start Start of the page.\r\n    /// @param pageSize Maximum number of modules that should be returned.\r\n    /// @return array Array of modules.\r\n    /// @return next Start of the next page.\r\n    function getModulesPaginated(\r\n        address start,\r\n        uint256 pageSize\r\n    ) external view returns (address[] memory array, address next) {\r\n        // Init array with max page size\r\n        array = new address[](pageSize);\r\n\r\n        // Populate return array\r\n        uint256 moduleCount;\r\n        address currentModule = _modules[start];\r\n        while (\r\n            currentModule != address(0x0) &&\r\n            currentModule != SENTINEL_MODULES &&\r\n            moduleCount < pageSize\r\n        ) {\r\n            array[moduleCount] = currentModule;\r\n            currentModule = _modules[currentModule];\r\n            moduleCount++;\r\n        }\r\n        next = currentModule;\r\n        // Set correct size of returned array\r\n\r\n        assembly {\r\n            mstore(array, moduleCount)\r\n        }\r\n    }\r\n\r\n    // Must reduce the gap this way!\r\n    uint256[23] private __gap;\r\n}\r\n"
    },
    "contracts/test/upgrades/v1/BaseSmartAccountV1.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.17;\r\n\r\n/* solhint-disable avoid-low-level-calls */\r\n/* solhint-disable no-inline-assembly */\r\n/* solhint-disable reason-string */\r\n\r\nimport {IAccount} from \"@account-abstraction/contracts/interfaces/IAccount.sol\";\r\nimport {IEntryPoint} from \"@account-abstraction/contracts/interfaces/IEntryPoint.sol\";\r\nimport {UserOperationLib, UserOperation} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\r\nimport {Enum} from \"../../../common/Enum.sol\";\r\nimport {BaseSmartAccountErrorsV1} from \"./ErrorsV1.sol\";\r\nimport \"@account-abstraction/contracts/core/Helpers.sol\";\r\n\r\nstruct Transaction {\r\n    address to;\r\n    Enum.Operation operation;\r\n    uint256 value;\r\n    bytes data;\r\n    uint256 targetTxGas;\r\n}\r\n\r\nstruct FeeRefund {\r\n    uint256 baseGas;\r\n    uint256 gasPrice; //gasPrice or tokenGasPrice\r\n    uint256 tokenGasPriceFactor;\r\n    address gasToken;\r\n    address payable refundReceiver;\r\n}\r\n\r\n/**\r\n * Basic account implementation.\r\n * This contract provides the basic logic for implementing the IAccount interface: validateUserOp function\r\n * Specific account implementation should inherit it and provide the account-specific logic\r\n */\r\nabstract contract BaseSmartAccount is IAccount, BaseSmartAccountErrorsV1 {\r\n    using UserOperationLib for UserOperation;\r\n\r\n    //return value in case of signature failure, with no time-range.\r\n    // equivalent to _packValidationData(true,0,0);\r\n    uint256 internal constant SIG_VALIDATION_FAILED = 1;\r\n\r\n    /**\r\n     * Validate user's signature and nonce.\r\n     * Subclass doesn't need to override this method.\r\n     * Instead, it should override the specific internal validation methods.\r\n     */\r\n    function validateUserOp(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash,\r\n        uint256 missingAccountFunds\r\n    ) external virtual override returns (uint256 validationData) {\r\n        if (msg.sender != address(entryPoint()))\r\n            revert CallerIsNotAnEntryPoint(msg.sender);\r\n        validationData = _validateSignature(userOp, userOpHash);\r\n        _payPrefund(missingAccountFunds);\r\n    }\r\n\r\n    /**\r\n     * @dev Gnosis style transaction with optional repay in native tokens OR ERC20\r\n     * @dev Allows to execute a transaction confirmed by required signature/s and then pays the account that submitted the transaction.\r\n     * @notice The fees are always transferred, even if the user transaction fails.\r\n     * @param _tx Smart Account transaction\r\n     * @param refundInfo Required information for gas refunds\r\n     * @param signatures Packed signature/s data ({bytes32 r}{bytes32 s}{uint8 v})\r\n     */\r\n    function execTransaction(\r\n        Transaction memory _tx,\r\n        FeeRefund memory refundInfo,\r\n        bytes memory signatures\r\n    ) external payable virtual returns (bool success);\r\n\r\n    /**\r\n     * @dev Initialize the Smart Account with required states\r\n     * @param _owner Signatory of the Smart Account\r\n     * @param _handler Default fallback handler provided in Smart Account\r\n     * @notice devs need to make sure it is only callble once by initiazer or state check restrictions\r\n     */\r\n    function init(address _owner, address _handler) external virtual;\r\n\r\n    /**\r\n     * @return nonce the account nonce.\r\n     * @dev This method returns the next sequential nonce.\r\n     * @notice For a nonce of a specific key, use `entrypoint.getNonce(account, key)`\r\n     */\r\n    function nonce() public view virtual returns (uint256) {\r\n        return entryPoint().getNonce(address(this), 0);\r\n    }\r\n\r\n    /**\r\n     * return the entryPoint used by this account.\r\n     * subclass should return the current entryPoint used by this account.\r\n     */\r\n    function entryPoint() public view virtual returns (IEntryPoint);\r\n\r\n    /**\r\n     * validate the signature is valid for this message.\r\n     * @param userOp validate the userOp.signature field\r\n     * @param userOpHash convenient field: the hash of the request, to check the signature against\r\n     *          (also hashes the entrypoint and chain id)\r\n     * @return validationData signature and time-range of this operation\r\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\r\n     *         otherwise, an address of an \"authorizer\" contract.\r\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\r\n     *      <6-byte> validAfter - first timestamp this operation is valid\r\n     *      If the account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\r\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\r\n     */\r\n    function _validateSignature(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash\r\n    ) internal virtual returns (uint256 validationData);\r\n\r\n    /**\r\n     * sends to the entrypoint (msg.sender) the missing funds for this transaction.\r\n     * subclass MAY override this method for better funds management\r\n     * (e.g. send to the entryPoint more than the minimum required, so that in future transactions\r\n     * it will not be required to send again)\r\n     * @param missingAccountFunds the minimum value this method should send the entrypoint.\r\n     *  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\r\n     */\r\n    function _payPrefund(uint256 missingAccountFunds) internal virtual {\r\n        if (missingAccountFunds != 0) {\r\n            payable(msg.sender).call{\r\n                value: missingAccountFunds,\r\n                gas: type(uint256).max\r\n            }(\"\");\r\n            //ignore failure (its EntryPoint's job to verify, not account.)\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/test/upgrades/v1/ErrorsV1.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity 0.8.17;\r\n\r\ncontract BaseSmartAccountErrorsV1 {\r\n    /**\r\n     * @notice Throws at onlyEntryPoint when msg.sender is not an EntryPoint set for this Smart Account\r\n     * @param caller address that tried to call onlyEntryPoint-protected method\r\n     */\r\n    error CallerIsNotAnEntryPoint(address caller);\r\n}\r\n\r\ncontract FallbackManagerErrors {\r\n    /**\r\n     * @notice Throws if zero address has been provided as Fallback Handler address\r\n     */\r\n    error HandlerCannotBeZero();\r\n}\r\n\r\ncontract ModuleManagerErrorsV1 {\r\n    /**\r\n     * @notice Throws when trying to initialize module manager that already been initialized\r\n     */\r\n    error ModulesAlreadyInitialized();\r\n\r\n    /**\r\n     * @notice Throws when a delegatecall in course of module manager initialization has failed\r\n     */\r\n    error ModulesSetupExecutionFailed();\r\n\r\n    /**\r\n     * @notice Throws when address(0) or SENTINEL_MODULES constant has been provided as a module address\r\n     * @param module Module address provided\r\n     */\r\n    error ModuleCannotBeZeroOrSentinel(address module);\r\n\r\n    /**\r\n     * @notice Throws when trying to enable module that has already been enabled\r\n     * @param module Module address provided\r\n     */\r\n    error ModuleAlreadyEnabled(address module);\r\n\r\n    /**\r\n     * @notice Throws when module and previous module mismatch\r\n     * @param expectedModule expected module at modules[prevModule]\r\n     * @param returnedModule the module that has been found at modules[prevModule]\r\n     * @param prevModule previous module address provided at call\r\n     */\r\n    error ModuleAndPrevModuleMismatch(\r\n        address expectedModule,\r\n        address returnedModule,\r\n        address prevModule\r\n    );\r\n\r\n    /**\r\n     * @notice Throws when trying to execute transaction from module that is not enabled\r\n     * @param module Module address provided\r\n     */\r\n    error ModuleNotEnabled(address module);\r\n\r\n    /**\r\n     * @notice Throws when data for executeBatchCall provided in wrong format (i.e. empty array or lengths mismatch)\r\n     * @param destLength length of destination contracts array\r\n     * @param valueLength length of txn values array\r\n     * @param funcLength length of function signatures array\r\n     * @param operationLength length of operation types array. 0 if there's no operations\r\n     */\r\n    error WrongBatchProvided(\r\n        uint256 destLength,\r\n        uint256 valueLength,\r\n        uint256 funcLength,\r\n        uint256 operationLength\r\n    );\r\n}\r\n\r\ncontract SmartAccountErrorsV1 is\r\n    BaseSmartAccountErrorsV1,\r\n    ModuleManagerErrorsV1\r\n{\r\n    /**\r\n     * @notice Throws if zero address has been provided as Entry Point address\r\n     */\r\n    error EntryPointCannotBeZero();\r\n\r\n    /**\r\n     * @notice Throws at mixedAuth when msg.sender is not an owner neither _self\r\n     * @param caller address that tried to call mixedAuth-protected method\r\n     */\r\n    error MixedAuthFail(address caller);\r\n\r\n    /**\r\n     * @notice Throws if trying to change an owner of a SmartAccount to the zero address\r\n     */\r\n    error OwnerCannotBeZero();\r\n\r\n    /**\r\n     * @notice Throws if zero address has been provided as Base Implementation address\r\n     */\r\n    error BaseImplementationCannotBeZero();\r\n\r\n    /**\r\n     * @notice Throws if there is no code at implementationAddress\r\n     * @param implementationAddress implementation address provided\r\n     */\r\n    error InvalidImplementation(address implementationAddress);\r\n\r\n    /**\r\n     * @notice Throws at onlyOwner when msg.sender is not an owner\r\n     * @param caller address that tried to call onlyOwner method\r\n     */\r\n    error CallerIsNotOwner(address caller);\r\n\r\n    /**\r\n     * @notice Throws at _requireFromEntryPointOrOwner when msg.sender is not an EntryPoint neither an owner\r\n     * @param caller address that tried to call _requireFromEntryPointOrOwner-protected method\r\n     */\r\n    error CallerIsNotEntryPointOrOwner(address caller);\r\n\r\n    /**\r\n     * @notice Throws at _requireFromEntryPointOrSelf when msg.sender is not an EntryPoint neither self\r\n     * @param caller address that tried to call _requireFromEntryPointOrSelf-protected method\r\n     */\r\n    error CallerIsNotEntryPointOrSelf(address caller);\r\n\r\n    /**\r\n     * @notice Throws at _requireFromEntryPoint when msg.sender is not an EntryPoint\r\n     * @param caller address that tried to call _requireFromEntryPoint-protected method\r\n     */\r\n    error CallerIsNotEntryPoint(address caller);\r\n\r\n    /**\r\n     * @notice Throws if trying to initialize a Smart Account that has already been initialized\r\n     */\r\n    error AlreadyInitialized();\r\n\r\n    /**\r\n     * @notice Throws if contract signature is provided in frong format\r\n     * @param uintS s converted to uint256\r\n     * @param contractSignatureLength length of a contract signature\r\n     * @param signatureLength the whole signature length\r\n     */\r\n    error WrongContractSignatureFormat(\r\n        uint256 uintS,\r\n        uint256 contractSignatureLength,\r\n        uint256 signatureLength\r\n    );\r\n\r\n    /**\r\n     * @notice Throws when isValidSignature for the conrtact signature and data hash return differs from EIP1271 Magic Value\r\n     * @param contractSignature the contract signature that has been verified\r\n     */\r\n    error WrongContractSignature(bytes contractSignature);\r\n\r\n    /**\r\n     * @notice Throws when if trying to transfer to zero address\r\n     */\r\n    error TransferToZeroAddressAttempt();\r\n\r\n    /**\r\n     * @notice Throws when module address taken from signature is not enabled\r\n     * @param moduleAddressProvided module address taken from signature\r\n     */\r\n    error WrongValidationModule(address moduleAddressProvided);\r\n\r\n    /**\r\n     * @notice Thrown when the function that must be called only via delegatecall is called directly\r\n     */\r\n    error DelegateCallsOnly();\r\n\r\n    /**\r\n     * @notice Thrown when trying to use address of the Smart Account as an owner for itself\r\n     */\r\n    error OwnerCanNotBeSelf();\r\n\r\n    /**\r\n     * @notice Thrown when trying to use current owner as a new owner in a _setOwner() call\r\n     */\r\n    error OwnerProvidedIsSame();\r\n\r\n    /**\r\n     * @notice Throws when the address that signed the data (restored from signature)\r\n     * differs from the address we expected to sign the data (i.e. some authorized address)\r\n     */\r\n    error InvalidSignature();\r\n\r\n    /**\r\n     * @notice Throws if not enough gas is left at some point\r\n     * @param gasLeft how much gas left at the moment of a check\r\n     * @param gasRequired how much gas required to proceed\r\n     */\r\n    error NotEnoughGasLeft(uint256 gasLeft, uint256 gasRequired);\r\n\r\n    /**\r\n     * @notice Throws if not able to estimate gas\r\n     * It can be when amount of gas and its price are both zero and at the same time\r\n     * transaction has failed to be executed\r\n     * @param targetTxGas gas required for target transaction\r\n     * @param gasPrice gas price passed in Refund Info\r\n     * @param success whether transaction has been executed successfully or not\r\n     */\r\n    error CanNotEstimateGas(\r\n        uint256 targetTxGas,\r\n        uint256 gasPrice,\r\n        bool success\r\n    );\r\n\r\n    /**\r\n     * @notice Throws if transfer of tokens failed\r\n     * @param token token contract address\r\n     * @param dest token transfer receiver\r\n     * @param amount the amount of tokens in a failed transfer\r\n     */\r\n    error TokenTransferFailed(address token, address dest, uint256 amount);\r\n\r\n    /**\r\n     * @notice Thrown when trying to use 0 as tokenGasPriceFactor\r\n     */\r\n    error TokenGasPriceFactorCanNotBeZero();\r\n\r\n    /**\r\n     * @notice Throws when the transaction execution fails\r\n     */\r\n    error ExecutionFailed();\r\n}\r\n\r\ncontract SmartAccountFactoryErrorsV1 is SmartAccountErrorsV1 {\r\n    /**\r\n     * @notice Throws when the new Proxy deployment fails\r\n     * @param owner Owner of a Proxy (Smart Account)\r\n     * @param index Deployment index\r\n     */\r\n    error ProxyDeploymentFailed(address owner, uint256 index);\r\n}\r\n\r\ncontract SelfAuthorizedErrors {\r\n    /**\r\n     * @notice Throws when the caller is not address(this)\r\n     * @param caller Caller address\r\n     */\r\n    error CallerIsNotSelf(address caller);\r\n}\r\n\r\ncontract SingletonPaymasterErrors {\r\n    /**\r\n     * @notice Throws when the Entrypoint address provided is address(0)\r\n     */\r\n    error EntryPointCannotBeZero();\r\n\r\n    /**\r\n     * @notice Throws when the verifiying signer address provided is address(0)\r\n     */\r\n    error VerifyingSignerCannotBeZero();\r\n\r\n    /**\r\n     * @notice Throws when the paymaster address provided is address(0)\r\n     */\r\n    error PaymasterIdCannotBeZero();\r\n\r\n    /**\r\n     * @notice Throws when the 0 has been provided as deposit\r\n     */\r\n    error DepositCanNotBeZero();\r\n\r\n    /**\r\n     * @notice Throws when trying to withdraw to address(0)\r\n     */\r\n    error CanNotWithdrawToZeroAddress();\r\n\r\n    /**\r\n     * @notice Throws when trying to withdraw more than balance available\r\n     * @param amountRequired required balance\r\n     * @param currentBalance available balance\r\n     */\r\n    error InsufficientBalance(uint256 amountRequired, uint256 currentBalance);\r\n\r\n    /**\r\n     * @notice Throws when signature provided has invalid length\r\n     * @param sigLength length oif the signature provided\r\n     */\r\n    error InvalidPaymasterSignatureLength(uint256 sigLength);\r\n}\r\n\r\n//\r\n"
    },
    "contracts/test/upgrades/v1/FallbackManagerV1.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity 0.8.17;\r\n\r\nimport {SelfAuthorized} from \"../../../common/SelfAuthorized.sol\";\r\nimport {FallbackManagerErrors} from \"../../../common/Errors.sol\";\r\n\r\n/**\r\n *   @title Fallback Manager - A contract that manages fallback calls made to the Smart Account\r\n *   @dev Fallback calls are handled by a `handler` contract that is stored at FALLBACK_HANDLER_STORAGE_SLOT\r\n *        fallback calls are not delegated to the `handler` so they can not directly change Smart Account storage\r\n */\r\nabstract contract FallbackManagerV1 is SelfAuthorized, FallbackManagerErrors {\r\n    // keccak-256 hash of \"fallback_manager.handler.address\" subtracted by 1\r\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT =\r\n        0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d4;\r\n\r\n    event ChangedFallbackHandler(\r\n        address indexed previousHandler,\r\n        address indexed handler\r\n    );\r\n\r\n    // solhint-disable-next-line payable-fallback,no-complex-fallback\r\n    fallback() external {\r\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\r\n\r\n        assembly {\r\n            let handler := sload(slot)\r\n            if iszero(handler) {\r\n                return(0, 0)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\r\n            // Then the address without padding is stored right after the calldata\r\n            mstore(calldatasize(), shl(96, caller()))\r\n            // Add 20 bytes for the address appended add the end\r\n            let success := call(\r\n                gas(),\r\n                handler,\r\n                0,\r\n                0,\r\n                add(calldatasize(), 20),\r\n                0,\r\n                0\r\n            )\r\n            returndatacopy(0, 0, returndatasize())\r\n            if iszero(success) {\r\n                revert(0, returndatasize())\r\n            }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n\r\n    function getFallbackHandler() public view returns (address _handler) {\r\n        assembly {\r\n            _handler := sload(FALLBACK_HANDLER_STORAGE_SLOT)\r\n        }\r\n    }\r\n\r\n    /// @dev Allows to add a contract to handle fallback calls.\r\n    ///      Only fallback calls without value and with data will be forwarded\r\n    /// @param handler contract to handle fallback calls.\r\n    function setFallbackHandler(address handler) public authorized {\r\n        _setFallbackHandler(handler);\r\n    }\r\n\r\n    function _setFallbackHandler(address handler) internal {\r\n        if (handler == address(0)) revert HandlerCannotBeZero();\r\n        address previousHandler;\r\n\r\n        assembly {\r\n            previousHandler := sload(FALLBACK_HANDLER_STORAGE_SLOT)\r\n        }\r\n        //bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\r\n\r\n        assembly {\r\n            sstore(FALLBACK_HANDLER_STORAGE_SLOT, handler)\r\n        }\r\n        emit ChangedFallbackHandler(previousHandler, handler);\r\n    }\r\n\r\n    uint256[24] private __gap;\r\n}\r\n"
    },
    "contracts/test/upgrades/v1/IModuleV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\nimport {UserOperation} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\r\n\r\n// interface for modules to verify singatures signed over userOpHash\r\ninterface IModule {\r\n    /**\r\n     * @dev standard validateSignature for modules to validate and mark userOpHash as seen\r\n     * @param userOp the operation that is about to be executed.\r\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\r\n     * @return sigValidationResult sigAuthorizer to be passed back to trusting Account, aligns with validationData\r\n     */\r\n    function validateSignature(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash\r\n    ) external returns (uint256 sigValidationResult);\r\n}\r\n"
    },
    "contracts/test/upgrades/v1/ModuleManagerV1.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity 0.8.17;\r\n\r\nimport {SelfAuthorized} from \"../../../common/SelfAuthorized.sol\";\r\nimport {Executor, Enum} from \"../../../base/Executor.sol\";\r\nimport {ModuleManagerErrorsV1} from \"./ErrorsV1.sol\";\r\n\r\n/**\r\n * @title Module Manager - A contract that manages modules that can execute transactions\r\n *        on behalf of the Smart Account via this contract.\r\n */\r\ncontract ModuleManagerV1 is SelfAuthorized, Executor, ModuleManagerErrorsV1 {\r\n    address internal constant SENTINEL_MODULES = address(0x1);\r\n\r\n    mapping(address => address) internal _modules;\r\n\r\n    // Events\r\n    event EnabledModule(address module);\r\n    event DisabledModule(address module);\r\n    event ExecutionFromModuleSuccess(address indexed module);\r\n    event ExecutionFromModuleFailure(address indexed module);\r\n    event ModuleTransaction(\r\n        address module,\r\n        address to,\r\n        uint256 value,\r\n        bytes data,\r\n        Enum.Operation operation\r\n    );\r\n\r\n    /**\r\n     * @dev Returns array of modules. Useful for a widget\r\n     * @param start Start of the page.\r\n     * @param pageSize Maximum number of modules that should be returned.\r\n     * @return array Array of modules.\r\n     * @return next Start of the next page.\r\n     */\r\n    function getModulesPaginated(\r\n        address start,\r\n        uint256 pageSize\r\n    ) external view returns (address[] memory array, address next) {\r\n        // Init array with max page size\r\n        array = new address[](pageSize);\r\n\r\n        // Populate return array\r\n        uint256 moduleCount;\r\n        address currentModule = _modules[start];\r\n        while (\r\n            currentModule != address(0x0) &&\r\n            currentModule != SENTINEL_MODULES &&\r\n            moduleCount < pageSize\r\n        ) {\r\n            array[moduleCount] = currentModule;\r\n            currentModule = _modules[currentModule];\r\n            moduleCount++;\r\n        }\r\n        next = currentModule;\r\n        // Set correct size of returned array\r\n\r\n        assembly {\r\n            mstore(array, moduleCount)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a module to the allowlist.\r\n     * @notice This can only be done via a wallet transaction.\r\n     * @notice Enables the module `module` for the wallet.\r\n     * @param module Module to be allow-listed.\r\n     */\r\n    function enableModule(address module) public authorized {\r\n        // Module address cannot be null or sentinel.\r\n        if (module == address(0) || module == SENTINEL_MODULES)\r\n            revert ModuleCannotBeZeroOrSentinel(module);\r\n        // Module cannot be added twice.\r\n        if (_modules[module] != address(0)) revert ModuleAlreadyEnabled(module);\r\n        _modules[module] = _modules[SENTINEL_MODULES];\r\n        _modules[SENTINEL_MODULES] = module;\r\n        emit EnabledModule(module);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a module from the allowlist.\r\n     * @notice This can only be done via a wallet transaction.\r\n     * @notice Disables the module `module` for the wallet.\r\n     * @param prevModule Module that pointed to the module to be removed in the linked list\r\n     * @param module Module to be removed.\r\n     */\r\n    function disableModule(\r\n        address prevModule,\r\n        address module\r\n    ) public authorized {\r\n        // Validate module address and check that it corresponds to module index.\r\n        if (module == address(0) || module == SENTINEL_MODULES)\r\n            revert ModuleCannotBeZeroOrSentinel(module);\r\n        if (_modules[prevModule] != module)\r\n            revert ModuleAndPrevModuleMismatch(\r\n                module,\r\n                _modules[prevModule],\r\n                prevModule\r\n            );\r\n        _modules[prevModule] = _modules[module];\r\n        delete _modules[module];\r\n        emit DisabledModule(module);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows a Module to execute a Smart Account transaction without any further confirmations.\r\n     * @param to Destination address of module transaction.\r\n     * @param value Ether value of module transaction.\r\n     * @param data Data payload of module transaction.\r\n     * @param operation Operation type of module transaction.\r\n     */\r\n    function execTransactionFromModule(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation\r\n    ) public virtual returns (bool success) {\r\n        // Only whitelisted modules are allowed.\r\n        if (\r\n            msg.sender == SENTINEL_MODULES || _modules[msg.sender] == address(0)\r\n        ) revert ModuleNotEnabled(msg.sender);\r\n        // Execute transaction without further confirmations.\r\n        success = _execute(to, value, data, operation, gasleft());\r\n        if (success) {\r\n            emit ModuleTransaction(msg.sender, to, value, data, operation);\r\n            emit ExecutionFromModuleSuccess(msg.sender);\r\n        } else emit ExecutionFromModuleFailure(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows a Module to execute a wallet transaction without any further confirmations and returns data\r\n     * @param to Destination address of module transaction.\r\n     * @param value Ether value of module transaction.\r\n     * @param data Data payload of module transaction.\r\n     * @param operation Operation type of module transaction.\r\n     */\r\n    function execTransactionFromModuleReturnData(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation\r\n    ) public returns (bool success, bytes memory returnData) {\r\n        success = execTransactionFromModule(to, value, data, operation);\r\n\r\n        assembly {\r\n            // Load free memory location\r\n            let ptr := mload(0x40)\r\n            // We allocate memory for the return data by setting the free memory location to\r\n            // current free memory location + data size + 32 bytes for data size value\r\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\r\n            // Store the size\r\n            mstore(ptr, returndatasize())\r\n            // Store the data\r\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\r\n            // Point the return data to the correct memory location\r\n            returnData := ptr\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns if a module is enabled\r\n     * @return True if the module is enabled\r\n     */\r\n    function isModuleEnabled(address module) public view returns (bool) {\r\n        return SENTINEL_MODULES != module && _modules[module] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @notice Setup function sets the initial storage of the contract.\r\n     *         Optionally executes a delegate call to another contract to setup the modules.\r\n     * @param to Optional destination address of call to execute.\r\n     * @param data Optional data of call to execute.\r\n     */\r\n    function _setupModules(address to, bytes memory data) internal {\r\n        if (_modules[SENTINEL_MODULES] != address(0))\r\n            revert ModulesAlreadyInitialized();\r\n        _modules[SENTINEL_MODULES] = SENTINEL_MODULES;\r\n        if (to != address(0))\r\n            if (!_execute(to, 0, data, Enum.Operation.DelegateCall, gasleft()))\r\n                // Setup has to complete successfully or transaction fails.\r\n                revert ModulesSetupExecutionFailed();\r\n    }\r\n\r\n    uint256[24] private __gap;\r\n}\r\n"
    },
    "contracts/test/upgrades/v1/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @title Proxy // This is the user's Smart Account\r\n * @notice Basic proxy that delegates all calls to a fixed implementation contract.\r\n * @dev    Implementation address is stored in the slot defined by the Proxy's address\r\n */\r\ncontract Proxy {\r\n    constructor(address _implementation) {\r\n        require(\r\n            _implementation != address(0),\r\n            \"Invalid implementation address\"\r\n        );\r\n\r\n        assembly {\r\n            sstore(address(), _implementation)\r\n        }\r\n    }\r\n\r\n    fallback() external payable {\r\n        address target;\r\n\r\n        assembly {\r\n            target := sload(address())\r\n            calldatacopy(0, 0, calldatasize())\r\n            let result := delegatecall(gas(), target, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            switch result\r\n            case 0 {\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/test/upgrades/v1/SmartAccountFactoryV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"./Proxy.sol\";\r\nimport \"./BaseSmartAccountV1.sol\";\r\nimport {DefaultCallbackHandler} from \"../../../handler/DefaultCallbackHandler.sol\";\r\n\r\n/**\r\n * @title Smart Account Factory - factory responsible for deploying Smart Accounts using CREATE2 and CREATE\r\n * @dev It deploys Smart Accounts as proxies pointing to `basicImplementation` that is immutable.\r\n *      This allows keeping the same address for the same Smart Account owner on various chains via CREATE2\r\n * @author Chirag Titiya - <chirag@biconomy.io>\r\n */\r\ncontract SmartAccountFactoryV1 {\r\n    address public immutable basicImplementation;\r\n    DefaultCallbackHandler public immutable minimalHandler;\r\n\r\n    event AccountCreation(\r\n        address indexed account,\r\n        address indexed owner,\r\n        uint256 indexed index\r\n    );\r\n    event AccountCreationWithoutIndex(\r\n        address indexed account,\r\n        address indexed owner\r\n    );\r\n\r\n    constructor(address _basicImplementation) {\r\n        require(\r\n            _basicImplementation != address(0),\r\n            \"implementation cannot be zero\"\r\n        );\r\n        basicImplementation = _basicImplementation;\r\n        minimalHandler = new DefaultCallbackHandler();\r\n    }\r\n\r\n    /**\r\n     * @notice Deploys account using create2 and points it to basicImplementation\r\n     * @param _owner EOA signatory for the account to be deployed\r\n     * @param _index extra salt that allows to deploy more account if needed for same EOA (default 0)\r\n     */\r\n    function deployCounterFactualAccount(\r\n        address _owner,\r\n        uint256 _index\r\n    ) public returns (address proxy) {\r\n        // create initializer data based on init method, _owner and minimalHandler\r\n        bytes memory initializer = _getInitializer(_owner);\r\n\r\n        bytes32 salt = keccak256(\r\n            abi.encodePacked(keccak256(initializer), _index)\r\n        );\r\n\r\n        bytes memory deploymentData = abi.encodePacked(\r\n            type(Proxy).creationCode,\r\n            uint256(uint160(basicImplementation))\r\n        );\r\n\r\n        assembly {\r\n            proxy := create2(\r\n                0x0,\r\n                add(0x20, deploymentData),\r\n                mload(deploymentData),\r\n                salt\r\n            )\r\n        }\r\n        require(address(proxy) != address(0), \"Create2 call failed\");\r\n\r\n        // calldata for init method\r\n        if (initializer.length > 0) {\r\n            assembly {\r\n                if eq(\r\n                    call(\r\n                        gas(),\r\n                        proxy,\r\n                        0,\r\n                        add(initializer, 0x20),\r\n                        mload(initializer),\r\n                        0,\r\n                        0\r\n                    ),\r\n                    0\r\n                ) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        }\r\n        emit AccountCreation(proxy, _owner, _index);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to retrieve the creation code used for the Proxy deployment.\r\n     * @return The creation code for the Proxy.\r\n     */\r\n    function accountCreationCode() public pure returns (bytes memory) {\r\n        return type(Proxy).creationCode;\r\n    }\r\n\r\n    /**\r\n     * @notice Deploys account using create and points it to _implementation\r\n     * @param _owner EOA signatory for the account to be deployed\r\n     * @return proxy address of the deployed account\r\n     */\r\n    function deployAccount(address _owner) public returns (address proxy) {\r\n        bytes memory deploymentData = abi.encodePacked(\r\n            type(Proxy).creationCode,\r\n            uint256(uint160(basicImplementation))\r\n        );\r\n\r\n        assembly {\r\n            proxy := create(\r\n                0x0,\r\n                add(0x20, deploymentData),\r\n                mload(deploymentData)\r\n            )\r\n        }\r\n        require(address(proxy) != address(0), \"Create call failed\");\r\n\r\n        bytes memory initializer = _getInitializer(_owner);\r\n\r\n        // calldata for init method\r\n        if (initializer.length > 0) {\r\n            assembly {\r\n                if eq(\r\n                    call(\r\n                        gas(),\r\n                        proxy,\r\n                        0,\r\n                        add(initializer, 0x20),\r\n                        mload(initializer),\r\n                        0,\r\n                        0\r\n                    ),\r\n                    0\r\n                ) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        }\r\n        emit AccountCreationWithoutIndex(proxy, _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to retrieve the initializer data for the account.\r\n     * @param _owner EOA signatory for the account to be deployed\r\n     * @return initializer bytes for init method\r\n     */\r\n    function _getInitializer(\r\n        address _owner\r\n    ) internal view returns (bytes memory) {\r\n        return\r\n            abi.encodeCall(\r\n                BaseSmartAccount.init,\r\n                (_owner, address(minimalHandler))\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Allows to find out account address prior to deployment\r\n     * @param _owner EOA signatory for the account to be deployed\r\n     * @param _index extra salt that allows to deploy more accounts if needed for same EOA (default 0)\r\n     */\r\n    function getAddressForCounterFactualAccount(\r\n        address _owner,\r\n        uint256 _index\r\n    ) external view returns (address _account) {\r\n        // create initializer data based on init method, _owner and minimalHandler\r\n        bytes memory initializer = _getInitializer(_owner);\r\n        bytes memory code = abi.encodePacked(\r\n            type(Proxy).creationCode,\r\n            uint256(uint160(basicImplementation))\r\n        );\r\n        bytes32 salt = keccak256(\r\n            abi.encodePacked(keccak256(initializer), _index)\r\n        );\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(bytes1(0xff), address(this), salt, keccak256(code))\r\n        );\r\n        _account = address(uint160(uint256(hash)));\r\n    }\r\n    // off-chain calculation\r\n    // return ethers.utils.getCreate2Address(<factory address>, <create2 salt>, ethers.utils.keccak256(creationCode + implementation));\r\n}\r\n"
    },
    "contracts/test/upgrades/v1/SmartAccountV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport {BaseSmartAccount, IEntryPoint, Transaction, FeeRefund, Enum, UserOperation} from \"./BaseSmartAccountV1.sol\";\r\nimport {ModuleManagerV1} from \"./ModuleManagerV1.sol\";\r\nimport {FallbackManagerV1} from \"./FallbackManagerV1.sol\";\r\nimport {SignatureDecoder} from \"../../../common/SignatureDecoder.sol\";\r\nimport {SecuredTokenTransfer} from \"../../../common/SecuredTokenTransfer.sol\";\r\nimport {LibAddress} from \"../../../libs/LibAddress.sol\";\r\nimport {ISignatureValidator} from \"../../../interfaces/ISignatureValidator.sol\";\r\nimport {Math} from \"../../../libs/Math.sol\";\r\nimport {IERC165} from \"../../../interfaces/IERC165.sol\";\r\nimport {ReentrancyGuard} from \"../../../common/ReentrancyGuard.sol\";\r\nimport {SmartAccountErrorsV1} from \"./ErrorsV1.sol\";\r\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport {IModule} from \"./IModuleV1.sol\";\r\n\r\n/**\r\n * @title SmartAccount - EIP-4337 compatible smart contract wallet.\r\n * @dev This contract is the base for the Smart Account functionality.\r\n *         - It provides the functionality to execute both gnosis-style txns and AA (EIP-4337) userOps\r\n *         - It allows to receive and manage assets.\r\n *         - It is responsible for managing the modules and fallbacks.\r\n *         - The Smart Account can be extended with modules, such as Social Recovery, Session Key and others.\r\n * @author Chirag Titiya - <chirag@biconomy.io>\r\n */\r\ncontract SmartAccountV1 is\r\n    BaseSmartAccount,\r\n    ModuleManagerV1,\r\n    FallbackManagerV1,\r\n    SignatureDecoder,\r\n    SecuredTokenTransfer,\r\n    IERC165,\r\n    ReentrancyGuard,\r\n    SmartAccountErrorsV1,\r\n    ISignatureValidator\r\n{\r\n    using ECDSA for bytes32;\r\n    using LibAddress for address;\r\n\r\n    // Storage Version\r\n    string public constant VERSION = \"1.0.0\";\r\n\r\n    // Domain Seperators keccak256(\"EIP712Domain(uint256 chainId,address verifyingContract)\");\r\n    bytes32 internal constant DOMAIN_SEPARATOR_TYPEHASH =\r\n        0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\r\n\r\n    // keccak256(\r\n    //     \"AccountTx(address to,uint256 value,bytes data,uint8 operation,uint256 targetTxGas,uint256 baseGas,uint256 gasPrice,uint256 tokenGasPriceFactor,address gasToken,address refundReceiver,uint256 nonce)\"\r\n    // );\r\n    bytes32 internal constant ACCOUNT_TX_TYPEHASH =\r\n        0xda033865d68bf4a40a5a7cb4159a99e33dba8569e65ea3e38222eb12d9e66eee;\r\n\r\n    // Owner storage\r\n    address public owner;\r\n\r\n    // changed to 2D nonce below\r\n    // @notice there is no _nonce\r\n    mapping(uint256 => uint256) public nonces;\r\n\r\n    // AA immutable storage\r\n    IEntryPoint private immutable _entryPoint;\r\n    uint256 private immutable _chainId;\r\n    address private immutable _self;\r\n\r\n    // Events\r\n\r\n    event ImplementationUpdated(\r\n        address indexed oldImplementation,\r\n        address indexed newImplementation\r\n    );\r\n    event EOAChanged(\r\n        address indexed _scw,\r\n        address indexed _oldEOA,\r\n        address indexed _newEOA\r\n    );\r\n    event AccountHandlePayment(bytes32 indexed txHash, uint256 indexed payment);\r\n    event SmartAccountReceivedNativeToken(\r\n        address indexed sender,\r\n        uint256 indexed value\r\n    );\r\n\r\n    /// modifiers\r\n    /**\r\n     * @dev Modifier to allow only the owner to call the function.\r\n     * Reverts with CallerIsNotOwner if the caller is not the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) revert CallerIsNotOwner(msg.sender);\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Modifier to allow only the owner or the contract itself to call the function.\r\n     * Reverts with MixedAuthFail if the caller is not the owner or the contract itself.\r\n     */\r\n    modifier mixedAuth() {\r\n        if (msg.sender != owner && msg.sender != address(this))\r\n            revert MixedAuthFail(msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor that sets the owner of the contract and the entry point contract.\r\n     * @param anEntryPoint The address of the entry point contract.\r\n     */\r\n    constructor(IEntryPoint anEntryPoint) {\r\n        _self = address(this);\r\n        // By setting the owner it is not possible to call init anymore,\r\n        // so we create an account with fixed non-zero owner.\r\n        // This is an unusable account, perfect for the singleton\r\n        owner = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n        if (address(anEntryPoint) == address(0))\r\n            revert EntryPointCannotBeZero();\r\n        _entryPoint = anEntryPoint;\r\n        _chainId = block.chainid;\r\n    }\r\n\r\n    /// Getters\r\n    /**\r\n     * @dev Returns the address of the implementation contract associated with this contract.\r\n     * @notice The implementation address is stored in the contract's storage slot with index 0.\r\n     */\r\n    function getImplementation()\r\n        external\r\n        view\r\n        returns (address _implementation)\r\n    {\r\n        assembly {\r\n            _implementation := sload(address())\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to change the owner of the smart account by current owner or self-call (modules)\r\n     * @param _newOwner Address of the new signatory\r\n     */\r\n    function setOwner(address _newOwner) public mixedAuth {\r\n        if (_newOwner == address(0)) revert OwnerCannotBeZero();\r\n        if (_newOwner == address(this)) revert OwnerCanNotBeSelf();\r\n        if (_newOwner == owner) revert OwnerProvidedIsSame();\r\n        address oldOwner = owner;\r\n        assembly {\r\n            sstore(owner.slot, _newOwner)\r\n        }\r\n        emit EOAChanged(address(this), oldOwner, _newOwner);\r\n    }\r\n\r\n    /**\r\n     * @notice All the new implementations MUST have this method!\r\n     * @notice Updates the implementation of the base wallet\r\n     * @param _implementation New wallet implementation\r\n     */\r\n    function updateImplementation(\r\n        address _implementation\r\n    ) public virtual mixedAuth {\r\n        require(_implementation != address(0), \"Address cannot be zero\");\r\n        if (!_implementation.isContract())\r\n            revert InvalidImplementation(_implementation);\r\n        address oldImplementation;\r\n\r\n        assembly {\r\n            oldImplementation := sload(address())\r\n            sstore(address(), _implementation)\r\n        }\r\n        emit ImplementationUpdated(oldImplementation, _implementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\r\n     * @return bytes32 The domain separator hash.\r\n     */\r\n    function domainSeparator() public view returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    DOMAIN_SEPARATOR_TYPEHASH,\r\n                    block.chainid,\r\n                    address(this)\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the ID of the chain the contract is currently deployed on.\r\n     * @return _chainId The ID of the current chain as a uint256.\r\n     */\r\n    function getChainId() public view returns (uint256) {\r\n        return _chainId;\r\n    }\r\n\r\n    /**\r\n     * @dev returns a value from the nonces 2d mapping\r\n     * @param batchId : the key of the user's batch being queried\r\n     * @return nonce : the number of transactions made within said batch\r\n     */\r\n    function getNonce(uint256 batchId) public view virtual returns (uint256) {\r\n        return nonces[batchId];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current entry point used by this account.\r\n     * @return EntryPoint as an `IEntryPoint` interface.\r\n     * @dev This function should be implemented by the subclass to return the current entry point used by this account.\r\n     */\r\n    function entryPoint() public view virtual override returns (IEntryPoint) {\r\n        return _entryPoint;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialize the Smart Account with required states\r\n     * @param _owner Signatory of the Smart Account\r\n     * @param _handler Default fallback handler provided in Smart Account\r\n     * @notice devs need to make sure it is only callble once by initiazer or state check restrictions\r\n     * @notice any further implementations that introduces a new state must have a reinit method\r\n     * @notice init is prevented here by setting owner in the constructor and checking here for address(0)\r\n     */\r\n    function init(address _owner, address _handler) external virtual override {\r\n        if (owner != address(0)) revert AlreadyInitialized();\r\n        if (_owner == address(0)) revert OwnerCannotBeZero();\r\n        owner = _owner;\r\n        _setFallbackHandler(_handler);\r\n        _setupModules(address(0), bytes(\"\"));\r\n    }\r\n\r\n    /**\r\n     * @dev Gnosis style transaction with optional repay in native tokens OR ERC20\r\n     * @dev Allows to execute a transaction confirmed by required signature/s and then pays the account that submitted the transaction.\r\n     * @dev Function name optimized to have hash started with zeros to make this function calls cheaper\r\n     * @notice The fees are always transferred, even if the user transaction fails.\r\n     * @param _tx Smart Account transaction\r\n     * @param refundInfo Required information for gas refunds\r\n     * @param signatures Packed signature/s data ({bytes32 r}{bytes32 s}{uint8 v})\r\n     */\r\n    function execTransaction_S6W(\r\n        Transaction memory _tx,\r\n        FeeRefund memory refundInfo,\r\n        bytes memory signatures\r\n    ) public payable virtual nonReentrant returns (bool success) {\r\n        uint256 startGas = gasleft();\r\n        bytes32 txHash;\r\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\r\n        {\r\n            bytes memory txHashData = encodeTransactionData(\r\n                // Transaction info\r\n                _tx,\r\n                // Payment info\r\n                refundInfo,\r\n                // Signature info\r\n                nonces[1]++\r\n            );\r\n            txHash = keccak256(txHashData);\r\n            checkSignatures(txHash, signatures);\r\n        }\r\n\r\n        // We require some gas to emit the events (at least 2500) after the execution and some to perform code until the execution (500)\r\n        // We also include the 1/64 in the check that is not send along with a call to counteract potential shortings because of EIP-150\r\n        // Bitshift left 6 bits means multiplying by 64, just more gas efficient\r\n        if (\r\n            gasleft() <\r\n            Math.max((_tx.targetTxGas << 6) / 63, _tx.targetTxGas + 2500) + 500\r\n        )\r\n            revert NotEnoughGasLeft(\r\n                gasleft(),\r\n                Math.max((_tx.targetTxGas << 6) / 63, _tx.targetTxGas + 2500) +\r\n                    500\r\n            );\r\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\r\n        {\r\n            // If the gasPrice is 0 we assume that nearly all available gas can be used (it is always more than targetTxGas)\r\n            // We only substract 2500 (compared to the 3000 before) to ensure that the amount passed is still higher than targetTxGas\r\n            success = _execute(\r\n                _tx.to,\r\n                _tx.value,\r\n                _tx.data,\r\n                _tx.operation,\r\n                refundInfo.gasPrice == 0 ? (gasleft() - 2500) : _tx.targetTxGas\r\n            );\r\n            // If no targetTxGas and no gasPrice was set (e.g. both are 0), then the internal tx is required to be successful\r\n            // This makes it possible to use `estimateGas` without issues, as it searches for the minimum gas where the tx doesn't revert\r\n            if (!success && _tx.targetTxGas == 0 && refundInfo.gasPrice == 0)\r\n                revert CanNotEstimateGas(\r\n                    _tx.targetTxGas,\r\n                    refundInfo.gasPrice,\r\n                    success\r\n                );\r\n            // We transfer the calculated tx costs to the tx.origin to avoid sending it to intermediate contracts that have made calls\r\n            uint256 payment;\r\n            if (refundInfo.gasPrice != 0) {\r\n                payment = _handlePayment(\r\n                    startGas - gasleft(),\r\n                    refundInfo.baseGas,\r\n                    refundInfo.gasPrice,\r\n                    refundInfo.tokenGasPriceFactor,\r\n                    refundInfo.gasToken,\r\n                    refundInfo.refundReceiver\r\n                );\r\n                emit AccountHandlePayment(txHash, payment);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Interface function with the standard name for execTransaction_S6W\r\n     */\r\n    function execTransaction(\r\n        Transaction memory _tx,\r\n        FeeRefund memory refundInfo,\r\n        bytes memory signatures\r\n    ) external payable virtual override returns (bool) {\r\n        return execTransaction_S6W(_tx, refundInfo, signatures);\r\n    }\r\n\r\n    /**\r\n     * @dev Handles the payment for a transaction refund from Smart Account to Relayer.\r\n     * @param gasUsed Gas used by the transaction.\r\n     * @param baseGas Gas costs that are independent of the transaction execution\r\n     * (e.g. base transaction fee, signature check, payment of the refund, emitted events).\r\n     * @param gasPrice Gas price / TokenGasPrice (gas price in the context of token using offchain price feeds)\r\n     * that should be used for the payment calculation.\r\n     * @param tokenGasPriceFactor factor by which calculated token gas price is already multiplied.\r\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\r\n     * @return payment The amount of payment made in the specified token.\r\n     */\r\n    function _handlePayment(\r\n        uint256 gasUsed,\r\n        uint256 baseGas,\r\n        uint256 gasPrice,\r\n        uint256 tokenGasPriceFactor,\r\n        address gasToken,\r\n        address payable refundReceiver\r\n    ) private returns (uint256 payment) {\r\n        if (tokenGasPriceFactor == 0) revert TokenGasPriceFactorCanNotBeZero();\r\n        // solhint-disable-next-line avoid-tx-origin\r\n        address payable receiver = refundReceiver == address(0)\r\n            ? payable(tx.origin)\r\n            : refundReceiver;\r\n        if (gasToken == address(0)) {\r\n            // For ETH we will only adjust the gas price to not be higher than the actual used gas price\r\n            payment =\r\n                (gasUsed + baseGas) *\r\n                (gasPrice < tx.gasprice ? gasPrice : tx.gasprice);\r\n            bool success;\r\n            assembly {\r\n                success := call(gas(), receiver, payment, 0, 0, 0, 0)\r\n            }\r\n            if (!success)\r\n                revert TokenTransferFailed(address(0), receiver, payment);\r\n        } else {\r\n            payment =\r\n                ((gasUsed + baseGas) * (gasPrice)) /\r\n                (tokenGasPriceFactor);\r\n            if (!_transferToken(gasToken, receiver, payment))\r\n                revert TokenTransferFailed(gasToken, receiver, payment);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to estimate a transaction.\r\n     * @notice This method is only meant for estimation purpose, therefore the call will always revert and encode the result in the revert data.\r\n     * @notice Call this method to get an estimate of the handlePayment costs that are deducted with `execTransaction`\r\n     * @param gasUsed Gas used by the transaction.\r\n     * @param baseGas Gas costs that are independent of the transaction execution\r\n     * (e.g. base transaction fee, signature check, payment of the refund, emitted events).\r\n     * @param gasPrice Gas price / TokenGasPrice (gas price in the context of token using offchain price feeds)\r\n     * that should be used for the payment calculation.\r\n     * @param tokenGasPriceFactor factor by which calculated token gas price is already multiplied.\r\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\r\n     * @return requiredGas Estimate of refunds\r\n     */\r\n    function handlePaymentRevert(\r\n        uint256 gasUsed,\r\n        uint256 baseGas,\r\n        uint256 gasPrice,\r\n        uint256 tokenGasPriceFactor,\r\n        address gasToken,\r\n        address payable refundReceiver\r\n    ) external returns (uint256 requiredGas) {\r\n        require(tokenGasPriceFactor != 0, \"invalid tokenGasPriceFactor\");\r\n        uint256 startGas = gasleft();\r\n        // solhint-disable-next-line avoid-tx-origin\r\n        address payable receiver = refundReceiver == address(0)\r\n            ? payable(tx.origin)\r\n            : refundReceiver;\r\n        if (gasToken == address(0)) {\r\n            // For ETH we will only adjust the gas price to not be higher than the actual used gas price\r\n            uint256 payment = (gasUsed + baseGas) *\r\n                (gasPrice < tx.gasprice ? gasPrice : tx.gasprice);\r\n            bool success;\r\n            assembly {\r\n                success := call(gas(), receiver, payment, 0, 0, 0, 0)\r\n            }\r\n            if (!success)\r\n                revert TokenTransferFailed(address(0), receiver, payment);\r\n        } else {\r\n            uint256 payment = ((gasUsed + baseGas) * (gasPrice)) /\r\n                (tokenGasPriceFactor);\r\n            if (!_transferToken(gasToken, receiver, payment))\r\n                revert TokenTransferFailed(gasToken, receiver, payment);\r\n        }\r\n        unchecked {\r\n            requiredGas = startGas - gasleft();\r\n        }\r\n        revert(string(abi.encodePacked(requiredGas)));\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\r\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\r\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\r\n     */\r\n    function checkSignatures(\r\n        bytes32 dataHash,\r\n        bytes memory signatures\r\n    ) public view virtual {\r\n        require(signatures.length >= 65, \"Invalid signatures length\");\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        address _signer;\r\n        (v, r, s) = _signatureSplit(signatures);\r\n        if (v == 0) {\r\n            // If v is 0 then it is a contract signature\r\n            // When handling contract signatures the address of the signer contract is encoded into r\r\n            _signer = address(uint160(uint256(r)));\r\n\r\n            // Check that signature data pointer (s) is not pointing inside the static part of the signatures bytes\r\n            // Here we check that the pointer is not pointing inside the part that is being processed\r\n            if (uint256(s) < 65)\r\n                revert WrongContractSignatureFormat(uint256(s), 0, 0);\r\n\r\n            // Check if the contract signature is in bounds: start of data is s + 32 and end is start + signature length\r\n            uint256 contractSignatureLen;\r\n\r\n            assembly {\r\n                contractSignatureLen := mload(add(add(signatures, s), 0x20))\r\n            }\r\n            if (uint256(s) + 32 + contractSignatureLen > signatures.length)\r\n                revert WrongContractSignatureFormat(\r\n                    uint256(s),\r\n                    contractSignatureLen,\r\n                    signatures.length\r\n                );\r\n\r\n            // Check signature\r\n            bytes memory contractSignature;\r\n\r\n            assembly {\r\n                // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\r\n                contractSignature := add(add(signatures, s), 0x20)\r\n            }\r\n            if (\r\n                ISignatureValidator(_signer).isValidSignature(\r\n                    dataHash,\r\n                    contractSignature\r\n                ) != EIP1271_MAGIC_VALUE\r\n            ) revert WrongContractSignature(contractSignature);\r\n        } else if (v > 30) {\r\n            // If v > 30 then default va (27,28) has been adjusted for eth_sign flow\r\n            // To support eth_sign and similar we adjust v and hash the messageHash with the Ethereum message prefix before applying ecrecover\r\n            (_signer, ) = dataHash.toEthSignedMessageHash().tryRecover(\r\n                v - 4,\r\n                r,\r\n                s\r\n            );\r\n        } else {\r\n            (_signer, ) = dataHash.tryRecover(v, r, s);\r\n        }\r\n        if (_signer != owner) revert InvalidSignature();\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to estimate a transaction.\r\n     *      This method is only meant for estimation purpose, therefore the call will always revert and encode the result in the revert data.\r\n     *      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the wallet with `execTransaction`\r\n     * @param to Destination address of the transaction.\r\n     * @param value Ether value of transaction.\r\n     * @param data Data payload of transaction.\r\n     * @param operation Operation type of transaction.\r\n     * @return Estimate without refunds and overhead fees (base transaction and payload data gas costs).\r\n     */\r\n    function requiredTxGas(\r\n        address to,\r\n        uint256 value,\r\n        bytes calldata data,\r\n        Enum.Operation operation\r\n    ) external returns (uint256) {\r\n        uint256 startGas = gasleft();\r\n        // We don't provide an error message here, as we use it to return the estimate\r\n        if (!_execute(to, value, data, operation, gasleft()))\r\n            revert ExecutionFailed();\r\n        // Convert response to string and return via error message\r\n        unchecked {\r\n            revert(string(abi.encodePacked(startGas - gasleft())));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns hash to be signed by owner.\r\n     * @param to Destination address.\r\n     * @param value Ether value.\r\n     * @param data Data payload.\r\n     * @param operation Operation type.\r\n     * @param targetTxGas Fas that should be used for the internal Smart Account transaction.\r\n     * @param baseGas Additional Gas costs for data used to trigger the transaction.\r\n     * @param gasPrice Maximum gas price/ token gas price that should be used for this transaction.\r\n     * @param tokenGasPriceFactor factor by which calculated token gas price is already multiplied.\r\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\r\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\r\n     * @param _nonce Transaction nonce.\r\n     * @return Transaction hash.\r\n     */\r\n    function getTransactionHash(\r\n        address to,\r\n        uint256 value,\r\n        bytes calldata data,\r\n        Enum.Operation operation,\r\n        uint256 targetTxGas,\r\n        uint256 baseGas,\r\n        uint256 gasPrice,\r\n        uint256 tokenGasPriceFactor,\r\n        address gasToken,\r\n        address payable refundReceiver,\r\n        uint256 _nonce\r\n    ) public view returns (bytes32) {\r\n        Transaction memory _tx = Transaction({\r\n            to: to,\r\n            value: value,\r\n            data: data,\r\n            operation: operation,\r\n            targetTxGas: targetTxGas\r\n        });\r\n        FeeRefund memory refundInfo = FeeRefund({\r\n            baseGas: baseGas,\r\n            gasPrice: gasPrice,\r\n            tokenGasPriceFactor: tokenGasPriceFactor,\r\n            gasToken: gasToken,\r\n            refundReceiver: refundReceiver\r\n        });\r\n        return keccak256(encodeTransactionData(_tx, refundInfo, _nonce));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the bytes that are hashed to be signed by owner.\r\n     * @param _tx The wallet transaction to be signed.\r\n     * @param refundInfo Required information for gas refunds.\r\n     * @param _nonce Transaction nonce.\r\n     * @return transactionHash bytes that are hashed to be signed by the owner.\r\n     */\r\n    function encodeTransactionData(\r\n        Transaction memory _tx,\r\n        FeeRefund memory refundInfo,\r\n        uint256 _nonce\r\n    ) public view returns (bytes memory) {\r\n        bytes32 accountTxHash = keccak256(\r\n            abi.encode(\r\n                ACCOUNT_TX_TYPEHASH,\r\n                _tx.to,\r\n                _tx.value,\r\n                keccak256(_tx.data),\r\n                _tx.operation,\r\n                _tx.targetTxGas,\r\n                refundInfo.baseGas,\r\n                refundInfo.gasPrice,\r\n                refundInfo.tokenGasPriceFactor,\r\n                refundInfo.gasToken,\r\n                refundInfo.refundReceiver,\r\n                _nonce\r\n            )\r\n        );\r\n        return\r\n            bytes.concat(\r\n                bytes1(0x19),\r\n                bytes1(0x01),\r\n                domainSeparator(),\r\n                accountTxHash\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Utility method to be able to transfer native tokens out of Smart Account\r\n     * @notice only owner/ signatory of Smart Account with enough gas to spend can call this method\r\n     * @notice While enabling multisig module and renouncing ownership this will not work\r\n     * @param dest Destination address\r\n     * @param amount Amount of native tokens\r\n     */\r\n    function transfer(address payable dest, uint256 amount) external onlyOwner {\r\n        if (dest == address(0)) revert TransferToZeroAddressAttempt();\r\n        bool success;\r\n        assembly {\r\n            success := call(gas(), dest, amount, 0, 0, 0, 0)\r\n        }\r\n        if (!success) revert TokenTransferFailed(address(0), dest, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Utility method to be able to transfer ERC20 tokens out of Smart Account\r\n     * @notice only owner/ signatory of Smart Account with enough gas to spend can call this method\r\n     * @notice While enabling multisig module and renouncing ownership this will not work\r\n     * @param token Token address\r\n     * @param dest Destination/ Receiver address\r\n     * @param amount Amount of tokens\r\n     */\r\n    function pullTokens(\r\n        address token,\r\n        address dest,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        if (dest == address(0)) revert TransferToZeroAddressAttempt();\r\n        if (!_transferToken(token, dest, amount))\r\n            revert TokenTransferFailed(token, dest, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Execute a transaction (called directly from owner, or by entryPoint)\r\n     * @notice Name is optimized for this method to be cheaper to be called\r\n     * @param dest Address of the contract to call\r\n     * @param value Amount of native tokens to send along with the transaction\r\n     * @param func Data of the transaction\r\n     */\r\n    function executeCall_s1m(\r\n        address dest,\r\n        uint256 value,\r\n        bytes calldata func\r\n    ) public {\r\n        _requireFromEntryPointOrOwner();\r\n        _call(dest, value, func);\r\n    }\r\n\r\n    /**\r\n     * @dev Interface function with the standard name for executeCall_s1m\r\n     * @param dest Address of the contract to call\r\n     * @param value Amount of native tokens to send along with the transaction\r\n     * @param func Data of the transaction\r\n     */\r\n    function executeCall(\r\n        address dest,\r\n        uint256 value,\r\n        bytes calldata func\r\n    ) external {\r\n        executeCall_s1m(dest, value, func);\r\n    }\r\n\r\n    /**\r\n     * @dev Execute a sequence of transactions\r\n     * @notice Name is optimized for this method to be cheaper to be called\r\n     * @param dest Addresses of the contracts to call\r\n     * @param value Amounts of native tokens to send along with the transactions\r\n     * @param func Data of the transactions\r\n     */\r\n    function executeBatchCall_4by(\r\n        address[] calldata dest,\r\n        uint256[] calldata value,\r\n        bytes[] calldata func\r\n    ) public {\r\n        _requireFromEntryPointOrOwner();\r\n        if (\r\n            dest.length == 0 ||\r\n            dest.length != value.length ||\r\n            value.length != func.length\r\n        ) revert WrongBatchProvided(dest.length, value.length, func.length, 0);\r\n        for (uint256 i; i < dest.length; ) {\r\n            _call(dest[i], value[i], func[i]);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Interface function with the standard name for executeBatchCall_4by\r\n     * @param dest Addresses of the contracts to call\r\n     * @param value Amounts of native tokens to send along with the transactions\r\n     * @param func Data of the transactions\r\n     */\r\n    function executeBatchCall(\r\n        address[] calldata dest,\r\n        uint256[] calldata value,\r\n        bytes[] calldata func\r\n    ) external {\r\n        executeBatchCall_4by(dest, value, func);\r\n    }\r\n\r\n    /**\r\n     * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)\r\n     * @dev If owner is a smart-contract (other smart contract wallet or module, that controls\r\n     *      signature verifications - like multisig), forward isValidSignature request to it.\r\n     *      In case of multisig, _signature can be several concatenated signatures\r\n     *      If owner is EOA, perform a regular ecrecover.\r\n     * @param _dataHash 32 bytes hash of the data signed on the behalf of address(msg.sender)\r\n     * @param _signature Signature byte array associated with _dataHash\r\n     * @return bytes4 value.\r\n     */\r\n    function isValidSignature(\r\n        bytes32 _dataHash,\r\n        bytes memory _signature\r\n    ) public view override returns (bytes4) {\r\n        if (owner.code.length > 0) {\r\n            return\r\n                ISignatureValidator(owner).isValidSignature(\r\n                    _dataHash,\r\n                    _signature\r\n                );\r\n        }\r\n        if (owner == _dataHash.recover(_signature)) {\r\n            return EIP1271_MAGIC_VALUE;\r\n        }\r\n        return bytes4(0xffffffff);\r\n    }\r\n\r\n    /**\r\n     * @dev Check current account deposit in the entryPoint\r\n     */\r\n    function getDeposit() public view returns (uint256) {\r\n        return entryPoint().balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit more funds for this account in the entryPoint\r\n     */\r\n    function addDeposit() public payable {\r\n        entryPoint().depositTo{value: msg.value}(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw value from the account's deposit\r\n     * @param withdrawAddress target to send to\r\n     * @param amount to withdraw\r\n     */\r\n    function withdrawDepositTo(\r\n        address payable withdrawAddress,\r\n        uint256 amount\r\n    ) public payable onlyOwner {\r\n        entryPoint().withdrawTo(withdrawAddress, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @param _interfaceId The interface identifier, as specified in ERC165\r\n     * @return `true` if the contract implements `_interfaceID`\r\n     */\r\n    function supportsInterface(\r\n        bytes4 _interfaceId\r\n    ) external view virtual override returns (bool) {\r\n        return _interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\r\n    }\r\n\r\n    /**\r\n     * @dev This function is a special fallback function that is triggered when the contract receives Ether.\r\n     * It logs an event indicating the amount of Ether received and the sender's address.\r\n     * @notice This function is marked as external and payable, meaning it can be called from external\r\n     * sources and accepts Ether as payment.\r\n     */\r\n    receive() external payable {\r\n        if (address(this) == _self) revert DelegateCallsOnly();\r\n        emit SmartAccountReceivedNativeToken(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev This function allows the owner or entry point to execute certain actions.\r\n     * If the caller is not authorized, the function will revert with an error message.\r\n     * @notice This modifier is marked as internal and can only be called within the contract itself.\r\n     */\r\n    function _requireFromEntryPointOrOwner() internal view {\r\n        if (msg.sender != address(entryPoint()) && msg.sender != owner)\r\n            revert CallerIsNotEntryPointOrOwner(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev internal method that fecilitates the extenral calls from SmartAccount\r\n     * @dev similar to execute() of Executor.sol\r\n     * @param target destination address contract/non-contract\r\n     * @param value amount of native tokens\r\n     * @param data function singature of destination\r\n     */\r\n    function _call(address target, uint256 value, bytes memory data) internal {\r\n        assembly {\r\n            let success := call(\r\n                gas(),\r\n                target,\r\n                value,\r\n                add(data, 0x20),\r\n                mload(data),\r\n                0,\r\n                0\r\n            )\r\n            let ptr := mload(0x40)\r\n            returndatacopy(ptr, 0, returndatasize())\r\n            if iszero(success) {\r\n                revert(ptr, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Implements the template method of BaseAccount and validates the user's signature for a given operation.\r\n     * @notice This function is marked as internal and virtual, and it overrides the BaseAccount function of the same name.\r\n     * @param userOp The user operation to be validated, provided as a `UserOperation` calldata struct.\r\n     * @param userOpHash The hashed version of the user operation, provided as a `bytes32` value.\r\n     */\r\n    function _validateSignature(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash\r\n    ) internal virtual override returns (uint256 validationData) {\r\n        // below changes need formal verification.\r\n        bytes calldata userOpData = userOp.callData;\r\n        if (userOpData.length > 0) {\r\n            bytes4 methodSig = bytes4(userOpData[:4]);\r\n            // If method to be called is executeCall then only check for module transaction\r\n            if (methodSig == this.executeCall.selector) {\r\n                (address _to, , ) = abi.decode(\r\n                    userOpData[4:],\r\n                    (address, uint, bytes)\r\n                );\r\n                if (address(_modules[_to]) != address(0))\r\n                    return IModule(_to).validateSignature(userOp, userOpHash);\r\n            }\r\n        }\r\n        bytes32 hash = userOpHash.toEthSignedMessageHash();\r\n        if (owner != hash.recover(userOp.signature))\r\n            return SIG_VALIDATION_FAILED;\r\n        return 0;\r\n    }\r\n}\r\n"
    },
    "contracts/test/WrongStorageAccessValidationModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport {EcdsaOwnershipRegistryModule} from \"../modules/EcdsaOwnershipRegistryModule.sol\";\r\nimport {UserOperation} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\r\n\r\ncontract WrongStorageAccessValidationModule is EcdsaOwnershipRegistryModule {\r\n    uint256 public constant MAX_VALIDATION_COUNT = 10;\r\n\r\n    // not associated storage\r\n    uint256 private _usageCounter = 0;\r\n\r\n    function validateUserOp(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash\r\n    ) external view virtual override returns (uint256) {\r\n        require(\r\n            _usageCounter < MAX_VALIDATION_COUNT,\r\n            \"Renew module subscription\"\r\n        );\r\n\r\n        // Usual Stuff\r\n        (bytes memory cleanEcdsaSignature, ) = abi.decode(\r\n            userOp.signature,\r\n            (bytes, address)\r\n        );\r\n        if (_verifySignature(userOpHash, cleanEcdsaSignature, userOp.sender)) {\r\n            return VALIDATION_SUCCESS;\r\n        }\r\n        return SIG_VALIDATION_FAILED;\r\n    }\r\n}\r\n"
    },
    "contracts/utils/Decoder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ncontract Decoder {\r\n    function decode(\r\n        address to,\r\n        bytes memory data\r\n    ) public returns (bytes memory) {\r\n        (bool success, bytes memory result) = to.call(data);\r\n        require(!success, \"Call failed\");\r\n        return result;\r\n    }\r\n}\r\n"
    },
    "contracts/utils/GasEstimator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n// Generic contract for estimating gas on any target and data\r\ncontract GasEstimator {\r\n    function estimate(\r\n        address _to,\r\n        bytes calldata _data\r\n    ) external returns (bool success, bytes memory result, uint256 gas) {\r\n        // solhint-disable\r\n        uint256 initialGas = gasleft();\r\n        (success, result) = _to.call(_data);\r\n        gas = initialGas - gasleft();\r\n        // solhint-enable\r\n    }\r\n}\r\n"
    },
    "contracts/utils/GasEstimatorSmartAccount.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport {SmartAccountFactory} from \"../factory/SmartAccountFactory.sol\";\r\n\r\n// Contract for estimating gas on undeployed smart account\r\n// Deploys a smart account and then calls the appropriate method\r\ncontract GasEstimatorSmartAccount {\r\n    function estimate(\r\n        address _actualWallet,\r\n        address _factory,\r\n        address _moduleSetupContract,\r\n        bytes calldata _moduleSetupData,\r\n        uint256 _index,\r\n        bytes calldata _data // execTransaction data // counterFactual wallet should have assets if required\r\n    ) external returns (bool success, bytes memory result, uint256 gas) {\r\n        uint256 initialGas = gasleft();\r\n        SmartAccountFactory(_factory).deployCounterFactualAccount(\r\n            _moduleSetupContract,\r\n            _moduleSetupData,\r\n            _index\r\n        );\r\n        (success, result) = _actualWallet.call(_data);\r\n        gas = initialGas - gasleft();\r\n    }\r\n}\r\n"
    },
    "contracts/utils/PancakeSwapHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.17;\r\n\r\n/* solhint-disable not-rely-on-time */\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\r\nimport \"@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol\";\r\nimport \"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\";\r\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\r\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\r\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\r\nimport \"contracts/interfaces/IWETH.sol\";\r\n\r\nabstract contract UniswapHelper {\r\n    event UniswapReverted(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin\r\n    );\r\n\r\n    struct UniswapHelperConfig {\r\n        /// @notice Minimum native asset amount to receive from a single swap\r\n        uint256 minSwapAmount;\r\n        uint8 slippage;\r\n    }\r\n    /// @notice The Uniswap V3 SwapRouter contract\r\n    ISwapRouter public immutable uniswapRoute;\r\n\r\n    IQuoterV2 public immutable uniswapQuote;\r\n\r\n    /// @notice The ERC20 token used for transaction fee payments\r\n    // IERC20 public immutable token;\r\n\r\n    /// @notice The ERC-20 token that wraps the native asset for current chain\r\n    IERC20 public immutable wrappedNative;\r\n\r\n    UniswapHelperConfig private uniswapHelperConfig;\r\n\r\n    constructor(\r\n        IERC20 _wrappedNative,\r\n        ISwapRouter _uniswapRoute,\r\n        IQuoterV2 _uniswapQuote,\r\n        UniswapHelperConfig memory _uniswapHelperConfig\r\n    ) {\r\n        //_token.approve(address(_uniswap), type(uint256).max);\r\n        //token = _token;\r\n        wrappedNative = _wrappedNative;\r\n        uniswapRoute = _uniswapRoute;\r\n        uniswapQuote = _uniswapQuote;\r\n        _setUniswapHelperConfiguration(_uniswapHelperConfig);\r\n    }\r\n\r\n    function _setUniswapHelperConfiguration(\r\n        UniswapHelperConfig memory _uniswapHelperConfig\r\n    ) internal {\r\n        uniswapHelperConfig = _uniswapHelperConfig;\r\n    }\r\n\r\n    function _maybeSwapTokenToWeth(\r\n        IERC20 tokenIn,\r\n        uint24 fee\r\n    ) internal returns (uint256) {\r\n        uint256 tokenBalance = tokenIn.balanceOf(address(this));\r\n\r\n        uint256 amountOutMin = addSlippage(\r\n            estimatesTokenToToken(\r\n                address(tokenIn),\r\n                address(wrappedNative),\r\n                tokenBalance,\r\n                fee\r\n            ),\r\n            uniswapHelperConfig.slippage\r\n        );\r\n\r\n        if (amountOutMin < uniswapHelperConfig.minSwapAmount) {\r\n            return 0;\r\n        }\r\n\r\n        // note: calling 'swapToToken' but destination token is Wrapped Ether\r\n        return\r\n            swapToToken(\r\n                address(tokenIn),\r\n                address(wrappedNative),\r\n                tokenBalance,\r\n                amountOutMin,\r\n                fee\r\n            );\r\n    }\r\n\r\n    function addSlippage(\r\n        uint256 amount,\r\n        uint8 slippage\r\n    ) private pure returns (uint256) {\r\n        return (amount * (1000 - slippage)) / 1000;\r\n    }\r\n\r\n    function unwrapWeth(uint256 amount) internal {\r\n        IWETH(address(wrappedNative)).withdraw(amount);\r\n    }\r\n\r\n    // swap ERC-20 tokens at market price\r\n    function swapToToken(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        uint24 fee\r\n    ) internal returns (uint256 amountOut) {\r\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\r\n            .ExactInputSingleParams(\r\n                tokenIn, //tokenIn\r\n                tokenOut, //tokenOut\r\n                fee,\r\n                address(this),\r\n                block.timestamp, //deadline\r\n                amountIn,\r\n                amountOutMin,\r\n                uint160(0)\r\n            );\r\n\r\n        try uniswapRoute.exactInputSingle(params) returns (uint256 _amountOut) {\r\n            amountOut = _amountOut;\r\n        } catch {\r\n            emit UniswapReverted(tokenIn, tokenOut, amountIn, amountOutMin);\r\n            amountOut = 0;\r\n        }\r\n    }\r\n\r\n    function encodeFirstPool(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) public pure returns (bytes memory path) {\r\n        path = abi.encodePacked(tokenA, fee, tokenB);\r\n    }\r\n\r\n    function estimatesTokenToToken(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint24 fee\r\n    ) public returns (uint256 amountOut) {\r\n        bytes memory path = encodeFirstPool(tokenIn, tokenOut, fee);\r\n        (amountOut, , , ) = uniswapQuote.quoteExactInput(path, amountIn);\r\n    }\r\n}"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}\n"
    },
    "solidity-bytes-utils/contracts/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\n\nlibrary BytesLib {\n    function concat(\n        bytes memory _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(0x40, and(\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n              not(31) // Round down to the nearest 32 bytes.\n            ))\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes.slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                                ),\n                                // and now shift left the number of bytes to\n                                // leave space for the length in the slot\n                                exp(0x100, sub(32, newlength))\n                            ),\n                            // increase length by the double of the memory\n                            // bytes length\n                            mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                    sc,\n                    add(\n                        and(\n                            fslot,\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                        ),\n                        and(mload(mc), mask)\n                    )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1 , \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                // the next line is the loop condition:\n                // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(\n        bytes storage _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        view\n        returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint256(mc < end) + cb == 2)\n                        for {} eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}