{
  "language": "Solidity",
  "sources": {
    "@account-abstraction/contracts/core/Helpers.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable no-inline-assembly */\n\n/**\n * returned data from validateUserOp.\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\n * @param aggregator - address(0) - the account validated the signature by itself.\n *              address(1) - the account failed to validate the signature.\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\n * @param validAfter - this UserOp is valid only after this timestamp.\n * @param validaUntil - this UserOp is valid only up to this timestamp.\n */\n    struct ValidationData {\n        address aggregator;\n        uint48 validAfter;\n        uint48 validUntil;\n    }\n\n//extract sigFailed, validAfter, validUntil.\n// also convert zero validUntil to type(uint48).max\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\n        address aggregator = address(uint160(validationData));\n        uint48 validUntil = uint48(validationData >> 160);\n        if (validUntil == 0) {\n            validUntil = type(uint48).max;\n        }\n        uint48 validAfter = uint48(validationData >> (48 + 160));\n        return ValidationData(aggregator, validAfter, validUntil);\n    }\n\n// intersect account and paymaster ranges.\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\n        address aggregator = accountValidationData.aggregator;\n        if (aggregator == address(0)) {\n            aggregator = pmValidationData.aggregator;\n        }\n        uint48 validAfter = accountValidationData.validAfter;\n        uint48 validUntil = accountValidationData.validUntil;\n        uint48 pmValidAfter = pmValidationData.validAfter;\n        uint48 pmValidUntil = pmValidationData.validUntil;\n\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\n        return ValidationData(aggregator, validAfter, validUntil);\n    }\n\n/**\n * helper to pack the return value for validateUserOp\n * @param data - the ValidationData to pack\n */\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\n    }\n\n/**\n * helper to pack the return value for validateUserOp, when not using an aggregator\n * @param sigFailed - true for signature failure, false for success\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\n * @param validAfter first timestamp this UserOperation is valid\n */\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\n    }\n\n/**\n * keccak function over calldata.\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\n */\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\n        assembly {\n            let mem := mload(0x40)\n            let len := data.length\n            calldatacopy(mem, data.offset, len)\n            ret := keccak256(mem, len)\n        }\n    }\n\n"
    },
    "@account-abstraction/contracts/interfaces/IAccount.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\nimport \"./UserOperation.sol\";\n\ninterface IAccount {\n\n    /**\n     * Validate user's signature and nonce\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\n     * This allows making a \"simulation call\" without a valid signature\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\n     *\n     * @dev Must validate caller is the entryPoint.\n     *      Must validate the signature and nonce\n     * @param userOp the operation that is about to be executed.\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\n     *      The excess is left as a deposit in the entrypoint, for future calls.\n     *      can be withdrawn anytime using \"entryPoint.withdrawTo()\"\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\n     *         otherwise, an address of an \"authorizer\" contract.\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\n     *      <6-byte> validAfter - first timestamp this operation is valid\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\n     */\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\n    external returns (uint256 validationData);\n}\n"
    },
    "@account-abstraction/contracts/interfaces/IAggregator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\nimport \"./UserOperation.sol\";\n\n/**\n * Aggregated Signatures validator.\n */\ninterface IAggregator {\n\n    /**\n     * validate aggregated signature.\n     * revert if the aggregated signature does not match the given list of operations.\n     */\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\n\n    /**\n     * validate signature of a single userOp\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\n     * @param userOp the userOperation received from the user.\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\n     *    (usually empty, unless account and aggregator support some kind of \"multisig\"\n     */\n    function validateUserOpSignature(UserOperation calldata userOp)\n    external view returns (bytes memory sigForUserOp);\n\n    /**\n     * aggregate multiple signatures into a single value.\n     * This method is called off-chain to calculate the signature to pass with handleOps()\n     * bundler MAY use optimized custom code perform this aggregation\n     * @param userOps array of UserOperations to collect the signatures from.\n     * @return aggregatedSignature the aggregated signature\n     */\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\n}\n"
    },
    "@account-abstraction/contracts/interfaces/IEntryPoint.sol": {
      "content": "/**\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\n ** Only one instance required on each chain.\n **/\n// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable avoid-low-level-calls */\n/* solhint-disable no-inline-assembly */\n/* solhint-disable reason-string */\n\nimport \"./UserOperation.sol\";\nimport \"./IStakeManager.sol\";\nimport \"./IAggregator.sol\";\nimport \"./INonceManager.sol\";\n\ninterface IEntryPoint is IStakeManager, INonceManager {\n\n    /***\n     * An event emitted after each successful request\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\n     * @param sender - the account that generates this request.\n     * @param paymaster - if non-null, the paymaster that pays for this request.\n     * @param nonce - the nonce value from the request.\n     * @param success - true if the sender transaction succeeded, false if reverted.\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\n     */\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\n\n    /**\n     * account \"sender\" was deployed.\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\n     * @param sender the account that is deployed\n     * @param factory the factory used to deploy this account (in the initCode)\n     * @param paymaster the paymaster used by this UserOp\n     */\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\n\n    /**\n     * An event emitted if the UserOperation \"callData\" reverted with non-zero length\n     * @param userOpHash the request unique identifier.\n     * @param sender the sender of this request\n     * @param nonce the nonce used in the request\n     * @param revertReason - the return bytes from the (reverted) call to \"callData\".\n     */\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\n\n    /**\n     * an event emitted by handleOps(), before starting the execution loop.\n     * any event emitted before this event, is part of the validation.\n     */\n    event BeforeExecution();\n\n    /**\n     * signature aggregator used by the following UserOperationEvents within this bundle.\n     */\n    event SignatureAggregatorChanged(address indexed aggregator);\n\n    /**\n     * a custom revert error of handleOps, to identify the offending op.\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\n     *  @param reason - revert reason\n     *      The string starts with a unique code \"AAmn\", where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,\n     *      so a failure can be attributed to the correct entity.\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\n     */\n    error FailedOp(uint256 opIndex, string reason);\n\n    /**\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\n     */\n    error SignatureValidationFailed(address aggregator);\n\n    /**\n     * Successful result from simulateValidation.\n     * @param returnInfo gas and time-range returned values\n     * @param senderInfo stake information about the sender\n     * @param factoryInfo stake information about the factory (if any)\n     * @param paymasterInfo stake information about the paymaster (if any)\n     */\n    error ValidationResult(ReturnInfo returnInfo,\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\n\n    /**\n     * Successful result from simulateValidation, if the account returns a signature aggregator\n     * @param returnInfo gas and time-range returned values\n     * @param senderInfo stake information about the sender\n     * @param factoryInfo stake information about the factory (if any)\n     * @param paymasterInfo stake information about the paymaster (if any)\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\n     */\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\n        AggregatorStakeInfo aggregatorInfo);\n\n    /**\n     * return value of getSenderAddress\n     */\n    error SenderAddressResult(address sender);\n\n    /**\n     * return value of simulateHandleOp\n     */\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint48 validAfter, uint48 validUntil, bool targetSuccess, bytes targetResult);\n\n    //UserOps handled, per aggregator\n    struct UserOpsPerAggregator {\n        UserOperation[] userOps;\n\n        // aggregator address\n        IAggregator aggregator;\n        // aggregated signature\n        bytes signature;\n    }\n\n    /**\n     * Execute a batch of UserOperation.\n     * no signature aggregator is used.\n     * if any account requires an aggregator (that is, it returned an aggregator when\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\n     * @param ops the operations to execute\n     * @param beneficiary the address to receive the fees\n     */\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\n\n    /**\n     * Execute a batch of UserOperation with Aggregators\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\n     * @param beneficiary the address to receive the fees\n     */\n    function handleAggregatedOps(\n        UserOpsPerAggregator[] calldata opsPerAggregator,\n        address payable beneficiary\n    ) external;\n\n    /**\n     * generate a request Id - unique identifier for this request.\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\n     */\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\n\n    /**\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\n     * @param userOp the user operation to validate.\n     */\n    function simulateValidation(UserOperation calldata userOp) external;\n\n    /**\n     * gas and return values during simulation\n     * @param preOpGas the gas used for validation (including preValidationGas)\n     * @param prefund the required prefund for this operation\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\n     */\n    struct ReturnInfo {\n        uint256 preOpGas;\n        uint256 prefund;\n        bool sigFailed;\n        uint48 validAfter;\n        uint48 validUntil;\n        bytes paymasterContext;\n    }\n\n    /**\n     * returned aggregated signature info.\n     * the aggregator returned by the account, and its current stake.\n     */\n    struct AggregatorStakeInfo {\n        address aggregator;\n        StakeInfo stakeInfo;\n    }\n\n    /**\n     * Get counterfactual sender address.\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\n     * this method always revert, and returns the address in SenderAddressResult error\n     * @param initCode the constructor code to be passed into the UserOperation.\n     */\n    function getSenderAddress(bytes memory initCode) external;\n\n\n    /**\n     * simulate full execution of a UserOperation (including both validation and target execution)\n     * this method will always revert with \"ExecutionResult\".\n     * it performs full validation of the UserOperation, but ignores signature error.\n     * an optional target address is called after the userop succeeds, and its value is returned\n     * (before the entire call is reverted)\n     * Note that in order to collect the the success/failure of the target call, it must be executed\n     * with trace enabled to track the emitted events.\n     * @param op the UserOperation to simulate\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\n     *        are set to the return from that call.\n     * @param targetCallData callData to pass to target address\n     */\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external;\n}\n\n"
    },
    "@account-abstraction/contracts/interfaces/INonceManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\ninterface INonceManager {\n\n    /**\n     * Return the next nonce for this sender.\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\n     * But UserOp with different keys can come with arbitrary order.\n     *\n     * @param sender the account address\n     * @param key the high 192 bit of the nonce\n     * @return nonce a full nonce to pass for next UserOp with this sender.\n     */\n    function getNonce(address sender, uint192 key)\n    external view returns (uint256 nonce);\n\n    /**\n     * Manually increment the nonce of the sender.\n     * This method is exposed just for completeness..\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\n     * as the EntryPoint will update the nonce regardless.\n     * Possible use-case is call it with various keys to \"initialize\" their nonces to one, so that future\n     * UserOperations will not pay extra for the first transaction with a given key.\n     */\n    function incrementNonce(uint192 key) external;\n}\n"
    },
    "@account-abstraction/contracts/interfaces/IStakeManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.12;\n\n/**\n * manage deposits and stakes.\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\n * stake is value locked for at least \"unstakeDelay\" by the staked entity.\n */\ninterface IStakeManager {\n\n    event Deposited(\n        address indexed account,\n        uint256 totalDeposit\n    );\n\n    event Withdrawn(\n        address indexed account,\n        address withdrawAddress,\n        uint256 amount\n    );\n\n    /// Emitted when stake or unstake delay are modified\n    event StakeLocked(\n        address indexed account,\n        uint256 totalStaked,\n        uint256 unstakeDelaySec\n    );\n\n    /// Emitted once a stake is scheduled for withdrawal\n    event StakeUnlocked(\n        address indexed account,\n        uint256 withdrawTime\n    );\n\n    event StakeWithdrawn(\n        address indexed account,\n        address withdrawAddress,\n        uint256 amount\n    );\n\n    /**\n     * @param deposit the entity's deposit\n     * @param staked true if this entity is staked.\n     * @param stake actual amount of ether staked for this entity.\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\n     *    and the rest fit into a 2nd cell.\n     *    112 bit allows for 10^15 eth\n     *    48 bit for full timestamp\n     *    32 bit allows 150 years for unstake delay\n     */\n    struct DepositInfo {\n        uint112 deposit;\n        bool staked;\n        uint112 stake;\n        uint32 unstakeDelaySec;\n        uint48 withdrawTime;\n    }\n\n    //API struct used by getStakeInfo and simulateValidation\n    struct StakeInfo {\n        uint256 stake;\n        uint256 unstakeDelaySec;\n    }\n\n    /// @return info - full deposit information of given account\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\n\n    /// @return the deposit (for gas payment) of the account\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * add to the deposit of the given account\n     */\n    function depositTo(address account) external payable;\n\n    /**\n     * add to the account's stake - amount and delay\n     * any pending unstake is first cancelled.\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\n     */\n    function addStake(uint32 _unstakeDelaySec) external payable;\n\n    /**\n     * attempt to unlock the stake.\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\n     */\n    function unlockStake() external;\n\n    /**\n     * withdraw from the (unlocked) stake.\n     * must first call unlockStake and wait for the unstakeDelay to pass\n     * @param withdrawAddress the address to send withdrawn value.\n     */\n    function withdrawStake(address payable withdrawAddress) external;\n\n    /**\n     * withdraw from the deposit.\n     * @param withdrawAddress the address to send withdrawn value.\n     * @param withdrawAmount the amount to withdraw.\n     */\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\n}\n"
    },
    "@account-abstraction/contracts/interfaces/UserOperation.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable no-inline-assembly */\n\nimport {calldataKeccak} from \"../core/Helpers.sol\";\n\n/**\n * User Operation struct\n * @param sender the sender account of this request.\n     * @param nonce unique value the sender uses to verify it is not a replay.\n     * @param initCode if set, the account contract will be created by this constructor/\n     * @param callData the method call to execute on this account.\n     * @param callGasLimit the gas limit passed to the callData method call.\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\n     */\n    struct UserOperation {\n\n        address sender;\n        uint256 nonce;\n        bytes initCode;\n        bytes callData;\n        uint256 callGasLimit;\n        uint256 verificationGasLimit;\n        uint256 preVerificationGas;\n        uint256 maxFeePerGas;\n        uint256 maxPriorityFeePerGas;\n        bytes paymasterAndData;\n        bytes signature;\n    }\n\n/**\n * Utility functions helpful when working with UserOperation structs.\n */\nlibrary UserOperationLib {\n\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\n        address data;\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\n        assembly {data := calldataload(userOp)}\n        return address(uint160(data));\n    }\n\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\n    // pay above what he signed for.\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\n    unchecked {\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\n        if (maxFeePerGas == maxPriorityFeePerGas) {\n            //legacy mode (for networks that don't support basefee opcode)\n            return maxFeePerGas;\n        }\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\n    }\n    }\n\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\n        address sender = getSender(userOp);\n        uint256 nonce = userOp.nonce;\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\n        uint256 callGasLimit = userOp.callGasLimit;\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\n        uint256 preVerificationGas = userOp.preVerificationGas;\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\n\n        return abi.encode(\n            sender, nonce,\n            hashInitCode, hashCallData,\n            callGasLimit, verificationGasLimit, preVerificationGas,\n            maxFeePerGas, maxPriorityFeePerGas,\n            hashPaymasterAndData\n        );\n    }\n\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\n        return keccak256(pack(userOp));\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/base/Executor.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.17;\n\nimport {Enum} from \"../common/Enum.sol\";\n\n/// @title Executor - A contract that can execute transactions\nabstract contract Executor {\n    // Could add a flag fromEntryPoint for AA txn\n    event ExecutionFailure(\n        address indexed to,\n        uint256 indexed value,\n        bytes indexed data,\n        Enum.Operation operation,\n        uint256 txGas\n    );\n    event ExecutionSuccess(\n        address indexed to,\n        uint256 indexed value,\n        bytes indexed data,\n        Enum.Operation operation,\n        uint256 txGas\n    );\n\n    function _execute(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 txGas\n    ) internal returns (bool success) {\n        if (operation == Enum.Operation.DelegateCall) {\n            assembly {\n                success := delegatecall(\n                    txGas,\n                    to,\n                    add(data, 0x20),\n                    mload(data),\n                    0,\n                    0\n                )\n            }\n        } else {\n            assembly {\n                success := call(\n                    txGas,\n                    to,\n                    value,\n                    add(data, 0x20),\n                    mload(data),\n                    0,\n                    0\n                )\n            }\n        }\n        if (success) emit ExecutionSuccess(to, value, data, operation, txGas);\n        else emit ExecutionFailure(to, value, data, operation, txGas);\n    }\n}\n"
    },
    "contracts/base/FallbackManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.17;\n\nimport {SelfAuthorized} from \"../common/SelfAuthorized.sol\";\nimport {FallbackManagerErrors} from \"../common/Errors.sol\";\n\n/**\n *   @title Fallback Manager - A contract that manages fallback calls made to the Smart Account\n *   @dev Fallback calls are handled by a `handler` contract that is stored at FALLBACK_HANDLER_STORAGE_SLOT\n *        fallback calls are not delegated to the `handler` so they can not directly change Smart Account storage\n */\nabstract contract FallbackManager is SelfAuthorized, FallbackManagerErrors {\n    // keccak-256 hash of \"fallback_manager.handler.address\" subtracted by 1\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT =\n        0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d4;\n\n    uint256[24] private __gap;\n\n    event ChangedFallbackHandler(\n        address indexed previousHandler,\n        address indexed handler\n    );\n\n    fallback() external {\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\n\n        assembly {\n            let handler := sload(slot)\n            if iszero(handler) {\n                return(0, 0)\n            }\n            calldatacopy(0, 0, calldatasize())\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\n            // Then the address without padding is stored right after the calldata\n            mstore(calldatasize(), shl(96, caller()))\n            // Add 20 bytes for the address appended add the end\n            let success := call(\n                gas(),\n                handler,\n                0,\n                0,\n                add(calldatasize(), 20),\n                0,\n                0\n            )\n            returndatacopy(0, 0, returndatasize())\n            if iszero(success) {\n                revert(0, returndatasize())\n            }\n            return(0, returndatasize())\n        }\n    }\n\n    /// @dev Allows to add a contract to handle fallback calls.\n    ///      Only fallback calls without value and with data will be forwarded\n    /// @param handler contract to handle fallback calls.\n    function setFallbackHandler(address handler) external virtual;\n\n    function getFallbackHandler() public view returns (address _handler) {\n        assembly {\n            _handler := sload(FALLBACK_HANDLER_STORAGE_SLOT)\n        }\n    }\n\n    function _setFallbackHandler(address handler) internal {\n        if (handler == address(0)) revert HandlerCannotBeZero();\n        address previousHandler;\n\n        assembly {\n            previousHandler := sload(FALLBACK_HANDLER_STORAGE_SLOT)\n            //}\n            //bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\n\n            //assembly {\n            sstore(FALLBACK_HANDLER_STORAGE_SLOT, handler)\n        }\n        emit ChangedFallbackHandler(previousHandler, handler);\n    }\n}\n"
    },
    "contracts/base/ModuleManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.17;\n\nimport {SelfAuthorized} from \"../common/SelfAuthorized.sol\";\nimport {Executor, Enum} from \"./Executor.sol\";\nimport {ModuleManagerErrors} from \"../common/Errors.sol\";\n\n/**\n * @title Module Manager - A contract that manages modules that can execute transactions\n *        on behalf of the Smart Account via this contract.\n */\nabstract contract ModuleManager is\n    SelfAuthorized,\n    Executor,\n    ModuleManagerErrors\n{\n    address internal constant SENTINEL_MODULES = address(0x1);\n    mapping(address => address) internal _modules;\n    uint256[24] private __gap;\n\n    // Events\n    event EnabledModule(address module);\n    event DisabledModule(address module);\n    event ExecutionFromModuleSuccess(address indexed module);\n    event ExecutionFromModuleFailure(address indexed module);\n    event ModuleTransaction(\n        address module,\n        address to,\n        uint256 value,\n        bytes data,\n        Enum.Operation operation\n    );\n\n    /**\n     * @dev Adds a module to the allowlist.\n     * @notice This SHOULD only be done via userOp or a selfcall.\n     */\n    function enableModule(address module) external virtual;\n\n    /**\n     * @dev Setups module for this Smart Account and enables it.\n     * @notice This SHOULD only be done via userOp or a selfcall.\n     */\n    function setupAndEnableModule(\n        address setupContract,\n        bytes memory setupData\n    ) external virtual returns (address);\n\n    /**\n     * @dev Returns array of modules. Useful for a widget\n     * @param start Start of the page.\n     * @param pageSize Maximum number of modules that should be returned.\n     * @return array Array of modules.\n     * @return next Start of the next page.\n     */\n    function getModulesPaginated(\n        address start,\n        uint256 pageSize\n    ) external view returns (address[] memory array, address next) {\n        // Init array with max page size\n        array = new address[](pageSize);\n\n        // Populate return array\n        uint256 moduleCount;\n        address currentModule = _modules[start];\n        while (\n            currentModule != address(0x0) &&\n            currentModule != SENTINEL_MODULES &&\n            moduleCount < pageSize\n        ) {\n            array[moduleCount] = currentModule;\n            currentModule = _modules[currentModule];\n            moduleCount++;\n        }\n        next = currentModule;\n        // Set correct size of returned array\n\n        assembly {\n            mstore(array, moduleCount)\n        }\n    }\n\n    /**\n     * @dev Allows a Module to execute a Smart Account transaction without any further confirmations.\n     * @param to Destination address of module transaction.\n     * @param value Ether value of module transaction.\n     * @param data Data payload of module transaction.\n     * @param operation Operation type of module transaction.\n     */\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 txGas\n    ) public virtual returns (bool success) {\n        // Only whitelisted modules are allowed.\n        if (\n            msg.sender == SENTINEL_MODULES || _modules[msg.sender] == address(0)\n        ) revert ModuleNotEnabled(msg.sender);\n        // Execute transaction without further confirmations.\n        // Can add guards here to allow delegatecalls for selected modules (msg.senders) only\n        success = _execute(\n            to,\n            value,\n            data,\n            operation,\n            txGas == 0 ? gasleft() : txGas\n        );\n    }\n\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) public virtual returns (bool) {\n        return execTransactionFromModule(to, value, data, operation, 0);\n    }\n\n    /**\n     * @dev Allows a Module to execute a wallet transaction without any further confirmations and returns data\n     * @param to Destination address of module transaction.\n     * @param value Ether value of module transaction.\n     * @param data Data payload of module transaction.\n     * @param operation Operation type of module transaction.\n     */\n    function execTransactionFromModuleReturnData(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) public returns (bool success, bytes memory returnData) {\n        success = execTransactionFromModule(to, value, data, operation);\n\n        assembly {\n            // Load free memory location\n            let ptr := mload(0x40)\n            // We allocate memory for the return data by setting the free memory location to\n            // current free memory location + data size + 32 bytes for data size value\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\n            // Store the size\n            mstore(ptr, returndatasize())\n            // Store the data\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\n            // Point the return data to the correct memory location\n            returnData := ptr\n        }\n    }\n\n    /**\n     * @dev Allows a Module to execute a batch of Smart Account transactions without any further confirmations.\n     * @param to Destination address of module transaction.\n     * @param value Ether value of module transaction.\n     * @param data Data payload of module transaction.\n     * @param operations Operation type of module transaction.\n     */\n    function execBatchTransactionFromModule(\n        address[] calldata to,\n        uint256[] calldata value,\n        bytes[] calldata data,\n        Enum.Operation[] calldata operations\n    ) public virtual returns (bool success) {\n        if (\n            to.length == 0 ||\n            to.length != value.length ||\n            value.length != data.length ||\n            data.length != operations.length\n        )\n            revert WrongBatchProvided(\n                to.length,\n                value.length,\n                data.length,\n                operations.length\n            );\n\n        // Only whitelisted modules are allowed.\n        if (\n            msg.sender == SENTINEL_MODULES || _modules[msg.sender] == address(0)\n        ) revert ModuleNotEnabled(msg.sender);\n\n        for (uint256 i; i < to.length; ) {\n            // Execute transaction without further confirmations.\n            success = _executeFromModule(\n                to[i],\n                value[i],\n                data[i],\n                operations[i]\n            );\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @dev Returns if a module is enabled\n     * @return True if the module is enabled\n     */\n    function isModuleEnabled(address module) public view returns (bool) {\n        return SENTINEL_MODULES != module && _modules[module] != address(0);\n    }\n\n    /**\n     * @dev Adds a module to the allowlist.\n     * @notice This can only be done via a userOp or a selfcall.\n     * @notice Enables the module `module` for the wallet.\n     * @param module Module to be allow-listed.\n     */\n    function _enableModule(address module) internal virtual {\n        // Module address cannot be null or sentinel.\n        if (module == address(0) || module == SENTINEL_MODULES)\n            revert ModuleCannotBeZeroOrSentinel(module);\n        // Module cannot be added twice.\n        if (_modules[module] != address(0)) revert ModuleAlreadyEnabled(module);\n\n        _modules[module] = _modules[SENTINEL_MODULES];\n        _modules[SENTINEL_MODULES] = module;\n\n        emit EnabledModule(module);\n    }\n\n    /**\n     * @dev Setups module for this Smart Account and enables it.\n     * @notice This can only be done via userOp or a selfcall.\n     */\n    function _setupAndEnableModule(\n        address setupContract,\n        bytes memory setupData\n    ) internal virtual returns (address) {\n        address module = _setupModule(setupContract, setupData);\n        _enableModule(module);\n        return module;\n    }\n\n    /**\n     * @dev Removes a module from the allowlist.\n     * @notice This can only be done via a wallet transaction.\n     * @notice Disables the module `module` for the wallet.\n     * @param prevModule Module that pointed to the module to be removed in the linked list\n     * @param module Module to be removed.\n     */\n    function _disableModule(\n        address prevModule,\n        address module\n    ) internal virtual {\n        // Validate module address and check that it corresponds to module index.\n        if (module == address(0) || module == SENTINEL_MODULES)\n            revert ModuleCannotBeZeroOrSentinel(module);\n        if (_modules[prevModule] != module)\n            revert ModuleAndPrevModuleMismatch(\n                module,\n                _modules[prevModule],\n                prevModule\n            );\n        _modules[prevModule] = _modules[module];\n        delete _modules[module];\n        emit DisabledModule(module);\n    }\n\n    // TODO: can use not executor.execute, but SmartAccount._call for the unification\n\n    function _executeFromModule(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) internal returns (bool success) {\n        success = _execute(to, value, data, operation, gasleft());\n        if (success) {\n            emit ModuleTransaction(msg.sender, to, value, data, operation);\n            emit ExecutionFromModuleSuccess(msg.sender);\n        } else emit ExecutionFromModuleFailure(msg.sender);\n    }\n\n    /**\n     * @notice Setup function sets the initial storage of the contract.\n     * @param setupContract initializing the auth module; can be a module factory or a registry for multiple accounts.\n     * @param setupData modules setup data (a standard calldata for the module setup contract)\n     */\n    function _initialSetupModules(\n        address setupContract,\n        bytes memory setupData\n    ) internal virtual returns (address) {\n        address initialAuthorizationModule = _setupModule(\n            setupContract,\n            setupData\n        );\n\n        // Module address cannot be null or sentinel.\n        if (\n            initialAuthorizationModule == address(0) ||\n            initialAuthorizationModule == SENTINEL_MODULES\n        ) revert ModuleCannotBeZeroOrSentinel(initialAuthorizationModule);\n\n        _modules[initialAuthorizationModule] = SENTINEL_MODULES;\n        _modules[SENTINEL_MODULES] = initialAuthorizationModule;\n        return initialAuthorizationModule;\n    }\n\n    function _setupModule(\n        address setupContract,\n        bytes memory setupData\n    ) internal returns (address module) {\n        if (setupContract == address(0)) revert(\"Wrong Module Setup Address\");\n        assembly {\n            let success := call(\n                gas(),\n                setupContract,\n                0,\n                add(setupData, 0x20),\n                mload(setupData),\n                0,\n                0\n            )\n            let ptr := mload(0x40)\n            returndatacopy(ptr, 0, returndatasize())\n            if iszero(success) {\n                revert(ptr, returndatasize())\n            }\n            module := mload(ptr)\n        }\n    }\n}\n"
    },
    "contracts/BaseSmartAccount.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\nimport {IAccount} from \"@account-abstraction/contracts/interfaces/IAccount.sol\";\nimport {IEntryPoint} from \"@account-abstraction/contracts/interfaces/IEntryPoint.sol\";\nimport {UserOperationLib, UserOperation} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\nimport {BaseSmartAccountErrors} from \"./common/Errors.sol\";\nimport \"@account-abstraction/contracts/core/Helpers.sol\";\n\n/**\n * Basic account implementation.\n * This contract provides the basic logic for implementing the IAccount interface: validateUserOp function\n * Specific account implementation should inherit it and provide the account-specific logic\n */\nabstract contract BaseSmartAccount is IAccount, BaseSmartAccountErrors {\n    using UserOperationLib for UserOperation;\n\n    // Return value in case of signature failure, with no time-range.\n    // equivalent to _packValidationData(true,0,0);\n    uint256 internal constant SIG_VALIDATION_FAILED = 1;\n\n    /**\n     * @dev Initialize the Smart Account with required states.\n     * @param handler Default fallback handler for the Smart Account.\n     * @param moduleSetupContract Initializes the auth module; can be a factory or registry for multiple accounts.\n     * @param moduleSetupData Contains address of the Setup Contract and setup data.\n     * @notice Ensure this is callable only once (use initializer modifier or state checks).\n     */\n    function init(\n        address handler,\n        address moduleSetupContract,\n        bytes calldata moduleSetupData\n    ) external virtual returns (address);\n\n    /**\n     * Validates the userOp.\n     * @param userOp validate the userOp.signature field\n     * @param userOpHash convenient field: the hash of the request, to check the signature against\n     *          (also hashes the entrypoint and chain id)\n     * @param missingAccountFunds the amount of funds required to pay to EntryPoint to pay for the userOp execution.\n     * @return validationData signature and time-range of this operation\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\n     *         otherwise, an address of an \"authorizer\" contract.\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\n     *      <6-byte> validAfter - first timestamp this operation is valid\n     *      If no time-range in account, return SIG_VALIDATION_FAILED (1) for signature failure.\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\n     */\n    function validateUserOp(\n        UserOperation calldata userOp,\n        bytes32 userOpHash,\n        uint256 missingAccountFunds\n    ) external virtual override returns (uint256);\n\n    /**\n     * @return nonce the account nonce.\n     * @dev This method returns the next sequential nonce.\n     * @notice Provides 2D nonce functionality by allowing to use a nonce of a specific key.\n     */\n    function nonce(uint192 _key) public view virtual returns (uint256) {\n        return entryPoint().getNonce(address(this), _key);\n    }\n\n    /**\n     * return the entryPoint used by this account.\n     * subclass should return the current entryPoint used by this account.\n     */\n    function entryPoint() public view virtual returns (IEntryPoint);\n\n    /**\n     * sends to the entrypoint (msg.sender) the missing funds for this transaction.\n     * subclass MAY override this method for better funds management\n     * (e.g. send to the entryPoint more than the minimum required, so that in future transactions\n     * it will not be required to send again)\n     * @param missingAccountFunds the minimum value this method should send the entrypoint.\n     *  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\n     */\n    function _payPrefund(uint256 missingAccountFunds) internal virtual {\n        if (missingAccountFunds != 0) {\n            payable(msg.sender).call{\n                value: missingAccountFunds,\n                gas: type(uint256).max\n            }(\"\");\n            //ignore failure (its EntryPoint's job to verify, not account.)\n        }\n    }\n}\n"
    },
    "contracts/common/Enum.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.17;\n\n/// @title Enum - Collection of enums\nabstract contract Enum {\n    enum Operation {\n        Call,\n        DelegateCall\n    }\n}\n"
    },
    "contracts/common/Errors.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.17;\n\ncontract BaseSmartAccountErrors {\n    /**\n     * @notice Throws at onlyEntryPoint when msg.sender is not an EntryPoint set for this Smart Account\n     * @param caller address that tried to call onlyEntryPoint-protected method\n     */\n    error CallerIsNotAnEntryPoint(address caller);\n}\n\ncontract FallbackManagerErrors {\n    /**\n     * @notice Throws if zero address has been provided as Fallback Handler address\n     */\n    error HandlerCannotBeZero();\n}\n\ncontract ModuleManagerErrors {\n    /**\n     * @notice Throws when trying to initialize module manager that already been initialized\n     */\n    error ModulesAlreadyInitialized();\n\n    /**\n     * @notice Throws when a delegatecall in course of module manager initialization has failed\n     */\n    error ModulesSetupExecutionFailed();\n\n    /**\n     * @notice Throws when address(0) or SENTINEL_MODULES constant has been provided as a module address\n     * @param module Module address provided\n     */\n    error ModuleCannotBeZeroOrSentinel(address module);\n\n    /**\n     * @notice Throws when trying to enable module that has already been enabled\n     * @param module Module address provided\n     */\n    error ModuleAlreadyEnabled(address module);\n\n    /**\n     * @notice Throws when module and previous module mismatch\n     * @param expectedModule expected module at modules[prevModule]\n     * @param returnedModule the module that has been found at modules[prevModule]\n     * @param prevModule previous module address provided at call\n     */\n    error ModuleAndPrevModuleMismatch(\n        address expectedModule,\n        address returnedModule,\n        address prevModule\n    );\n\n    /**\n     * @notice Throws when trying to execute transaction from module that is not enabled\n     * @param module Module address provided\n     */\n    error ModuleNotEnabled(address module);\n\n    /**\n     * @notice Throws when data for executeBatchCall provided in wrong format (i.e. empty array or lengths mismatch)\n     * @param destLength length of destination contracts array\n     * @param valueLength length of txn values array\n     * @param funcLength length of function signatures array\n     * @param operationLength length of operation types array. 0 if there's no operations\n     */\n    error WrongBatchProvided(\n        uint256 destLength,\n        uint256 valueLength,\n        uint256 funcLength,\n        uint256 operationLength\n    );\n}\n\ncontract SmartAccountErrors is BaseSmartAccountErrors, ModuleManagerErrors {\n    /**\n     * @notice Throws if zero address has been provided as Entry Point address\n     */\n    error EntryPointCannotBeZero();\n\n    /**\n     * @notice Throws at mixedAuth when msg.sender is not an owner neither _self\n     * @param caller address that tried to call mixedAuth-protected method\n     */\n    error MixedAuthFail(address caller);\n\n    /**\n     * @notice Throws if trying to change an owner of a SmartAccount to the zero address\n     */\n    error OwnerCannotBeZero();\n\n    /**\n     * @notice Throws if zero address has been provided as Base Implementation address\n     */\n    error BaseImplementationCannotBeZero();\n\n    /**\n     * @notice Throws if there is no code at implementationAddress\n     * @param implementationAddress implementation address provided\n     */\n    error InvalidImplementation(address implementationAddress);\n\n    /**\n     * @notice Throws at onlyOwner when msg.sender is not an owner\n     * @param caller address that tried to call onlyOwner method\n     */\n    error CallerIsNotOwner(address caller);\n\n    /**\n     * @notice Throws at _requireFromEntryPointOrOwner when msg.sender is not an EntryPoint neither an owner\n     * @param caller address that tried to call _requireFromEntryPointOrOwner-protected method\n     */\n    error CallerIsNotEntryPointOrOwner(address caller);\n\n    /**\n     * @notice Throws at _requireFromEntryPointOrSelf when msg.sender is not an EntryPoint neither self\n     * @param caller address that tried to call _requireFromEntryPointOrSelf-protected method\n     */\n    error CallerIsNotEntryPointOrSelf(address caller);\n\n    /**\n     * @notice Throws at _requireFromEntryPoint when msg.sender is not an EntryPoint\n     * @param caller address that tried to call _requireFromEntryPoint-protected method\n     */\n    error CallerIsNotEntryPoint(address caller);\n\n    /**\n     * @notice Throws if trying to initialize a Smart Account that has already been initialized\n     */\n    error AlreadyInitialized();\n\n    /**\n     * @notice Throws if contract signature is provided in frong format\n     * @param uintS s converted to uint256\n     * @param contractSignatureLength length of a contract signature\n     * @param signatureLength the whole signature length\n     */\n    error WrongContractSignatureFormat(\n        uint256 uintS,\n        uint256 contractSignatureLength,\n        uint256 signatureLength\n    );\n\n    /**\n     * @notice Throws if isValidSignature for the conrtact signature and data hash differs from EIP1271 Magic Value\n     * @param contractSignature the contract signature that has been verified\n     */\n    error WrongContractSignature(bytes contractSignature);\n\n    /**\n     * @notice Throws when if trying to transfer to zero address\n     */\n    error TransferToZeroAddressAttempt();\n\n    /**\n     * @notice Throws when module address taken from signature is not enabled\n     * @param moduleAddressProvided module address taken from signature\n     */\n    error WrongValidationModule(address moduleAddressProvided);\n\n    /**\n     * @notice Thrown when the function that must be called only via delegatecall is called directly\n     */\n    error DelegateCallsOnly();\n\n    /**\n     * @notice Thrown when trying to use address of the Smart Account as an owner for itself\n     */\n    error OwnerCanNotBeSelf();\n\n    /**\n     * @notice Thrown when trying to use current owner as a new owner in a _setOwner() call\n     */\n    error OwnerProvidedIsSame();\n}\n\ncontract SmartAccountFactoryErrors is SmartAccountErrors {\n    /**\n     * @notice Throws when the new Proxy deployment fails\n     * @param owner Owner of a Proxy (Smart Account)\n     * @param index Deployment index\n     */\n    error ProxyDeploymentFailed(address owner, uint256 index);\n}\n\ncontract SelfAuthorizedErrors {\n    /**\n     * @notice Throws when the caller is not address(this)\n     * @param caller Caller address\n     */\n    error CallerIsNotSelf(address caller);\n}\n\ncontract SingletonPaymasterErrors {\n    /**\n     * @notice Throws when the Entrypoint address provided is address(0)\n     */\n    error EntryPointCannotBeZero();\n\n    /**\n     * @notice Throws when the verifiying signer address provided is address(0)\n     */\n    error VerifyingSignerCannotBeZero();\n\n    /**\n     * @notice Throws when the paymaster address provided is address(0)\n     */\n    error PaymasterIdCannotBeZero();\n\n    /**\n     * @notice Throws when the 0 has been provided as deposit\n     */\n    error DepositCanNotBeZero();\n\n    /**\n     * @notice Throws when trying to withdraw to address(0)\n     */\n    error CanNotWithdrawToZeroAddress();\n\n    /**\n     * @notice Throws when trying to withdraw more than balance available\n     * @param amountRequired required balance\n     * @param currentBalance available balance\n     */\n    error InsufficientBalance(uint256 amountRequired, uint256 currentBalance);\n\n    /**\n     * @notice Throws when signature provided has invalid length\n     * @param sigLength length oif the signature provided\n     */\n    error InvalidPaymasterSignatureLength(uint256 sigLength);\n}\n\n//\n"
    },
    "contracts/common/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.17;\n\n/// @title Reentrancy Guard - reentrancy protection\nabstract contract ReentrancyGuard {\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _reentrancyStatus;\n\n    error ReentrancyProtectionActivated();\n\n    modifier nonReentrant() {\n        if (_reentrancyStatus == ENTERED)\n            revert ReentrancyProtectionActivated();\n        _reentrancyStatus = ENTERED;\n        _;\n        _reentrancyStatus = NOT_ENTERED;\n    }\n\n    constructor() {\n        _reentrancyStatus = NOT_ENTERED;\n    }\n\n    function _isReentrancyGuardEntered() internal view returns (bool) {\n        return _reentrancyStatus == ENTERED;\n    }\n}\n"
    },
    "contracts/common/SecuredTokenTransfer.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.17;\n\n/// @title SecuredTokenTransfer - Secure token transfer\nabstract contract SecuredTokenTransfer {\n    /// @dev Transfers a token and returns if it was a success\n    /// @param token Token that should be transferred\n    /// @param receiver Receiver to whom the token should be transferred\n    /// @param amount The amount of tokens that should be transferred\n    function _transferToken(\n        address token,\n        address receiver,\n        uint256 amount\n    ) internal returns (bool transferred) {\n        require(token != address(0), \"token can not be zero address\");\n        require(token.code.length > 0, \"token contract doesn't exist\");\n        // 0xa9059cbb - keccack(\"transfer(address,uint256)\")\n        bytes memory data = abi.encodeWithSelector(\n            0xa9059cbb,\n            receiver,\n            amount\n        );\n\n        assembly {\n            // We write the return value to scratch space.\n            // See https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_memory.html#layout-in-memory\n            let success := call(\n                sub(gas(), 10000),\n                token,\n                0,\n                add(data, 0x20),\n                mload(data),\n                0,\n                0x20\n            )\n            switch returndatasize()\n            case 0 {\n                transferred := success\n            }\n            case 0x20 {\n                transferred := iszero(or(iszero(success), iszero(mload(0))))\n            }\n            default {\n                transferred := 0\n            }\n        }\n    }\n}\n"
    },
    "contracts/common/SelfAuthorized.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.17;\n\nimport {SelfAuthorizedErrors} from \"../common/Errors.sol\";\n\n/// @title SelfAuthorized - authorizes current contract to perform actions\ncontract SelfAuthorized is SelfAuthorizedErrors {\n    modifier authorized() {\n        // This is a function call as it minimized the bytecode size\n        _requireSelfCall();\n        _;\n    }\n\n    function _requireSelfCall() private view {\n        if (msg.sender != address(this)) revert CallerIsNotSelf(msg.sender);\n    }\n}\n"
    },
    "contracts/common/SignatureDecoder.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.17;\n\n/// @title SignatureDecoder - Decodes signatures that a encoded as bytes\nabstract contract SignatureDecoder {\n    /// @dev divides bytes signature into `uint8 v, bytes32 r, bytes32 s`.\n    /// @param signature concatenated rsv signatures\n    function _signatureSplit(\n        bytes memory signature\n    ) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\n        // The signature format is a compact form of:\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n        // Compact means, uint8 is not padded to 32 bytes.\n\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            // Here we are loading the last 32 bytes, including 31 bytes\n            // of 's'. There is no 'mload8' to do this.\n            //\n            // 'byte' is not working due to the Solidity parser, so let's\n            // use the second best option, 'and'\n            v := and(mload(add(signature, 0x41)), 0xff)\n        }\n    }\n}\n"
    },
    "contracts/common/Stakeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IEntryPoint} from \"@account-abstraction/contracts/interfaces/IEntryPoint.sol\";\n\n/**\n * @title Stakeable Entity\n * @author Fil Makarov - <filipp.makarov@biconomy.io>\n */\ncontract Stakeable is Ownable {\n    constructor(address _newOwner) {\n        _transferOwnership(_newOwner);\n    }\n\n    function addStake(\n        address epAddress,\n        uint32 unstakeDelaySec\n    ) external payable onlyOwner {\n        require(epAddress != address(0), \"Invalid EP address\");\n        IEntryPoint(epAddress).addStake{value: msg.value}(unstakeDelaySec);\n    }\n\n    function unlockStake(address epAddress) external onlyOwner {\n        require(epAddress != address(0), \"Invalid EP address\");\n        IEntryPoint(epAddress).unlockStake();\n    }\n\n    function withdrawStake(\n        address epAddress,\n        address payable withdrawAddress\n    ) external onlyOwner {\n        require(epAddress != address(0), \"Invalid EP address\");\n        IEntryPoint(epAddress).withdrawStake(withdrawAddress);\n    }\n}\n"
    },
    "contracts/estimation/SmartAccountNoAuth.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {BaseSmartAccount, IEntryPoint, UserOperation} from \"../BaseSmartAccount.sol\";\nimport {ModuleManager} from \"../base/ModuleManager.sol\";\nimport {FallbackManager} from \"../base/FallbackManager.sol\";\nimport {SignatureDecoder} from \"../common/SignatureDecoder.sol\";\nimport {SecuredTokenTransfer} from \"../common/SecuredTokenTransfer.sol\";\nimport {LibAddress} from \"../libs/LibAddress.sol\";\nimport {ISignatureValidator} from \"../interfaces/ISignatureValidator.sol\";\nimport {IERC165} from \"../interfaces/IERC165.sol\";\nimport {ReentrancyGuard} from \"../common/ReentrancyGuard.sol\";\nimport {SmartAccountErrors} from \"../common/Errors.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport {IAuthorizationModule} from \"../interfaces/IAuthorizationModule.sol\";\n\n/**\n * @title SmartAccount - EIP-4337 compatible smart contract wallet.\n * @dev This contract is the base for the Smart Account functionality.\n *         - It provides the functionality to execute both gnosis-style txns and AA (EIP-4337) userOps\n *         - It allows to receive and manage assets.\n *         - It is responsible for managing the modules and fallbacks.\n *         - The Smart Account can be extended with smodules, such as Social Recovery, Session Key and others.\n * @author Chirag Titiya - <chirag@biconomy.io>\n */\ncontract SmartAccountNoAuth is\n    BaseSmartAccount,\n    ModuleManager,\n    FallbackManager,\n    SignatureDecoder,\n    SecuredTokenTransfer,\n    IERC165,\n    ReentrancyGuard,\n    SmartAccountErrors,\n    ISignatureValidator\n{\n    using ECDSA for bytes32;\n    using LibAddress for address;\n\n    // Storage Version\n    string public constant VERSION = \"1.0.0\";\n\n    // Domain Seperators keccak256(\"EIP712Domain(uint256 chainId,address verifyingContract)\");\n    bytes32 internal constant DOMAIN_SEPARATOR_TYPEHASH =\n        0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\n\n    // solhint-disable-next-line\n    // keccak256(\"AccountTx(address to,uint256 value,bytes data,uint8 operation,uint256 targetTxGas,uint256 baseGas,uint256 gasPrice,uint256 tokenGasPriceFactor,address gasToken,address refundReceiver,uint256 nonce)\");\n    bytes32 internal constant ACCOUNT_TX_TYPEHASH =\n        0xda033865d68bf4a40a5a7cb4159a99e33dba8569e65ea3e38222eb12d9e66eee;\n\n    // /!\\ Owner storage. Deprecated. Left for storage layout compatibility /!\\\n    address public ownerDeprecated;\n\n    // changed to 2D nonce below\n    // @notice there is no _nonce\n    mapping(uint256 => uint256) public nonces;\n\n    // AA immutable storage\n    IEntryPoint private immutable ENTRY_POINT;\n    uint256 private immutable CHAIN_ID;\n    address private immutable SELF;\n\n    // Events\n\n    event ImplementationUpdated(\n        address indexed oldImplementation,\n        address indexed newImplementation\n    );\n    event AccountHandlePayment(bytes32 indexed txHash, uint256 indexed payment);\n    event SmartAccountReceivedNativeToken(\n        address indexed sender,\n        uint256 indexed value\n    );\n\n    /**\n     * @dev Constructor that sets the owner of the contract and the entry point contract.\n     *      _modules[SENTINEL_MODULES] = SENTINEL_MODULES protects implementation from initialization\n     * @param anEntryPoint The address of the entry point contract.\n     */\n    constructor(IEntryPoint anEntryPoint) {\n        _modules[SENTINEL_MODULES] = SENTINEL_MODULES;\n        SELF = address(this);\n        if (address(anEntryPoint) == address(0))\n            revert EntryPointCannotBeZero();\n        ENTRY_POINT = anEntryPoint;\n        CHAIN_ID = block.chainid;\n    }\n\n    /**\n     * @dev This function is a special fallback function that is triggered when the contract receives Ether.\n     * It logs an event indicating the amount of Ether received and the sender's address.\n     * @notice This function is marked as external and payable, meaning it can be called from external\n     * sources and accepts Ether as payment.\n     */\n    receive() external payable {\n        if (address(this) == SELF) revert DelegateCallsOnly();\n        emit SmartAccountReceivedNativeToken(msg.sender, msg.value);\n    }\n\n    /**\n     * @dev Initialize the Smart Account with required states\n     * @param handler Default fallback handler provided in Smart Account\n     * @param moduleSetupContract Initializes the auth module; can be a factory or registry for multiple accounts.\n     * @param moduleSetupData modules setup data (a standard calldata for the module setup contract)\n     * @notice devs need to make sure it is only callble once by initiazer or state check restrictions\n     * @notice any further implementations that introduces a new state must have a reinit method\n     * @notice reinit is not possible, as _initialSetupModules reverts if the account is already initialized\n     *         which is when there is at least one enabled module\n     */\n    function init(\n        address handler,\n        address moduleSetupContract,\n        bytes calldata moduleSetupData\n    ) external virtual override returns (address) {\n        _setFallbackHandler(handler);\n        return _initialSetupModules(moduleSetupContract, moduleSetupData);\n    }\n\n    /**\n     * @dev Interface function with the standard name for execute_ncC\n     * @param dest Address of the contract to call\n     * @param value Amount of native tokens to send along with the transaction\n     * @param func Data of the transaction\n     */\n    function execute(\n        address dest,\n        uint256 value,\n        bytes calldata func\n    ) external {\n        execute_ncC(dest, value, func);\n    }\n\n    /**\n     * @dev Interface function with the standard name for executeBatch_y6U\n     * @param dest Addresses of the contracts to call\n     * @param value Amounts of native tokens to send along with the transactions\n     * @param func Data of the transactions\n     */\n    function executeBatch(\n        address[] calldata dest,\n        uint256[] calldata value,\n        bytes[] calldata func\n    ) external {\n        executeBatch_y6U(dest, value, func);\n    }\n\n    function validateUserOp(\n        UserOperation calldata userOp,\n        bytes32 userOpHash,\n        uint256 missingAccountFunds\n    ) external virtual override returns (uint256 validationData) {\n        if (msg.sender != address(entryPoint()))\n            revert CallerIsNotAnEntryPoint(msg.sender);\n\n        (, address validationModule) = abi.decode(\n            userOp.signature,\n            (bytes, address)\n        );\n        if (address(_modules[validationModule]) != address(0)) {\n            validationData = IAuthorizationModule(validationModule)\n                .validateUserOp(userOp, userOpHash);\n        } else {\n            revert WrongValidationModule(validationModule);\n        }\n        _payPrefund(missingAccountFunds);\n    }\n\n    /**\n     * @dev Adds a module to the allowlist.\n     * @notice This can only be done via a userOp or a selfcall.\n     * @notice Enables the module `module` for the wallet.\n     * @param module Module to be allow-listed.\n     */\n    function enableModule(address module) external virtual override {\n        _requireFromEntryPointOrSelf();\n        _enableModule(module);\n    }\n\n    /**\n     * @dev Setups module for this Smart Account and enables it.\n     * @notice This can only be done via userOp or a selfcall.\n     * @notice Enables the module `module` for the wallet.\n     */\n    function setupAndEnableModule(\n        address setupContract,\n        bytes memory setupData\n    ) external virtual override returns (address) {\n        _requireFromEntryPointOrSelf();\n        return _setupAndEnableModule(setupContract, setupData);\n    }\n\n    function setFallbackHandler(address handler) external virtual override {\n        _requireFromEntryPoint();\n        _setFallbackHandler(handler);\n    }\n\n    /**\n     * @notice Query if a contract implements an interface\n     * @param _interfaceId The interface identifier, as specified in ERC165\n     * @return `true` if the contract implements `_interfaceID`\n     */\n    function supportsInterface(\n        bytes4 _interfaceId\n    ) external view virtual override returns (bool) {\n        return _interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\n    }\n\n    /**\n     * @dev Returns the address of the implementation contract associated with this contract.\n     * @notice The implementation address is stored in the contract's storage slot with index 0.\n     */\n    function getImplementation()\n        external\n        view\n        returns (address _implementation)\n    {\n        assembly {\n            _implementation := sload(address())\n        }\n    }\n\n    /**\n     * @notice All the new implementations MUST have this method!\n     * @notice Updates the implementation of the base wallet\n     * @param _implementation New wallet implementation\n     */\n    function updateImplementation(address _implementation) public virtual {\n        _requireFromEntryPointOrSelf();\n        require(_implementation != address(0), \"Address cannot be zero\");\n        if (!_implementation.isContract())\n            revert InvalidImplementation(_implementation);\n        address oldImplementation;\n\n        assembly {\n            oldImplementation := sload(address())\n            sstore(address(), _implementation)\n        }\n        emit ImplementationUpdated(oldImplementation, _implementation);\n    }\n\n    /* solhint-disable func-name-mixedcase */\n\n    /**\n     * @dev Execute a transaction (called directly from owner, or by entryPoint)\n     * @notice Name is optimized for this method to be cheaper to be called\n     * @param dest Address of the contract to call\n     * @param value Amount of native tokens to send along with the transaction\n     * @param func Data of the transaction\n     */\n    function execute_ncC(\n        address dest,\n        uint256 value,\n        bytes calldata func\n    ) public {\n        _requireFromEntryPoint();\n        _call(dest, value, func);\n    }\n\n    /**\n     * @dev Execute a sequence of transactions\n     * @notice Name is optimized for this method to be cheaper to be called\n     * @param dest Addresses of the contracts to call\n     * @param value Amounts of native tokens to send along with the transactions\n     * @param func Data of the transactions\n     */\n    function executeBatch_y6U(\n        address[] calldata dest,\n        uint256[] calldata value,\n        bytes[] calldata func\n    ) public {\n        _requireFromEntryPoint();\n        if (\n            dest.length == 0 ||\n            dest.length != value.length ||\n            value.length != func.length\n        ) revert WrongBatchProvided(dest.length, value.length, func.length, 0);\n        for (uint256 i; i < dest.length; ) {\n            _call(dest[i], value[i], func[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /* solhint-enable func-name-mixedcase */\n\n    /**\n     * @dev Deposit more funds for this account in the entryPoint\n     */\n    function addDeposit() public payable {\n        entryPoint().depositTo{value: msg.value}(address(this));\n    }\n\n    /**\n     * @dev Withdraw value from the account's deposit\n     * @param withdrawAddress target to send to\n     * @param amount to withdraw\n     */\n    function withdrawDepositTo(\n        address payable withdrawAddress,\n        uint256 amount\n    ) public payable {\n        _requireFromEntryPointOrSelf();\n        entryPoint().withdrawTo(withdrawAddress, amount);\n    }\n\n    /**\n     * @dev Removes a module from the allowlist.\n     * @notice This can only be done via a wallet transaction.\n     * @notice Disables the module `module` for the wallet.\n     * @param prevModule Module that pointed to the module to be removed in the linked list\n     * @param module Module to be removed.\n     */\n    function disableModule(address prevModule, address module) public virtual {\n        _requireFromEntryPointOrSelf();\n        _disableModule(prevModule, module);\n    }\n\n    /**\n     * @dev Returns the current entry point used by this account.\n     * @return EntryPoint as an `IEntryPoint` interface.\n     * @dev This function should be implemented by the subclass to return the current entry point used by this account.\n     */\n    function entryPoint() public view virtual override returns (IEntryPoint) {\n        return ENTRY_POINT;\n    }\n\n    /**\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\n     * @return bytes32 The domain separator hash.\n     */\n    function domainSeparator() public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    DOMAIN_SEPARATOR_TYPEHASH,\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /**\n     * @notice Returns the ID of the chain the contract is currently deployed on.\n     * @return CHAIN_ID The ID of the current chain as a uint256.\n     */\n    function getChainId() public view returns (uint256) {\n        return CHAIN_ID;\n    }\n\n    /**\n     * @dev returns a value from the nonces 2d mapping\n     * @param batchId : the key of the user's batch being queried\n     * @return nonce : the number of transactions made within said batch\n     */\n    function getNonce(uint256 batchId) public view virtual returns (uint256) {\n        return nonces[batchId];\n    }\n\n    /**\n     * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)\n     * @dev If owner is a smart-contract (other smart contract wallet or module, that controls\n     *      signature verifications - like multisig), forward isValidSignature request to it.\n     *      In case of multisig, _signature can be several concatenated signatures\n     *      If owner is EOA, perform a regular ecrecover.\n     * @param ethSignedDataHash 32 bytes hash of the data signed on the behalf of address(msg.sender)\n     *                          prepended with '\\x19Ethereum Signed Message:\\n'\n     * @param signature Signature byte array associated with ethSignedDataHash\n     * @return bytes4 value.\n     */\n    function isValidSignature(\n        bytes32 ethSignedDataHash,\n        bytes memory signature\n    ) public view override returns (bytes4) {\n        (bytes memory moduleSignature, address validationModule) = abi.decode(\n            signature,\n            (bytes, address)\n        );\n        if (address(_modules[validationModule]) != address(0)) {\n            return\n                ISignatureValidator(validationModule).isValidSignature(\n                    ethSignedDataHash,\n                    moduleSignature\n                );\n        } else {\n            revert WrongValidationModule(validationModule);\n        }\n    }\n\n    /**\n     * @dev Check current account deposit in the entryPoint\n     */\n    function getDeposit() public view returns (uint256) {\n        return entryPoint().balanceOf(address(this));\n    }\n\n    /**\n     * @dev internal method that fecilitates the extenral calls from SmartAccount\n     * @dev similar to execute() of Executor.sol\n     * @param target destination address contract/non-contract\n     * @param value amount of native tokens\n     * @param data function singature of destination\n     */\n    function _call(address target, uint256 value, bytes memory data) internal {\n        assembly {\n            let success := call(\n                gas(),\n                target,\n                value,\n                add(data, 0x20),\n                mload(data),\n                0,\n                0\n            )\n            let ptr := mload(0x40)\n            returndatacopy(ptr, 0, returndatasize())\n            if iszero(success) {\n                revert(ptr, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This function allows the owner or entry point to execute certain actions.\n     * If the caller is not authorized, the function will revert with an error message.\n     * @notice This modifier is marked as internal and can only be called within the contract itself.\n     */\n    function _requireFromEntryPointOrSelf() internal view {\n        if (msg.sender != address(entryPoint()) && msg.sender != address(this))\n            revert CallerIsNotEntryPointOrSelf(msg.sender);\n    }\n\n    /**\n     * @dev This function allows the owner or entry point to execute certain actions.\n     * If the caller is not authorized, the function will revert with an error message.\n     * @notice This modifier is marked as internal and can only be called within the contract itself.\n     */\n    function _requireFromEntryPoint() internal view {\n        if (msg.sender != address(entryPoint()))\n            revert CallerIsNotEntryPoint(msg.sender);\n    }\n}\n"
    },
    "contracts/factory/SmartAccountFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../Proxy.sol\";\nimport \"../BaseSmartAccount.sol\";\nimport {DefaultCallbackHandler} from \"../handler/DefaultCallbackHandler.sol\";\nimport {Stakeable} from \"../common/Stakeable.sol\";\n\n/**\n * @title Smart Account Factory - factory responsible for deploying Smart Accounts using CREATE2 and CREATE\n * @dev It deploys Smart Accounts as proxies pointing to `basicImplementation` that is immutable.\n *      This allows keeping the same address for the same Smart Account owner on various chains via CREATE2\n * @author Chirag Titiya - <chirag@biconomy.io>\n */\ncontract SmartAccountFactory is Stakeable {\n    address public immutable basicImplementation;\n    DefaultCallbackHandler public immutable minimalHandler;\n\n    event AccountCreation(\n        address indexed account,\n        address indexed initialAuthModule,\n        uint256 indexed index\n    );\n    event AccountCreationWithoutIndex(\n        address indexed account,\n        address indexed initialAuthModule\n    );\n\n    constructor(\n        address _basicImplementation,\n        address _newOwner\n    ) Stakeable(_newOwner) {\n        require(\n            _basicImplementation != address(0),\n            \"implementation cannot be zero\"\n        );\n        basicImplementation = _basicImplementation;\n        minimalHandler = new DefaultCallbackHandler();\n    }\n\n    /**\n     * @notice Allows to find out account address prior to deployment\n     * @param index extra salt that allows to deploy more accounts if needed for same EOA (default 0)\n     */\n    function getAddressForCounterFactualAccount(\n        address moduleSetupContract,\n        bytes calldata moduleSetupData,\n        uint256 index\n    ) external view returns (address _account) {\n        // create initializer data based on init method, _owner and minimalHandler\n        bytes memory initializer = _getInitializer(\n            moduleSetupContract,\n            moduleSetupData\n        );\n        bytes memory code = abi.encodePacked(\n            type(Proxy).creationCode,\n            uint256(uint160(basicImplementation))\n        );\n        bytes32 salt = keccak256(\n            abi.encodePacked(keccak256(initializer), index)\n        );\n        bytes32 hash = keccak256(\n            abi.encodePacked(bytes1(0xff), address(this), salt, keccak256(code))\n        );\n        _account = address(uint160(uint256(hash)));\n    }\n\n    /**\n     * @notice Deploys account using create2 and points it to basicImplementation\n     *\n     * @param index extra salt that allows to deploy more account if needed for same EOA (default 0)\n     */\n    function deployCounterFactualAccount(\n        address moduleSetupContract,\n        bytes calldata moduleSetupData,\n        uint256 index\n    ) public returns (address proxy) {\n        // create initializer data based on init method and parameters\n        bytes memory initializer = _getInitializer(\n            moduleSetupContract,\n            moduleSetupData\n        );\n        bytes32 salt = keccak256(\n            abi.encodePacked(keccak256(initializer), index)\n        );\n\n        bytes memory deploymentData = abi.encodePacked(\n            type(Proxy).creationCode,\n            uint256(uint160(basicImplementation))\n        );\n\n        assembly {\n            proxy := create2(\n                0x0,\n                add(0x20, deploymentData),\n                mload(deploymentData),\n                salt\n            )\n        }\n        require(address(proxy) != address(0), \"Create2 call failed\");\n\n        address initialAuthorizationModule;\n\n        if (initializer.length > 0) {\n            assembly {\n                let success := call(\n                    gas(),\n                    proxy,\n                    0,\n                    add(initializer, 0x20),\n                    mload(initializer),\n                    0,\n                    0\n                )\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                if iszero(success) {\n                    revert(ptr, returndatasize())\n                }\n                initialAuthorizationModule := mload(ptr)\n            }\n        }\n        emit AccountCreation(proxy, initialAuthorizationModule, index);\n    }\n\n    /**\n     * @notice Deploys account using create and points it to _implementation\n     \n     * @return proxy address of the deployed account\n     */\n    function deployAccount(\n        address moduleSetupContract,\n        bytes calldata moduleSetupData\n    ) public returns (address proxy) {\n        bytes memory deploymentData = abi.encodePacked(\n            type(Proxy).creationCode,\n            uint256(uint160(basicImplementation))\n        );\n\n        assembly {\n            proxy := create(\n                0x0,\n                add(0x20, deploymentData),\n                mload(deploymentData)\n            )\n        }\n        require(address(proxy) != address(0), \"Create call failed\");\n\n        bytes memory initializer = _getInitializer(\n            moduleSetupContract,\n            moduleSetupData\n        );\n        address initialAuthorizationModule;\n\n        if (initializer.length > 0) {\n            assembly {\n                let success := call(\n                    gas(),\n                    proxy,\n                    0,\n                    add(initializer, 0x20),\n                    mload(initializer),\n                    0,\n                    0\n                )\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                if iszero(success) {\n                    revert(ptr, returndatasize())\n                }\n                initialAuthorizationModule := mload(ptr)\n            }\n        }\n        emit AccountCreationWithoutIndex(proxy, initialAuthorizationModule);\n    }\n\n    /**\n     * @dev Allows to retrieve the creation code used for the Proxy deployment.\n     * @return The creation code for the Proxy.\n     */\n    function accountCreationCode() public pure returns (bytes memory) {\n        return type(Proxy).creationCode;\n    }\n\n    /**\n     * @dev Allows to retrieve the initializer data for the account.\n     * @param moduleSetupContract Initializes the auth module; can be a factory or registry for multiple accounts.\n     * @param moduleSetupData modules setup data (a standard calldata for the module setup contract)\n     * @return initializer bytes for init method\n     */\n    function _getInitializer(\n        address moduleSetupContract,\n        bytes calldata moduleSetupData\n    ) internal view returns (bytes memory) {\n        return\n            abi.encodeCall(\n                BaseSmartAccount.init,\n                (address(minimalHandler), moduleSetupContract, moduleSetupData)\n            );\n    }\n}\n"
    },
    "contracts/handler/DefaultCallbackHandler.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.17;\n\n/* solhint-disable no-empty-blocks */\n\nimport {IERC1155TokenReceiver} from \"../interfaces/IERC1155TokenReceiver.sol\";\nimport {IERC721TokenReceiver} from \"../interfaces/IERC721TokenReceiver.sol\";\nimport {IERC777TokensRecipient} from \"../interfaces/IERC777TokensRecipient.sol\";\nimport {IERC165} from \"../interfaces/IERC165.sol\";\n\n/** @title Default Callback Handler - returns true for known token callbacks\n *   @dev Handles EIP-1271 compliant isValidSignature requests.\n *  @notice inspired by Richard Meissner's <richard@gnosis.pm> implementation\n */\ncontract DefaultCallbackHandler is\n    IERC1155TokenReceiver,\n    IERC777TokensRecipient,\n    IERC721TokenReceiver,\n    IERC165\n{\n    string public constant NAME = \"Default Callback Handler\";\n    string public constant VERSION = \"1.0.0\";\n\n    function supportsInterface(\n        bytes4 interfaceId\n    ) external view virtual override returns (bool) {\n        return\n            interfaceId == type(IERC1155TokenReceiver).interfaceId ||\n            interfaceId == type(IERC721TokenReceiver).interfaceId ||\n            interfaceId == type(IERC777TokensRecipient).interfaceId ||\n            interfaceId == type(IERC165).interfaceId;\n    }\n\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return IERC1155TokenReceiver.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] calldata,\n        uint256[] calldata,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return IERC1155TokenReceiver.onERC1155BatchReceived.selector;\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return IERC721TokenReceiver.onERC721Received.selector;\n    }\n\n    function tokensReceived(\n        address,\n        address,\n        address,\n        uint256,\n        bytes calldata,\n        bytes calldata\n    ) external pure override {\n        // We implement this for completeness, doesn't really have any value\n    }\n}\n"
    },
    "contracts/interfaces/IAuthorizationModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\nimport {UserOperation} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\n\n// interface for modules to verify singatures signed over userOpHash\ninterface IAuthorizationModule {\n    function validateUserOp(\n        UserOperation calldata userOp,\n        bytes32 userOpHash\n    ) external returns (uint256 validationData);\n}\n"
    },
    "contracts/interfaces/IERC1155TokenReceiver.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.17;\n\n/**\n    Note: The ERC-165 identifier for this interface is 0x4e2312e0.\n*/\ninterface IERC1155TokenReceiver {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param _operator The address which initiated the transfer (i.e. msg.sender)\n     * @param _from The address which previously owned the token\n     * @param _id The ID of the token being transferred\n     * @param _value The amount of tokens being transferred\n     * @param _data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address _operator,\n        address _from,\n        uint256 _id,\n        uint256 _value,\n        bytes calldata _data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param _operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param _from The address which previously owned the token\n     * @param _ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param _values An array containing amounts of each token transferred (order and length must match ids array)\n     * @param _data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if allowed\n     */\n    function onERC1155BatchReceived(\n        address _operator,\n        address _from,\n        uint256[] calldata _ids,\n        uint256[] calldata _values,\n        bytes calldata _data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.17;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IERC721TokenReceiver.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.17;\n\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\ninterface IERC721TokenReceiver {\n    /// @notice Handle the receipt of an NFT\n    /// @dev The ERC721 smart contract calls this function on the recipient\n    ///  after a `transfer`. This function MAY throw to revert and reject the\n    ///  transfer. Return of other than the magic value MUST result in the\n    ///  transaction being reverted.\n    ///  Note: the contract address is always the message sender.\n    /// @param _operator The address which called `safeTransferFrom` function\n    /// @param _from The address which previously owned the token\n    /// @param _tokenId The NFT identifier which is being transferred\n    /// @param _data Additional data with no specified format\n    /// @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    ///  unless throwing\n    function onERC721Received(\n        address _operator,\n        address _from,\n        uint256 _tokenId,\n        bytes calldata _data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/interfaces/IERC777TokensRecipient.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.17;\n\ninterface IERC777TokensRecipient {\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n}\n"
    },
    "contracts/interfaces/ISignatureValidator.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.17;\n\ncontract ISignatureValidatorConstants {\n    // bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x1626ba7e;\n}\n\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param _dataHash Arbitrary length data signed on behalf of address(this)\n     * @param _signature Signature byte array associated with _data\n     *\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n     * MUST allow external calls\n     */\n    function isValidSignature(\n        bytes32 _dataHash,\n        bytes memory _signature\n    ) public view virtual returns (bytes4);\n}\n"
    },
    "contracts/libs/LibAddress.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nlibrary LibAddress {\n    /**\n     * @notice Will return true if provided address is a contract\n     * @param account Address to verify if contract or not\n     * @dev This contract will return false if called within the constructor of\n     *      a contract's deployment, as the code is not yet stored on-chain.\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 csize;\n\n        assembly {\n            csize := extcodesize(account)\n        }\n        return csize != 0;\n    }\n}\n"
    },
    "contracts/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/**\n * @title Proxy // This is the user's Smart Account\n * @notice Basic proxy that delegates all calls to a fixed implementation contract.\n * @dev    Implementation address is stored in the slot defined by the Proxy's address\n */\ncontract Proxy {\n    constructor(address _implementation) {\n        require(\n            _implementation != address(0),\n            \"Invalid implementation address\"\n        );\n        assembly {\n            sstore(address(), _implementation)\n        }\n    }\n\n    fallback() external payable {\n        address target;\n        assembly {\n            target := sload(address())\n            calldatacopy(0, 0, calldatasize())\n            let result := delegatecall(gas(), target, 0, calldatasize(), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            switch result\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n}\n"
    },
    "contracts/SmartAccount.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {BaseSmartAccount, IEntryPoint, UserOperation} from \"./BaseSmartAccount.sol\";\nimport {ModuleManager} from \"./base/ModuleManager.sol\";\nimport {FallbackManager} from \"./base/FallbackManager.sol\";\nimport {LibAddress} from \"./libs/LibAddress.sol\";\nimport {ISignatureValidator} from \"./interfaces/ISignatureValidator.sol\";\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {SmartAccountErrors} from \"./common/Errors.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport {IAuthorizationModule} from \"./interfaces/IAuthorizationModule.sol\";\n\n/**\n * @title SmartAccount - EIP-4337 compatible smart contract wallet.\n * @dev This contract is the base for the Smart Account functionality.\n *         - It is modular by nature. UserOp and txns validation happens in Authorization Modules.\n *         - It provides the functionality to execute AA (EIP-4337) userOps. Gnosis style txns removed to a module.\n *         - It allows to receive and manage assets.\n *         - It is responsible for managing the modules and fallbacks.\n *         - The Smart Account can be extended with modules, such as Social Recovery, Session Key and others.\n * @author Chirag Titiya - <chirag@biconomy.io>, Filipp Makarov - <filipp.makarov@biconomy.io>\n */\ncontract SmartAccount is\n    BaseSmartAccount,\n    ModuleManager,\n    FallbackManager,\n    IERC165,\n    SmartAccountErrors,\n    ISignatureValidator\n{\n    using ECDSA for bytes32;\n    using LibAddress for address;\n\n    // Storage Version\n    string public constant VERSION = \"2.0.0\";\n\n    // Owner storage. Deprecated. Left for storage layout compatibility\n    address public ownerDeprecated;\n\n    // changed to 2D nonce below\n    // @notice there is no _nonce\n    // Deprecated. Left for storage layout compatibility\n    mapping(uint256 => uint256) public noncesDeprecated;\n\n    // AA immutable storage\n    IEntryPoint private immutable ENTRY_POINT;\n    address private immutable SELF;\n\n    // Events\n    event ImplementationUpdated(\n        address indexed oldImplementation,\n        address indexed newImplementation\n    );\n    event SmartAccountReceivedNativeToken(\n        address indexed sender,\n        uint256 indexed value\n    );\n\n    /**\n     * @dev Constructor that sets the entry point contract.\n     *      _modules[SENTINEL_MODULES] = SENTINEL_MODULES protects implementation from initialization\n     * @param anEntryPoint The address of the entry point contract.\n     */\n    constructor(IEntryPoint anEntryPoint) {\n        SELF = address(this);\n        if (address(anEntryPoint) == address(0))\n            revert EntryPointCannotBeZero();\n        ENTRY_POINT = anEntryPoint;\n        _modules[SENTINEL_MODULES] = SENTINEL_MODULES;\n    }\n\n    /**\n     * @dev This function is a special fallback function that is triggered when the contract receives Ether.\n     * It logs an event indicating the amount of Ether received and the sender's address.\n     * @notice This function is marked as external and payable, meaning it can be called from external\n     * sources and accepts Ether as payment.\n     */\n    receive() external payable {\n        if (address(this) == SELF) revert DelegateCallsOnly();\n        emit SmartAccountReceivedNativeToken(msg.sender, msg.value);\n    }\n\n    /**\n     * @dev Initialize the Smart Account with required states\n     * @param handler Default fallback handler provided in Smart Account\n     * @param moduleSetupContract Contract, that setups initial auth module for this smart account.\n     * It can be a module factory or a registry module that serves several smart accounts\n     * @param moduleSetupData modules setup data (a standard calldata for the module setup contract)\n     * @notice devs need to make sure it is only callable once by initializer or state check restrictions\n     * @notice any further implementations that introduces a new state must have a reinit method\n     * @notice reinitialization is not possible, as _initialSetupModules reverts if the account is already initialized\n     *         which is when there is at least one enabled module\n     */\n    function init(\n        address handler,\n        address moduleSetupContract,\n        bytes calldata moduleSetupData\n    ) external virtual override returns (address) {\n        if (\n            _modules[SENTINEL_MODULES] != address(0) ||\n            getFallbackHandler() != address(0)\n        ) revert AlreadyInitialized();\n        _setFallbackHandler(handler);\n        return _initialSetupModules(moduleSetupContract, moduleSetupData);\n    }\n\n    /**\n     * @dev Interface function with the standard name for execute_ncC\n     * @param dest Address of the contract to call\n     * @param value Amount of native tokens to send along with the transaction\n     * @param func Data of the transaction\n     */\n    function execute(\n        address dest,\n        uint256 value,\n        bytes calldata func\n    ) external {\n        execute_ncC(dest, value, func);\n    }\n\n    /**\n     * @dev Interface function with the standard name for executeBatch_y6U\n     * @param dest Addresses of the contracts to call\n     * @param value Amounts of native tokens to send along with the transactions\n     * @param func Data of the transactions\n     */\n    function executeBatch(\n        address[] calldata dest,\n        uint256[] calldata value,\n        bytes[] calldata func\n    ) external {\n        executeBatch_y6U(dest, value, func);\n    }\n\n    function validateUserOp(\n        UserOperation calldata userOp,\n        bytes32 userOpHash,\n        uint256 missingAccountFunds\n    ) external virtual override returns (uint256 validationData) {\n        if (msg.sender != address(entryPoint()))\n            revert CallerIsNotAnEntryPoint(msg.sender);\n\n        (, address validationModule) = abi.decode(\n            userOp.signature,\n            (bytes, address)\n        );\n        if (address(_modules[validationModule]) != address(0)) {\n            validationData = IAuthorizationModule(validationModule)\n                .validateUserOp(userOp, userOpHash);\n        } else {\n            revert WrongValidationModule(validationModule);\n        }\n        // Check nonce requirement if any\n        _payPrefund(missingAccountFunds);\n    }\n\n    /**\n     * @dev Adds a module to the allowlist.\n     * @notice This can only be done via a userOp or a selfcall.\n     * @notice Enables the module `module` for the wallet.\n     * @param module Module to be allow-listed.\n     */\n    function enableModule(address module) external virtual override {\n        _requireFromEntryPointOrSelf();\n        _enableModule(module);\n    }\n\n    /**\n     * @dev Setups module for this Smart Account and enables it.\n     * @notice This can only be done via userOp or a selfcall.\n     * @notice Enables the module `module` for the wallet.\n     */\n    function setupAndEnableModule(\n        address setupContract,\n        bytes memory setupData\n    ) external virtual override returns (address) {\n        _requireFromEntryPointOrSelf();\n        return _setupAndEnableModule(setupContract, setupData);\n    }\n\n    /**\n     * @dev Sets the fallback handler.\n     * @notice This can only be done via a UserOp sent by EntryPoint.\n     * @param handler Handler to be set.\n     */\n    function setFallbackHandler(address handler) external virtual override {\n        _requireFromEntryPointOrSelf();\n        _setFallbackHandler(handler);\n    }\n\n    /**\n     * @dev Returns the address of the implementation contract associated with this contract.\n     * @notice The implementation address is stored in the contract's storage slot with index 0.\n     */\n    function getImplementation()\n        external\n        view\n        returns (address _implementation)\n    {\n        assembly {\n            _implementation := sload(address())\n        }\n    }\n\n    /**\n     * @notice Query if a contract implements an interface\n     * @param _interfaceId The interface identifier, as specified in ERC165\n     * @return `true` if the contract implements `_interfaceID`\n     */\n    function supportsInterface(\n        bytes4 _interfaceId\n    ) external view virtual override returns (bool) {\n        return _interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\n    }\n\n    /**\n     * @notice All the new implementations MUST have this method!\n     * @notice Updates the implementation of the base wallet\n     * @param _implementation New wallet implementation\n     */\n    function updateImplementation(address _implementation) public virtual {\n        _requireFromEntryPointOrSelf();\n        require(_implementation != address(0), \"Address cannot be zero\");\n        if (!_implementation.isContract())\n            revert InvalidImplementation(_implementation);\n        address oldImplementation;\n\n        assembly {\n            oldImplementation := sload(address())\n            sstore(address(), _implementation)\n        }\n        emit ImplementationUpdated(oldImplementation, _implementation);\n    }\n\n    /* solhint-disable func-name-mixedcase */\n\n    /**\n     * @dev Execute a transaction (called by entryPoint)\n     * @notice Name is optimized for this method to be cheaper to be called\n     * @param dest Address of the contract to call\n     * @param value Amount of native tokens to send along with the transaction\n     * @param func Data of the transaction\n     */\n    function execute_ncC(\n        address dest,\n        uint256 value,\n        bytes calldata func\n    ) public {\n        _requireFromEntryPoint();\n        _call(dest, value, func);\n    }\n\n    /**\n     * @dev Execute a sequence of transactions\n     * @notice Name is optimized for this method to be cheaper to be called\n     * @param dest Addresses of the contracts to call\n     * @param value Amounts of native tokens to send along with the transactions\n     * @param func Data of the transactions\n     */\n    function executeBatch_y6U(\n        address[] calldata dest,\n        uint256[] calldata value,\n        bytes[] calldata func\n    ) public {\n        _requireFromEntryPoint();\n        if (\n            dest.length == 0 ||\n            dest.length != value.length ||\n            value.length != func.length\n        ) revert WrongBatchProvided(dest.length, value.length, func.length, 0);\n        for (uint256 i; i < dest.length; ) {\n            _call(dest[i], value[i], func[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /* solhint-enable func-name-mixedcase */\n\n    /**\n     * @dev Deposit more funds for this account in the entryPoint\n     */\n    function addDeposit() public payable {\n        entryPoint().depositTo{value: msg.value}(address(this));\n    }\n\n    /**\n     * @dev Withdraw value from the account's deposit\n     * @param withdrawAddress target to send to\n     * @param amount to withdraw\n     */\n    function withdrawDepositTo(\n        address payable withdrawAddress,\n        uint256 amount\n    ) public payable {\n        _requireFromEntryPointOrSelf();\n        entryPoint().withdrawTo(withdrawAddress, amount);\n    }\n\n    /**\n     * @dev Removes a module from the allowlist.\n     * @notice This can only be done via a wallet transaction.\n     * @notice Disables the module `module` for the wallet.\n     * @param prevModule Module that pointed to the module to be removed in the linked list\n     * @param module Module to be removed.\n     */\n    function disableModule(address prevModule, address module) public virtual {\n        _requireFromEntryPointOrSelf();\n        _disableModule(prevModule, module);\n    }\n\n    /**\n     * @dev Returns the current entry point used by this account.\n     * @return EntryPoint as an `IEntryPoint` interface.\n     * @dev This function should be implemented by the subclass to return the current entry point used by this account.\n     */\n    function entryPoint() public view virtual override returns (IEntryPoint) {\n        return ENTRY_POINT;\n    }\n\n    /**\n     * @dev Check current account deposit in the entryPoint\n     */\n    function getDeposit() public view returns (uint256) {\n        return entryPoint().balanceOf(address(this));\n    }\n\n    /**\n     * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)\n     * @dev Forwards the validation to the module specified in the signature\n     * @param dataHash 32 bytes hash of the data signed on the behalf of address(msg.sender)\n     * @param signature Signature byte array associated with dataHash\n     * @return bytes4 value.\n     */\n    function isValidSignature(\n        bytes32 dataHash,\n        bytes memory signature\n    ) public view override returns (bytes4) {\n        (bytes memory moduleSignature, address validationModule) = abi.decode(\n            signature,\n            (bytes, address)\n        );\n        if (address(_modules[validationModule]) != address(0)) {\n            return\n                ISignatureValidator(validationModule).isValidSignature(\n                    dataHash,\n                    moduleSignature\n                );\n        } else {\n            revert WrongValidationModule(validationModule);\n        }\n    }\n\n    /**\n     * @dev internal method that fecilitates the extenral calls from SmartAccount\n     * @dev similar to execute() of Executor.sol\n     * @param target destination address contract/non-contract\n     * @param value amount of native tokens\n     * @param data function singature of destination\n     */\n    function _call(address target, uint256 value, bytes memory data) internal {\n        assembly {\n            let success := call(\n                gas(),\n                target,\n                value,\n                add(data, 0x20),\n                mload(data),\n                0,\n                0\n            )\n            let ptr := mload(0x40)\n            returndatacopy(ptr, 0, returndatasize())\n            if iszero(success) {\n                revert(ptr, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This function allows entry point or SA itself to execute certain actions.\n     * If the caller is not authorized, the function will revert with an error message.\n     * @notice This function acts as modifier and is marked as internal to be be called\n     * within the contract itself only.\n     */\n    function _requireFromEntryPointOrSelf() internal view {\n        if (msg.sender != address(entryPoint()) && msg.sender != address(this))\n            revert CallerIsNotEntryPointOrSelf(msg.sender);\n    }\n\n    /**\n     * @dev This function allows entry point to execute certain actions.\n     * If the caller is not authorized, the function will revert with an error message.\n     * @notice This function acts as modifier and is marked as internal to be be called\n     * within the contract itself only.\n     */\n    function _requireFromEntryPoint() internal view {\n        if (msg.sender != address(entryPoint()))\n            revert CallerIsNotEntryPoint(msg.sender);\n    }\n}\n"
    },
    "contracts/test/SocialRecoveryModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\nimport \"../SmartAccount.sol\";\nimport {Enum} from \"../common/Enum.sol\";\nimport {IAuthorizationModule} from \"../interfaces/IAuthorizationModule.sol\";\n\n// TODO: To be rebuilt for an ownerless setup => like which validation method does it recover?\n\ncontract SocialRecoveryModule is IAuthorizationModule {\n    struct Friends {\n        address[] friends;\n        uint256 threshold;\n    }\n\n    string public constant NAME = \"Social Recovery Module\";\n    string public constant VERSION = \"0.1.0\";\n    uint256 internal constant SIG_VALIDATION_FAILED = 1;\n\n    // @review\n    // Might as well keep a state to mark seen userOpHashes\n    mapping(bytes32 => bool) public opsSeen;\n\n    // @todo\n    // Notice validateAndUpdateNonce in just skipped in case of modules. To avoid replay of same userOpHash I think it should be done.\n\n    mapping(address => Friends) internal _friendsEntries;\n    mapping(address => mapping(address => bool)) public isFriend;\n\n    // isConfirmed - map of [recoveryHash][friend] to bool\n    mapping(bytes32 => mapping(address => bool)) public isConfirmed;\n    mapping(address => uint256) internal _walletsNonces;\n\n    /**\n     * @dev Setup function sets initial storage of contract.\n     */\n    function setup(\n        address[] memory _friends,\n        uint256 _threshold\n    ) public returns (address) {\n        require(\n            _threshold <= _friends.length,\n            \"Threshold exceeds friends count\"\n        );\n        require(_threshold >= 2, \"At least 2 friends required\");\n        Friends storage entry = _friendsEntries[msg.sender];\n        // check for duplicates in friends list\n        for (uint256 i = 0; i < _friends.length; i++) {\n            address friend = _friends[i];\n            require(friend != address(0), \"Invalid friend address provided\");\n            require(\n                !isFriend[msg.sender][friend],\n                \"Duplicate friends provided\"\n            );\n            isFriend[msg.sender][friend] = true;\n        }\n        // update friends list and threshold for smart account\n        entry.friends = _friends;\n        entry.threshold = _threshold;\n        return address(this);\n    }\n\n    function validateUserOp(\n        UserOperation calldata userOp,\n        bytes32 userOpHash\n    ) external virtual returns (uint256) {\n        (bytes memory moduleSignature, ) = abi.decode(\n            userOp.signature,\n            (bytes, address)\n        );\n        return _validateSignature(userOp, userOpHash, moduleSignature);\n    }\n\n    /**\n     * @dev standard validateSignature for modules to validate and mark userOpHash as seen\n     * @param userOp the operation that is about to be executed.\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\n     * @return sigValidationResult sigAuthorizer to be passed back to trusting Account, aligns with validationData\n     */\n    function _validateSignature(\n        UserOperation calldata userOp,\n        bytes32 userOpHash,\n        bytes memory moduleSignature\n    ) internal virtual returns (uint256 sigValidationResult) {\n        (userOp, moduleSignature);\n        if (opsSeen[userOpHash] == true) return SIG_VALIDATION_FAILED;\n        opsSeen[userOpHash] = true;\n        // can perform it's own access control logic, verify agaisnt expected signer and return SIG_VALIDATION_FAILED\n        return 0;\n    }\n\n    /**\n     * @dev Confirm friend recovery transaction. Only by friends.\n     */\n    function confirmTransaction(address _wallet, address _newOwner) public {\n        require(onlyFriends(_wallet, msg.sender), \"sender not a friend\");\n        bytes32 recoveryHash = getRecoveryHash(\n            _wallet,\n            _newOwner,\n            _walletsNonces[_wallet]\n        );\n        isConfirmed[recoveryHash][msg.sender] = true;\n    }\n\n    function recoverAccess(address payable _wallet, address _newOwner) public {\n        // require(onlyFriends(_wallet, msg.sender), \"sender not a friend\");\n        bytes32 recoveryHash = getRecoveryHash(\n            _wallet,\n            _newOwner,\n            _walletsNonces[_wallet]\n        );\n        require(\n            isConfirmedByRequiredFriends(recoveryHash, _wallet),\n            \"Not enough confirmations\"\n        );\n        SmartAccount smartAccount = SmartAccount(payable(_wallet));\n        require(\n            smartAccount.execTransactionFromModule(\n                _wallet,\n                0,\n                // abi.encodeCall(\"setOwner\", (newOwner)),\n                abi.encodeWithSignature(\"setOwner(address)\", _newOwner),\n                Enum.Operation.Call\n            ),\n            \"Could not execute recovery\"\n        );\n        _walletsNonces[_wallet]++;\n    }\n\n    function isConfirmedByRequiredFriends(\n        bytes32 recoveryHash,\n        address _wallet\n    ) public view returns (bool) {\n        uint256 confirmationCount;\n        Friends storage entry = _friendsEntries[_wallet];\n        for (uint256 i = 0; i < entry.friends.length; i++) {\n            if (isConfirmed[recoveryHash][entry.friends[i]])\n                confirmationCount++;\n            if (confirmationCount == entry.threshold) return true;\n        }\n        return false;\n    }\n\n    function onlyFriends(\n        address _wallet,\n        address _friend\n    ) public view returns (bool) {\n        Friends storage entry = _friendsEntries[_wallet];\n        for (uint256 i = 0; i < entry.friends.length; i++) {\n            if (entry.friends[i] == _friend) return true;\n        }\n        return false;\n    }\n\n    /// @dev Returns hash of data encoding owner replacement.\n    /// @return Data hash.\n    function getRecoveryHash(\n        address _wallet,\n        address _newOwner,\n        uint256 _nonce\n    ) public pure returns (bytes32) {\n        return keccak256(abi.encode(_wallet, _newOwner, _nonce));\n    }\n}\n"
    },
    "contracts/utils/GasEstimatorSmartAccount.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {SmartAccountFactory} from \"../factory/SmartAccountFactory.sol\";\n\n// Contract for estimating gas on undeployed smart account\n// Deploys a smart account and then calls the appropriate method\ncontract GasEstimatorSmartAccount {\n    function estimate(\n        address _actualWallet,\n        address _factory,\n        address _moduleSetupContract,\n        bytes calldata _moduleSetupData,\n        uint256 _index,\n        bytes calldata _data // execTransaction data // counterFactual wallet should have assets if required\n    ) external returns (bool success, bytes memory result, uint256 gas) {\n        uint256 initialGas = gasleft();\n        SmartAccountFactory(_factory).deployCounterFactualAccount(\n            _moduleSetupContract,\n            _moduleSetupData,\n            _index\n        );\n        (success, result) = _actualWallet.call(_data);\n        gas = initialGas - gasleft();\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}