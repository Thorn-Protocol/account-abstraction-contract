{
  "address": "0xcA7Cd7CB76F750A5Ec9470DF303D752C28CD772d",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DER_Split_Error",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "expmod_Error",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "k256Decompress_Invalid_Length_Error",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "k256DeriveY_Invalid_Prefix_Error",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "recoverV_Error",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keypairAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "password",
          "type": "string"
        }
      ],
      "name": "setPassword",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "digest",
          "type": "bytes32"
        }
      ],
      "name": "sign",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "v",
              "type": "uint256"
            }
          ],
          "internalType": "struct SignatureRSV",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd5e86087b1bd4ebf251ccac8378b2c76894f0cb55a4a4c7aa1bc21ace0e62484",
  "receipt": {
    "to": null,
    "from": "0x2F459030f95Be9CeeA722cD207F323bd648F65D0",
    "contractAddress": "0xcA7Cd7CB76F750A5Ec9470DF303D752C28CD772d",
    "transactionIndex": 0,
    "gasUsed": "892036",
    "logsBloom": "0x
    "blockHash": "0xafaa1bb0b01063e2d080d55db70a182634875ca32dfa78f12a4ae06cd2bd5b59",
    "transactionHash": "0xd5e86087b1bd4ebf251ccac8378b2c76894f0cb55a4a4c7aa1bc21ace0e62484",
    "logs": [],
    "blockNumber": 5746210,
    "cumulativeGasUsed": "892036",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "04ca1ceda40f850e7d2a631c976f245b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DER_Split_Error\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"expmod_Error\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"k256Decompress_Invalid_Length_Error\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"k256DeriveY_Invalid_Prefix_Error\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"recoverV_Error\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keypairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"setPassword\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"name\":\"sign\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"v\",\"type\":\"uint256\"}],\"internalType\":\"struct SignatureRSV\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/KeyManagementContractRegistryModule/KeyManagement.sol\":\"KeyManagement\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@oasisprotocol/sapphire-contracts/contracts/EthereumUtils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport {Sapphire} from \\\"./Sapphire.sol\\\";\\n\\nstruct SignatureRSV {\\n    bytes32 r;\\n    bytes32 s;\\n    uint256 v;\\n}\\n\\nlibrary EthereumUtils {\\n    uint256 internal constant K256_P =\\n        0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f;\\n\\n    // (p+1)//4\\n    uint256 internal constant K256_P_PLUS_1_OVER_4 =\\n        0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffff0c;\\n\\n    address internal constant PRECOMPILE_BIGMODEXP = address(0x5);\\n\\n    error expmod_Error();\\n\\n    function expmod(\\n        uint256 base,\\n        uint256 exponent,\\n        uint256 modulus\\n    ) internal view returns (uint256 out) {\\n        (bool success, bytes memory result) = PRECOMPILE_BIGMODEXP.staticcall(\\n            abi.encodePacked(\\n                uint256(0x20), // length of base\\n                uint256(0x20), // length of exponent\\n                uint256(0x20), // length of modulus\\n                base,\\n                exponent,\\n                modulus\\n            )\\n        );\\n\\n        if (!success) revert expmod_Error();\\n\\n        out = uint256(bytes32(result));\\n    }\\n\\n    error k256DeriveY_Invalid_Prefix_Error();\\n\\n    /**\\n     * @notice Recover Y coordinate from X coordinate and sign bit.\\n     * @param prefix 0x02 or 0x03 indicates sign bit of compressed point.\\n     * @param x X coordinate.\\n     */\\n    function k256DeriveY(\\n        uint8 prefix,\\n        uint256 x\\n    ) internal view returns (uint256 y) {\\n        if (prefix != 0x02 && prefix != 0x03)\\n            revert k256DeriveY_Invalid_Prefix_Error();\\n\\n        // x^3 + ax + b, where a=0, b=7\\n        y = addmod(mulmod(x, mulmod(x, x, K256_P), K256_P), 7, K256_P);\\n\\n        // find square root of quadratic residue\\n        y = expmod(y, K256_P_PLUS_1_OVER_4, K256_P);\\n\\n        // negate y if indicated by sign bit\\n        if ((y + prefix) % 2 != 0) {\\n            y = K256_P - y;\\n        }\\n    }\\n\\n    error k256Decompress_Invalid_Length_Error();\\n\\n    /**\\n     * @notice Decompress SEC P256 k1 point.\\n     * @param pk 33 byte compressed public key.\\n     * @return x X coordinate.\\n     * @return y Y coordinate.\\n     */\\n    function k256Decompress(\\n        bytes memory pk\\n    ) internal view returns (uint256 x, uint256 y) {\\n        if (pk.length != 33) revert k256Decompress_Invalid_Length_Error();\\n        assembly {\\n            // skip 32 byte length prefix, plus one byte sign prefix\\n            x := mload(add(pk, 33))\\n        }\\n        y = k256DeriveY(uint8(pk[0]), x);\\n    }\\n\\n    function k256PubkeyToEthereumAddress(\\n        bytes memory pubkey\\n    ) internal view returns (address) {\\n        (uint256 x, uint256 y) = k256Decompress(pubkey);\\n        return toEthereumAddress(x, y);\\n    }\\n\\n    /**\\n     * @notice Convert SEC P256 k1 curve point to Ethereum address.\\n     * @param x X coordinate.\\n     * @param y Y coordinate.\\n     * @custom:see https://gavwood.com/paper.pdf (pp. 212)\\n     */\\n    function toEthereumAddress(\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (address) {\\n        bytes32 digest = keccak256(abi.encodePacked(x, y));\\n\\n        return address(uint160((uint256(digest) << 96) >> 96));\\n    }\\n\\n    error DER_Split_Error();\\n\\n    /**\\n     * @notice Extracts the `r` and `s` parameters from a DER encoded ECDSA\\n     * signature.\\n     *\\n     * The signature is an ASN1 encoded SEQUENCE of the variable length `r` and\\n     * `s` INTEGERs.\\n     *\\n     * ```\\n     * | 0x30 | len(z) | 0x02 | len(r) |  r   | 0x02 | len(s) |  s   | = hex value\\n     * |  1   |   1    |   1  |   1    | 1-33 |  1   |   1    | 1-33 | = byte length\\n     * ```\\n     *\\n     * If the highest bit of either `r` or `s` is set, it will be prefix padded\\n     * with a zero byte. There is exponentially decreasing probability that\\n     * either `r` or `s` will be below 32 bytes. There is a very high\\n     * probability that either `r` or `s` will be 33 bytes. This function only\\n     * works if either `r` or `s` are 256bits or lower.\\n     *\\n     * @param der DER encoded ECDSA signature\\n     * @return rsv ECDSA R point X coordinate, and S scalar\\n     * @custom:see https://bitcoin.stackexchange.com/questions/58853/how-do-you-figure-out-the-r-and-s-out-of-a-signature-using-python\\n     */\\n    function splitDERSignature(\\n        bytes memory der\\n    ) internal pure returns (SignatureRSV memory rsv) {\\n        if (der.length < 8) revert DER_Split_Error();\\n        if (der[0] != 0x30) revert DER_Split_Error();\\n        if (der[2] != 0x02) revert DER_Split_Error();\\n\\n        uint256 zLen = uint8(der[1]);\\n        uint256 rLen = uint8(der[3]);\\n        if (rLen > 33) revert DER_Split_Error();\\n\\n        uint256 sOffset = 4 + rLen;\\n        uint256 sLen = uint8(der[sOffset + 1]);\\n        if (sLen > 33) revert DER_Split_Error();\\n        if (der[sOffset] != 0x02) revert DER_Split_Error();\\n\\n        if (rLen + sLen + 4 != zLen) revert DER_Split_Error();\\n        if (der.length != zLen + 2) revert DER_Split_Error();\\n\\n        sOffset += 2;\\n        uint256 rOffset = 4;\\n\\n        if (rLen == 33) {\\n            if (der[4] != 0x00) revert DER_Split_Error();\\n            rOffset += 1;\\n            rLen -= 1;\\n        }\\n\\n        if (sLen == 33) {\\n            if (der[sOffset] != 0x00) revert DER_Split_Error();\\n            sOffset += 1;\\n            sLen -= 1;\\n        }\\n\\n        bytes32 r;\\n        bytes32 s;\\n\\n        assembly {\\n            r := mload(add(der, add(32, rOffset)))\\n            s := mload(add(der, add(32, sOffset)))\\n        }\\n\\n        // When length of either `r` or `s` is below 32 bytes\\n        // the 32 byte `mload` will suffix it with unknown stuff\\n        // shift right to remove the unknown stuff, prefixing with zeros instead\\n\\n        if (rLen < 32) {\\n            r >>= 8 * (32 - rLen);\\n        }\\n\\n        if (sLen < 32) {\\n            s >>= 8 * (32 - sLen);\\n        }\\n\\n        rsv.r = r;\\n        rsv.s = s;\\n    }\\n\\n    error recoverV_Error();\\n\\n    function recoverV(\\n        address pubkeyAddr,\\n        bytes32 digest,\\n        SignatureRSV memory rsv\\n    ) internal pure {\\n        rsv.v = 27;\\n\\n        if (ecrecover(digest, uint8(rsv.v), rsv.r, rsv.s) != pubkeyAddr) {\\n            rsv.v = 28;\\n\\n            if (ecrecover(digest, uint8(rsv.v), rsv.r, rsv.s) != pubkeyAddr) {\\n                revert recoverV_Error();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert a Secp256k1PrehashedKeccak256 signature to one accepted\\n     * by ecrecover.\\n     * @param pubkey 33 byte compressed public key.\\n     * @param digest 32 byte pre-hashed message digest.\\n     * @param signature ASN.1 DER encoded signature, as returned from\\n     * [`Sapphire.sign`](../Sapphire.sol/library.Sapphire.md#sign).\\n     * @return pubkeyAddr 20 byte Ethereum address.\\n     * @return rsv Ethereum EcDSA RSV signature values.\\n     * @custom:see https://gavwood.com/paper.pdf (pp. 206)\\n     */\\n    function toEthereumSignature(\\n        bytes memory pubkey,\\n        bytes32 digest,\\n        bytes memory signature\\n    ) internal view returns (address pubkeyAddr, SignatureRSV memory rsv) {\\n        pubkeyAddr = k256PubkeyToEthereumAddress(pubkey);\\n\\n        rsv = splitDERSignature(signature);\\n\\n        recoverV(pubkeyAddr, digest, rsv);\\n    }\\n\\n    function sign(\\n        address pubkeyAddr,\\n        bytes32 secretKey,\\n        bytes32 digest\\n    ) internal view returns (SignatureRSV memory rsv) {\\n        bytes memory signature = Sapphire.sign(\\n            Sapphire.SigningAlg.Secp256k1PrehashedKeccak256,\\n            abi.encodePacked(secretKey),\\n            abi.encodePacked(digest),\\n            \\\"\\\"\\n        );\\n\\n        rsv = splitDERSignature(signature);\\n\\n        recoverV(pubkeyAddr, digest, rsv);\\n    }\\n\\n    /**\\n     * @notice Generate an Ethereum compatible SEC P256 k1 keypair and\\n     * corresponding public address.\\n     * @return pubkeyAddr Ethereum address.\\n     * @return secretKey Secret key used for signing.\\n     */\\n    function generateKeypair()\\n        internal\\n        view\\n        returns (address pubkeyAddr, bytes32 secretKey)\\n    {\\n        bytes memory randSeed = Sapphire.randomBytes(32, \\\"\\\");\\n\\n        secretKey = bytes32(randSeed);\\n\\n        (bytes memory pk, ) = Sapphire.generateSigningKeyPair(\\n            Sapphire.SigningAlg.Secp256k1PrehashedKeccak256,\\n            randSeed\\n        );\\n\\n        pubkeyAddr = k256PubkeyToEthereumAddress(pk);\\n    }\\n}\\n\",\"keccak256\":\"0x693ff243247cd56be267df50d14113fcddbfdb248215441a18aa34d6e69aa483\",\"license\":\"Apache-2.0\"},\"@oasisprotocol/sapphire-contracts/contracts/Sapphire.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Sapphire\\n * @notice This library provides a number of convenient wrappers for\\n * cryptographic operations such as the x25519 key derivation, Deoxys-II-based\\n * encryption and decryption, signing key generation, message digest signing and\\n * verification, gas padding and hashing.\\n *\\n * Most of the mentioned functions are implemented as Sapphire's precompiles and\\n * are cheap to call.\\n *\\n * #### Calling Precompiles Manually\\n *\\n * You can override the wrappers and call Sapphire precompiles by dispatching\\n * calls to specific well-known contract addresses, as described below. The\\n * __Precompile address__ section of each function will show you the address\\n * of the corresponding precompile.\\n *\\n * Input parameters should be packed into a contiguous memory region with each\\n * chunk of data padded to 32 bytes as usual. The recommended way to construct\\n * parameter byte sequences in Solidity is with `abi.encode` and `abi.decode`,\\n * which will transparently handle things like putting `bytes` lengths in the\\n * correct position.\\n */\\nlibrary Sapphire {\\n    // Oasis-specific, confidential precompiles\\n    address internal constant RANDOM_BYTES =\\n        0x0100000000000000000000000000000000000001;\\n    address internal constant DERIVE_KEY =\\n        0x0100000000000000000000000000000000000002;\\n    address internal constant ENCRYPT =\\n        0x0100000000000000000000000000000000000003;\\n    address internal constant DECRYPT =\\n        0x0100000000000000000000000000000000000004;\\n    address internal constant GENERATE_SIGNING_KEYPAIR =\\n        0x0100000000000000000000000000000000000005;\\n    address internal constant SIGN_DIGEST =\\n        0x0100000000000000000000000000000000000006;\\n    address internal constant VERIFY_DIGEST =\\n        0x0100000000000000000000000000000000000007;\\n    address internal constant CURVE25519_PUBLIC_KEY =\\n        0x0100000000000000000000000000000000000008;\\n    address internal constant GAS_USED =\\n        0x0100000000000000000000000000000000000009;\\n    address internal constant PAD_GAS =\\n        0x010000000000000000000000000000000000000a;\\n\\n    // Oasis-specific, general precompiles\\n    address internal constant SHA512_256 =\\n        0x0100000000000000000000000000000000000101;\\n    address internal constant SHA512 =\\n        0x0100000000000000000000000000000000000102;\\n    address internal constant SHA384 =\\n        0x0100000000000000000000000000000000000104;\\n\\n    type Curve25519PublicKey is bytes32;\\n    type Curve25519SecretKey is bytes32;\\n\\n    enum SigningAlg {\\n        /// Ed25519 signature over the provided message using SHA-512/265 with a domain separator.\\n        /// Can be used to sign transactions for the Oasis consensus layer and SDK paratimes.\\n        Ed25519Oasis,\\n        /// Ed25519 signature over the provided message.\\n        Ed25519Pure,\\n        /// Ed25519 signature over the provided prehashed SHA-512 digest.\\n        Ed25519PrehashedSha512,\\n        /// Secp256k1 signature over the provided message using SHA-512/256 with a domain separator.\\n        /// Can be used to sign transactions for the Oasis consensus layer and SDK paratimes.\\n        Secp256k1Oasis,\\n        /// Secp256k1 over the provided Keccak256 digest.\\n        /// Can be used to sign transactions for Ethereum-compatible networks.\\n        Secp256k1PrehashedKeccak256,\\n        /// Secp256k1 signature over the provided SHA-256 digest.\\n        Secp256k1PrehashedSha256,\\n        /// Sr25519 signature over the provided message.\\n        Sr25519,\\n        /// Secp256r1 signature over the provided SHA-256 digest.\\n        Secp256r1PrehashedSha256,\\n        /// Secp384r1 signature over the provided SHA-384 digest.\\n        Secp384r1PrehashedSha384\\n    }\\n\\n    /**\\n     * @notice Generate `num_bytes` pseudo-random bytes, with an optional\\n     * personalization string (`pers`) added into the hashing algorithm to\\n     * increase domain separation when needed.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000001`\\n     *\\n     * #### Gas cost\\n     *\\n     * 10,000 minimum plus 240 per output word plus 60 per word of the\\n     * personalization string.\\n     *\\n     * #### Implementation details\\n     *\\n     * The mode (e.g. simulation or \\\"view call\\\" vs transaction execution) is fed\\n     * to TupleHash (among other block-dependent components) to derive the \\\"key\\n     * id\\\", which is then used to derive a per-block VRF key from\\n     * epoch-ephemeral entropy (using KMAC256 and cSHAKE) so a different key\\n     * id will result in a unique per-block VRF key. This per-block VRF key is\\n     * then used to create the per-block root RNG which is then used to derive\\n     * domain-separated (using Merlin transcripts) per-transaction random RNGs\\n     * which are then exposed via this precompile. The KMAC, cSHAKE and\\n     * TupleHash algorithms are SHA-3 derived functions defined in [NIST\\n     * Special Publication 800-185](https://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-185.pdf).\\n     *\\n     * #### DANGER: Prior to Sapphire ParaTime 0.6.0\\n     *\\n     * All view queries and simulated transactions (via `eth_call`) would\\n     * receive the same entropy in-between blocks if they use the same\\n     * `num_bytes` and `pers` parameters. If your contract requires\\n     * confidentiality you should generate a secret in the constructor to be\\n     * used with view calls:\\n     *\\n     * ```solidity\\n     * Sapphire.randomBytes(64, abi.encodePacked(msg.sender, this.perContactSecret));\\n     * ```\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes memory randomPad = Sapphire.randomBytes(64, \\\"\\\");\\n     * ```\\n     *\\n     * @param numBytes The number of bytes to return.\\n     * @param pers An optional personalization string to increase domain\\n     *        separation.\\n     * @return The random bytes. If the number of bytes requested is too large\\n     *         (over 1024), a smaller amount (1024) will be returned.\\n     */\\n    function randomBytes(uint256 numBytes, bytes memory pers)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        (bool success, bytes memory entropy) = RANDOM_BYTES.staticcall(\\n            abi.encode(numBytes, pers)\\n        );\\n        require(success, \\\"randomBytes: failed\\\");\\n        return entropy;\\n    }\\n\\n    /**\\n     * @notice Generates a Curve25519 keypair.\\n     * @param pers An optional personalization string used to add domain\\n     * separation.\\n     * @return pk The Curve25519 public key. Useful for key exchange.\\n     * @return sk The Curve25519 secret key. Pairs well with\\n     * [deriveSymmetricKey](#derivesymmetrickey).\\n     */\\n    function generateCurve25519KeyPair(bytes memory pers)\\n        internal\\n        view\\n        returns (Curve25519PublicKey pk, Curve25519SecretKey sk)\\n    {\\n        bytes memory scalar = randomBytes(32, pers);\\n        // Twiddle some bits, as per RFC 7748 \\u00a75.\\n        scalar[0] &= 0xf8; // Make it a multiple of 8 to avoid small subgroup attacks.\\n        scalar[31] &= 0x7f; // Clamp to < 2^255 - 19\\n        scalar[31] |= 0x40; // Clamp to >= 2^254\\n        (bool success, bytes memory pkBytes) = CURVE25519_PUBLIC_KEY.staticcall(\\n            scalar\\n        );\\n        require(success, \\\"gen curve25519 pk: failed\\\");\\n        return (\\n            Curve25519PublicKey.wrap(bytes32(pkBytes)),\\n            Curve25519SecretKey.wrap(bytes32(scalar))\\n        );\\n    }\\n\\n    /**\\n     * @notice Derive a symmetric key from a pair of keys using x25519.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000002`\\n     *\\n     * #### Gas cost\\n     *\\n     * 100,000\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes32 publicKey = ... ;\\n     * bytes32 privateKey = ... ;\\n     * bytes32 symmetric = Sapphire.deriveSymmetricKey(publicKey, privateKey);\\n     * ```\\n     *\\n     * @param peerPublicKey The peer's public key.\\n     * @param secretKey Your secret key.\\n     * @return A derived symmetric key.\\n     */\\n    function deriveSymmetricKey(\\n        Curve25519PublicKey peerPublicKey,\\n        Curve25519SecretKey secretKey\\n    ) internal view returns (bytes32) {\\n        (bool success, bytes memory symmetric) = DERIVE_KEY.staticcall(\\n            abi.encode(peerPublicKey, secretKey)\\n        );\\n        require(success, \\\"deriveSymmetricKey: failed\\\");\\n        return bytes32(symmetric);\\n    }\\n\\n    /**\\n     * @notice Encrypt and authenticate the plaintext and additional data using\\n     * DeoxysII.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000003`\\n     *\\n     * #### Gas cost\\n     *\\n     * 50,000 minimum plus 100 per word of input\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes32 key = ... ;\\n     * bytes32 nonce = ... ;\\n     * bytes memory text = \\\"plain text\\\";\\n     * bytes memory ad = \\\"additional data\\\";\\n     * bytes memory encrypted = Sapphire.encrypt(key, nonce, text, ad);\\n     * bytes memory decrypted = Sapphire.decrypt(key, nonce, encrypted, ad);\\n     * ```\\n     *\\n     * @param key The key to use for encryption.\\n     * @param nonce The nonce. Note that only the first 15 bytes of this\\n     * parameter are used.\\n     * @param plaintext The plaintext to encrypt and authenticate.\\n     * @param additionalData The additional data to authenticate.\\n     * @return The ciphertext with appended auth tag.\\n     */\\n    function encrypt(\\n        bytes32 key,\\n        bytes32 nonce,\\n        bytes memory plaintext,\\n        bytes memory additionalData\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory ciphertext) = ENCRYPT.staticcall(\\n            abi.encode(key, nonce, plaintext, additionalData)\\n        );\\n        require(success, \\\"encrypt: failed\\\");\\n        return ciphertext;\\n    }\\n\\n    /**\\n     * @notice Decrypt and authenticate the ciphertext and additional data using\\n     * DeoxysII. Reverts if the auth tag is incorrect.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000004`\\n     *\\n     * #### Gas cost\\n     *\\n     * 50,000 minimum plus 100 per word of input\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes32 key = ... ;\\n     * bytes32 nonce = ... ;\\n     * bytes memory text = \\\"plain text\\\";\\n     * bytes memory ad = \\\"additional data\\\";\\n     * bytes memory encrypted = Sapphire.encrypt(key, nonce, text, ad);\\n     * bytes memory decrypted = Sapphire.decrypt(key, nonce, encrypted, ad);\\n     * ```\\n     *\\n     * @param key The key to use for decryption.\\n     * @param nonce The nonce. Note that only the first 15 bytes of this\\n     * parameter are used.\\n     * @param ciphertext The ciphertext with tag to decrypt and authenticate.\\n     * @param additionalData The additional data to authenticate against the\\n     * ciphertext.\\n     * @return The original plaintext.\\n     */\\n    function decrypt(\\n        bytes32 key,\\n        bytes32 nonce,\\n        bytes memory ciphertext,\\n        bytes memory additionalData\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory plaintext) = DECRYPT.staticcall(\\n            abi.encode(key, nonce, ciphertext, additionalData)\\n        );\\n        require(success, \\\"decrypt: failed\\\");\\n        return plaintext;\\n    }\\n\\n    /**\\n     * @notice Generate a public/private key pair using the specified method and\\n     * seed. The available methods are items in the\\n     * [`Sapphire.SigningAlg`](#signingalg) enum. Note, however, that the\\n     * generation method ignores subvariants, so all three Ed25519-based are\\n     * equivalent, and all Secp256k1 & Secp256r1 based methods are equivalent.\\n     * Sr25519 is not available and will return an error.\\n     *\\n     * #### Precompile address\\n     * `0x0100000000000000000000000000000000000005`\\n     *\\n     * #### Gas Cost\\n     *\\n     * ##### Ed25519: 1,000 gas\\n     *\\n     * - `0` (`Ed25519Oasis`)\\n     * - `1` (`Ed25519Pure`)\\n     * - `2` (`Ed25519PrehashedSha512`)\\n     *\\n     * ##### Secp256k1: 1,500 gas.\\n     * - `3` (`Secp256k1Oasis`)\\n     * - `4` (`Secp256k1PrehashedKeccak256`)\\n     * - `5` (`Secp256k1PrehashedSha256`)\\n     *\\n     * ##### Secp256r1: 4,000 gas\\n     * - `7` (`Secp256r1PrehashedSha256`)\\n     *\\n     * #### Public Key Format\\n     *\\n     * ##### Ed25519\\n     *\\n     * 32 bytes\\n     *\\n     * ##### Secp256k1 & Secp256r1\\n     *\\n     * 33 bytes, compressed format (`0x02` or `0x03` prefix, then 32 byte X\\n     * coordinate).\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes memory seed = hex\\\"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\\\";\\n     * bytes memory publicKey;\\n     * bytes memory privateKey;\\n     * (publicKey, privateKey) = Sapphire.generateSigningKeyPair(Sapphire.SigningAlg.Ed25519Pure, seed);\\n     * ```\\n     *\\n     * @param alg The signing alg for which to generate a keypair.\\n     * @param seed The seed to use for generating the key pair. You can use the\\n     * `randomBytes` method if you don't already have a seed.\\n     * @return publicKey The public half of the keypair.\\n     * @return secretKey The secret half of the keypair.\\n     */\\n    function generateSigningKeyPair(SigningAlg alg, bytes memory seed)\\n        internal\\n        view\\n        returns (bytes memory publicKey, bytes memory secretKey)\\n    {\\n        (bool success, bytes memory keypair) = GENERATE_SIGNING_KEYPAIR\\n            .staticcall(abi.encode(alg, seed));\\n        require(success, \\\"gen signing keypair: failed\\\");\\n        return abi.decode(keypair, (bytes, bytes));\\n    }\\n\\n    /**\\n     * @notice Sign a message within the provided context using the specified\\n     * algorithm, and return the signature. The `context_or_digest` and\\n     * `messages` parameters change in meaning slightly depending on the method\\n     * requested. For methods that take a context in addition to the message you\\n     * must pass the context in the `context_or_digest` parameter and use\\n     * `message` as expected. For methods that take a pre-existing hash of the\\n     * message, pass that in `context_or_digest` and leave `message` empty.\\n     * Specifically the `Ed25519Oasis` and `Secp256k1Oasis` variants take both a\\n     * context and a message (each are variable length `bytes`), the context\\n     * serves as a domain separator.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000006`\\n     *\\n     * #### Gas cost\\n     *\\n     * See below for the method-dependent base cost, plus 8 gas per 32 bytes of\\n     * context and message except digest.\\n     *\\n     * #### Signing algorithms\\n     *\\n     * - `0` (`Ed25519Oasis`): 1,500 gas, variable length context and message.\\n     * - `1` (`Ed25519Pure`): 1,500 gas, empty context, variable length message.\\n     * - `2` (`Ed25519PrehashedSha512`): 1,500 gas, pre-existing SHA-512 hash\\n     *   (64 bytes) as context, empty message.\\n     * - `3` (`Secp256k1Oasis`): 3,000 gas, variable length context and message\\n     * - `4` (`Secp256k1PrehashedKeccak256`): 3,000 gas, pre-existing hash\\n     *   (32 bytes) as context, empty message.\\n     * - `5` (`Secp256k1PrehashedSha256`): 3,000 gas, pre-existing hash (32\\n     *   bytes) as context, empty message.\\n     * - `7` (`Secp256r1PrehashedSha256`): 9,000 gas, pre-existing hash (32\\n     *   bytes) as context, empty message.\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * Sapphire.SigningAlg alg = Sapphire.SigningAlg.Ed25519Pure;\\n     * bytes memory pk;\\n     * bytes memory sk;\\n     * (pk, sk) = Sapphire.generateSigningKeyPair(alg, Sapphire.randomBytes(32, \\\"\\\"));\\n     * bytes memory signature = Sapphire.sign(alg, sk, \\\"\\\", \\\"signed message\\\");\\n     * ```\\n     *\\n     * @param alg The signing algorithm to use.\\n     * @param secretKey The secret key to use for signing. The key must be valid\\n     * for use with the requested algorithm.\\n     * @param contextOrHash Domain-Separator Context, or precomputed hash bytes.\\n     * @param message Message to sign, should be zero-length if precomputed hash\\n     * given.\\n     * @return signature The resulting signature.\\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/confidential.rs :: call_sign\\n     */\\n    function sign(\\n        SigningAlg alg,\\n        bytes memory secretKey,\\n        bytes memory contextOrHash,\\n        bytes memory message\\n    ) internal view returns (bytes memory signature) {\\n        (bool success, bytes memory sig) = SIGN_DIGEST.staticcall(\\n            abi.encode(alg, secretKey, contextOrHash, message)\\n        );\\n        require(success, \\\"sign: failed\\\");\\n        return sig;\\n    }\\n\\n    /**\\n     * @notice Verifies that the provided digest was signed with using the\\n     * secret key corresponding to the provided private key and the specified\\n     * signing algorithm.\\n     *\\n     * The `method`, `context_or_digest` and `message` parameters have the same\\n     * meaning as described above in the [sign()](#sign) function.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000007`\\n     *\\n     * #### Gas cost\\n     *\\n     * The algorithm-specific base cost below, with an additional **8 gas per\\n     * 32 bytes** of `context` and `message` for the `Ed25519Oasis`,\\n     * `Ed25519Pure` and `Secp256k1Oasis` algorithms.\\n     *\\n     * - `0` (`Ed25519Oasis`): 2,000 gas\\n     * - `1` (`Ed25519Pure`): 2,000 gas\\n     * - `2` (`Ed25519PrehashedSha512`): 2,000 gas\\n     * - `3` (`Secp256k1Oasis`): 3,000 gas\\n     * - `4` (`Secp256k1PrehashedKeccak256`): 3,000 gas\\n     * - `5` (`Secp256k1PrehashedSha256`): 3,000 gas\\n     * - `7` (`Secp256r1PrehashedSha256`): 7,900 gas\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * Sapphire.SigningAlg alg = Sapphire.SigningAlg.Secp256k1PrehashedKeccak256;\\n     * bytes memory pk;\\n     * bytes memory sk;\\n     * bytes memory digest = abi.encodePacked(keccak256(\\\"signed message\\\"));\\n     * (pk, sk) = Sapphire.generateSigningKeyPair(alg, Sapphire.randomBytes(32, \\\"\\\"));\\n     * bytes memory signature = Sapphire.sign(alg, sk, digest, \\\"\\\");\\n     * require( Sapphire.verify(alg, pk, digest, \\\"\\\", signature) );\\n     * ```\\n     *\\n     * @param alg The signing algorithm by which the signature was generated.\\n     * @param publicKey The public key against which to check the signature.\\n     * @param contextOrHash Domain-Separator Context, or precomputed hash bytes\\n     * @param message The hash of the message that was signed, should be\\n     * zero-length if precomputed hash was given.\\n     * @param signature The signature to check.\\n     * @return verified Whether the signature is valid for the given parameters.\\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/confidential.rs :: call_verify\\n     */\\n    function verify(\\n        SigningAlg alg,\\n        bytes memory publicKey,\\n        bytes memory contextOrHash,\\n        bytes memory message,\\n        bytes memory signature\\n    ) internal view returns (bool verified) {\\n        (bool success, bytes memory v) = VERIFY_DIGEST.staticcall(\\n            abi.encode(alg, publicKey, contextOrHash, message, signature)\\n        );\\n        require(success, \\\"verify: failed\\\");\\n        return abi.decode(v, (bool));\\n    }\\n\\n    /**\\n     * @notice Set the current transactions gas usage to a specific amount\\n     * @dev Will cause a reversion if the current usage is more than the amount.\\n     * @param toAmount Gas usage will be set to this amount\\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/gas.rs :: call_pad_gas\\n     *\\n     */\\n    function padGas(uint128 toAmount) internal view {\\n        (bool success, ) = PAD_GAS.staticcall(abi.encode(toAmount));\\n        require(success, \\\"verify: failed\\\");\\n    }\\n\\n    /**\\n     * @notice Returns the amount of gas currently used by the transaction\\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/gas.rs :: call_gas_used\\n     */\\n    function gasUsed() internal view returns (uint64) {\\n        (bool success, bytes memory v) = GAS_USED.staticcall(\\\"\\\");\\n        require(success, \\\"gasused: failed\\\");\\n        return abi.decode(v, (uint64));\\n    }\\n}\\n\\n/**\\n * @notice Hash the input data with SHA-512/256, according to\\n * [NIST.FIPS.180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\\n *\\n * #### Precompile address\\n *\\n * `0x0100000000000000000000000000000000000102`\\n *\\n * #### Gas cost\\n *\\n * 115 gas, then 13 gas per word\\n *\\n * #### Example\\n *\\n * ```solidity\\n * bytes32 result = sha512_256(abi.encodePacked(\\\"input data\\\"));\\n * ```\\n *\\n * #### Warning: SHA-512 vs SHA-512/256 Length-Extension Attacks\\n *\\n * [SHA-512](function.sha512.md#sha512) is vulnerable to [length-extension\\n * attacks](https://en.wikipedia.org/wiki/Length_extension_attack), which are\\n * relevant if you are computing the hash of a secret message. The\\n * [SHA-512/256](function.sha512_256.md#sha512_256) variant is **not**\\n * vulnerable to length-extension attacks.\\n *\\n * @param input Bytes to hash.\\n * @return result 32 byte digest.\\n * @custom:standard https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\\n * @custom:see @oasisprotocol/oasis-sdk :: precompile/sha2.rs :: call_sha512_256\\n */\\nfunction sha512_256(bytes memory input) view returns (bytes32 result) {\\n    (bool success, bytes memory output) = Sapphire.SHA512_256.staticcall(input);\\n\\n    require(success, \\\"sha512_256\\\");\\n\\n    return bytes32(output);\\n}\\n\\n/**\\n * @notice Hash the input data with SHA-512, according to\\n * [NIST.FIPS.180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf)\\n *\\n * #### Precompile address\\n *\\n * `0x0100000000000000000000000000000000000101`\\n *\\n * #### Warning: SHA-512 vs SHA-512/256 Length-Extension Attacks\\n *\\n * [SHA-512](function.sha512.md#sha512) is vulnerable to [length-extension\\n * attacks](https://en.wikipedia.org/wiki/Length_extension_attack), which are\\n * relevant if you are computing the hash of a secret message. The\\n * [SHA-512/256](function.sha512_256.md#sha512_256) variant is **not**\\n * vulnerable to length-extension attacks.\\n *\\n * #### Gas Cost\\n *\\n * 115 gas, then 13 gas per word\\n *\\n * #### Example\\n *\\n * ```solidity\\n * bytes memory result = sha512(abi.encodePacked(\\\"input data\\\"));\\n * ```\\n *\\n * @param input Bytes to hash.\\n * @return output 64 byte digest.\\n * @custom:standard https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\\n * @custom:see @oasisprotocol/oasis-sdk :: precompile/sha2.rs :: call_sha512\\n */\\nfunction sha512(bytes memory input) view returns (bytes memory output) {\\n    bool success;\\n\\n    (success, output) = Sapphire.SHA512.staticcall(input);\\n\\n    require(success, \\\"sha512\\\");\\n}\\n\\n/**\\n * @notice Hash the input data with SHA-384.\\n * @param input Bytes to hash.\\n * @return output 48 byte digest.\\n * @custom:standard https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\\n * @custom:see @oasisprotocol/oasis-sdk :: precompile/sha2.rs :: call_sha384\\n */\\nfunction sha384(bytes memory input) view returns (bytes memory output) {\\n    bool success;\\n\\n    (success, output) = Sapphire.SHA384.staticcall(input);\\n\\n    require(success, \\\"sha384\\\");\\n}\\n\",\"keccak256\":\"0x81a0aa5766f7c48ea799114f44e902b2eb11f21808db23d56b6ca9edd48b8f59\",\"license\":\"Apache-2.0\"},\"contracts/modules/KeyManagementContractRegistryModule/KeyManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\nimport {SignatureRSV, EthereumUtils} from \\\"@oasisprotocol/sapphire-contracts/contracts/EthereumUtils.sol\\\";\\nimport {Sapphire} from \\\"@oasisprotocol/sapphire-contracts/contracts/Sapphire.sol\\\";\\n\\ncontract KeyManagement {\\n    bool private _initialized;\\n    bool private _initPassword;\\n    string private _password;\\n    address public owner;\\n    address public keypairAddress;\\n    bytes32 private keypairSecret;\\n\\n    constructor() {}\\n\\n    function init(address _owner) external returns (address) {\\n        require(!_initialized, \\\"AlreadyInitialized\\\");\\n        owner = _owner;\\n        (keypairAddress, keypairSecret) = EthereumUtils.generateKeypair();\\n        _initialized = true;\\n        return owner;\\n    }\\n\\n    function setPassword(string calldata password) public onlyOwner {\\n        _password = password;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only Owner\\\");\\n        _;\\n    }\\n\\n    function sign(\\n        bytes32 digest\\n    ) public view onlyOwner returns (SignatureRSV memory) {\\n        return EthereumUtils.sign(keypairAddress, keypairSecret, digest);\\n    }\\n\\n    // function verify(\\n    //     bytes memory contextOrHash,\\n    //     bytes memory message,\\n    //     bytes memory signature\\n    // ) public view returns (bool verify) {\\n    //     verify = Sapphire.verify(\\n    //         Sapphire.SigningAlg.Secp256k1PrehashedKeccak256,\\n    //         bytes(keypairAddress),\\n    //         contextOrHash,\\n    //         \\\"\\\",\\n    //         signature\\n    //     );\\n    // }\\n}\\n\",\"keccak256\":\"0xa550c6c417f0e4f4a9ec83d7ed9eef100cc2d66a405567f01ca6de34358cff4f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610f19908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b6000803560e01c90816319ab453c1461007a57508063290bb45314610071578063799cd333146100685780638da5cb5b1461005f5763ccb3c9d11461005757600080fd5b61000e610478565b5061000e610450565b5061000e6102c6565b5061000e610189565b3461018657602036600319011261018657600435906001600160a01b038216809203610186575460ff166101485773ffffffffffffffffffffffffffffffffffffffff1960025416176002556101036100da6100d4610588565b60045590565b6001600160a01b031673ffffffffffffffffffffffffffffffffffffffff196003541617600355565b610115600160ff196000541617600055565b61014461012a6002546001600160a01b031690565b6040516001600160a01b0390911681529081906020820190565b0390f35b62461bcd60e51b6080526020608452601260a4527f416c7265616479496e697469616c697a6564000000000000000000000000000060c45260646080fd5b80fd5b503461000e5760208060031936011261000e5760043567ffffffffffffffff80821161000e573660238301121561000e57816004013590811161000e5760243681838501011161000e576101e96001600160a01b03600254163314610a70565b6001926101ff836101fa8654610abc565b610af6565b600094601f841160011461023d575093829394600093610230575b505050600019600383901b1c191690821b179055005b010135905038808061021a565b91601f1984169561027060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690565b9381905b8882106102ad57505084869710610291575b50505050811b019055005b60001960f88660031b161c199201013516905538808080610286565b8088849786839596890101358155019601920190610274565b503461000e5760208060031936011261000e576004356102e4610b6a565b506103a76001600160a01b036102ff81600254163314610a70565b6003541692600080600454610312610b6a565b5061037860409586928351908782015286815261032e816104b7565b8351908988830152878252610342826104b7565b61039b8551610350816104e0565b87815261038b875196879460808d87019a61036b8c60049052565b87015260a08601906109c5565b601f1995868683030160608701526109c5565b90848483030160808501526109c5565b03908101835282610518565b51907301000000000000000000000000000000000000065afa906103c9610926565b911561040d5750610144936103e06103e892610bd8565b938491610de7565b5191829182919091604080606083019480518452602081015160208501520151910152565b60649083519062461bcd60e51b82526004820152600c60248201527f7369676e3a206661696c656400000000000000000000000000000000000000006044820152fd5b503461000e57600036600319011261000e5760206001600160a01b0360025416604051908152f35b503461000e57600036600319011261000e5760206001600160a01b0360035416604051908152f35b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176104d357604052565b6104db6104a0565b604052565b6020810190811067ffffffffffffffff8211176104d357604052565b60e0810190811067ffffffffffffffff8211176104d357604052565b90601f8019910116810190811067ffffffffffffffff8211176104d357604052565b60209067ffffffffffffffff8111610558575b601f01601f19160190565b6105606104a0565b61054d565b602081519101519060208110610579575090565b6000199060200360031b1b1690565b6040805190610596826104e0565b60008252805191600080602092856105bd85820192868452878084015260608301906109c5565b03956105d1601f1997888101835282610518565b51907301000000000000000000000000000000000000015afa6105f2610926565b90156106b1576000816106058293610565565b956106278651918261039b88820195600487528a8084015260608301906109c5565b51907301000000000000000000000000000000000000055afa91610649610926565b921561066e575081816106659261066b94518301019101610a2c565b506106f4565b91565b60649250519062461bcd60e51b82526004820152601b60248201527f67656e207369676e696e67206b6579706169723a206661696c656400000000006044820152fd5b50606491519062461bcd60e51b82526004820152601360248201527f72616e646f6d42797465733a206661696c6564000000000000000000000000006044820152fd5b60218151036108095761070b60218201519161081b565b5160f81c60006002821415806107fe575b6107ec578060405160208101906020825260206040820152602060608201526401000003d01980600781808a80098a090860808301527f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffff0c60a083015260c082015260c0815261078a816104fc565b519060055afa91610799610926565b92156107da576107be6107b86107b16107c795610565565b93846108e8565b60011690565b6107ca57610956565b90565b906107d4906108f5565b90610956565b60405163102875ed60e01b8152600490fd5b60405163ab4be04160e01b8152600490fd5b50600382141561071c565b604051636446a2c560e11b8152600490fd5b8051156108285760200190565b634e487b7160e01b600052603260045260246000fd5b8051600210156108285760220190565b8051600110156108285760210190565b8051600310156108285760230190565b8051600410156108285760240190565b908151811015610828570160200190565b50634e487b7160e01b600052601160045260246000fd5b60040190816004116108b457565b6108bc61088f565b565b90600182018092116108b457565b90600482018092116108b457565b90600282018092116108b457565b919082018092116108b457565b6401000003d019908103919082116108b457565b6000198101919082116108b457565b60200390602082116108b457565b3d15610951573d906109378261053a565b916109456040519384610518565b82523d6000602084013e565b606090565b6001600160a01b039160405190602082019283526040820152604081526060810181811067ffffffffffffffff821117610995575b6040525190201690565b61099d6104a0565b61098b565b60005b8381106109b55750506000910152565b81810151838201526020016109a5565b906020916109de815180928185528580860191016109a2565b601f01601f1916010190565b81601f8201121561000e578051610a008161053a565b92610a0e6040519485610518565b8184526020828401011161000e576107c791602080850191016109a2565b91909160408184031261000e5780519267ffffffffffffffff9384811161000e5781610a599184016109ea565b93602083015190811161000e576107c792016109ea565b15610a7757565b60405162461bcd60e51b815260206004820152600a60248201527f4f6e6c79204f776e6572000000000000000000000000000000000000000000006044820152606490fd5b90600182811c92168015610aec575b6020831014610ad657565b634e487b7160e01b600052602260045260246000fd5b91607f1691610acb565b90601f8211610b03575050565b6001916000908382527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6906020601f850160051c83019410610b60575b601f0160051c01915b828110610b565750505050565b8181558301610b49565b9092508290610b40565b604051906060820182811067ffffffffffffffff821117610b9b575b60405260006040838281528260208201520152565b610ba36104a0565b610b86565b908160031b917f1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8116036108b457565b90610be1610b6a565b916008815110610d93576001600160f81b0319600360fc1b81610c14610c068561081b565b516001600160f81b03191690565b1603610d9357600160f91b8082610c2d610c068661083e565b1603610d9357610c51610c4b610c45610c068661084e565b60f81c90565b60ff1690565b91610c64610c4b610c45610c068761085e565b9260218411610d9357610c76846108a6565b90610c92610c4b610c45610c06610c8c866108be565b8a61087e565b9360218511610d9357610cb8610cab610c06858a61087e565b6001600160f81b03191690565b03610d935780610cd0610ccb86886108e8565b6108cc565b03610d9357610ce08651916108da565b03610d9357610cee906108da565b9060049060218514610da5575b60218414610d60575b50906020809286010151940101519160208110610d49575b5060208110610d31575b509083526020830152565b610d3d610d4291610918565b610ba8565b1c38610d26565b610d3d610d5891949294610918565b1c9138610d1c565b610d70610c06848896949661087e565b16610d93576020610d8a610d8482946108be565b92610909565b93919250610d04565b6040516386cd05c560e01b8152600490fd5b939084610db4610c068861086e565b16610dcb5750610dc5600591610909565b93610cfb565b6040516386cd05c560e01b8152fd5b506040513d6000823e3d90fd5b9160408101601b8152815191602081016020610e21825160405196888860609194939260808201958252601b602083015260408201520152565b856000968792838052039060015afa15610ed6575b83516001600160a01b038097169687911603610e55575b505050505050565b610ea794610e8b8593601c602096525192516040519384938460609194939260808201958252601c602083015260408201520152565b838052039060015afa15610ec9575b516001600160a01b031690565b03610eb757388080808080610e4d565b604051634532600d60e01b8152600490fd5b610ed1610dda565b610e9a565b610ede610dda565b610e3656fea2646970667358221220a290e5bfd6e486dbc20f03388b9de304b09a1d64b4547b0fdf3aa4c31154f72864736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b6000803560e01c90816319ab453c1461007a57508063290bb45314610071578063799cd333146100685780638da5cb5b1461005f5763ccb3c9d11461005757600080fd5b61000e610478565b5061000e610450565b5061000e6102c6565b5061000e610189565b3461018657602036600319011261018657600435906001600160a01b038216809203610186575460ff166101485773ffffffffffffffffffffffffffffffffffffffff1960025416176002556101036100da6100d4610588565b60045590565b6001600160a01b031673ffffffffffffffffffffffffffffffffffffffff196003541617600355565b610115600160ff196000541617600055565b61014461012a6002546001600160a01b031690565b6040516001600160a01b0390911681529081906020820190565b0390f35b62461bcd60e51b6080526020608452601260a4527f416c7265616479496e697469616c697a6564000000000000000000000000000060c45260646080fd5b80fd5b503461000e5760208060031936011261000e5760043567ffffffffffffffff80821161000e573660238301121561000e57816004013590811161000e5760243681838501011161000e576101e96001600160a01b03600254163314610a70565b6001926101ff836101fa8654610abc565b610af6565b600094601f841160011461023d575093829394600093610230575b505050600019600383901b1c191690821b179055005b010135905038808061021a565b91601f1984169561027060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690565b9381905b8882106102ad57505084869710610291575b50505050811b019055005b60001960f88660031b161c199201013516905538808080610286565b8088849786839596890101358155019601920190610274565b503461000e5760208060031936011261000e576004356102e4610b6a565b506103a76001600160a01b036102ff81600254163314610a70565b6003541692600080600454610312610b6a565b5061037860409586928351908782015286815261032e816104b7565b8351908988830152878252610342826104b7565b61039b8551610350816104e0565b87815261038b875196879460808d87019a61036b8c60049052565b87015260a08601906109c5565b601f1995868683030160608701526109c5565b90848483030160808501526109c5565b03908101835282610518565b51907301000000000000000000000000000000000000065afa906103c9610926565b911561040d5750610144936103e06103e892610bd8565b938491610de7565b5191829182919091604080606083019480518452602081015160208501520151910152565b60649083519062461bcd60e51b82526004820152600c60248201527f7369676e3a206661696c656400000000000000000000000000000000000000006044820152fd5b503461000e57600036600319011261000e5760206001600160a01b0360025416604051908152f35b503461000e57600036600319011261000e5760206001600160a01b0360035416604051908152f35b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176104d357604052565b6104db6104a0565b604052565b6020810190811067ffffffffffffffff8211176104d357604052565b60e0810190811067ffffffffffffffff8211176104d357604052565b90601f8019910116810190811067ffffffffffffffff8211176104d357604052565b60209067ffffffffffffffff8111610558575b601f01601f19160190565b6105606104a0565b61054d565b602081519101519060208110610579575090565b6000199060200360031b1b1690565b6040805190610596826104e0565b60008252805191600080602092856105bd85820192868452878084015260608301906109c5565b03956105d1601f1997888101835282610518565b51907301000000000000000000000000000000000000015afa6105f2610926565b90156106b1576000816106058293610565565b956106278651918261039b88820195600487528a8084015260608301906109c5565b51907301000000000000000000000000000000000000055afa91610649610926565b921561066e575081816106659261066b94518301019101610a2c565b506106f4565b91565b60649250519062461bcd60e51b82526004820152601b60248201527f67656e207369676e696e67206b6579706169723a206661696c656400000000006044820152fd5b50606491519062461bcd60e51b82526004820152601360248201527f72616e646f6d42797465733a206661696c6564000000000000000000000000006044820152fd5b60218151036108095761070b60218201519161081b565b5160f81c60006002821415806107fe575b6107ec578060405160208101906020825260206040820152602060608201526401000003d01980600781808a80098a090860808301527f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffff0c60a083015260c082015260c0815261078a816104fc565b519060055afa91610799610926565b92156107da576107be6107b86107b16107c795610565565b93846108e8565b60011690565b6107ca57610956565b90565b906107d4906108f5565b90610956565b60405163102875ed60e01b8152600490fd5b60405163ab4be04160e01b8152600490fd5b50600382141561071c565b604051636446a2c560e11b8152600490fd5b8051156108285760200190565b634e487b7160e01b600052603260045260246000fd5b8051600210156108285760220190565b8051600110156108285760210190565b8051600310156108285760230190565b8051600410156108285760240190565b908151811015610828570160200190565b50634e487b7160e01b600052601160045260246000fd5b60040190816004116108b457565b6108bc61088f565b565b90600182018092116108b457565b90600482018092116108b457565b90600282018092116108b457565b919082018092116108b457565b6401000003d019908103919082116108b457565b6000198101919082116108b457565b60200390602082116108b457565b3d15610951573d906109378261053a565b916109456040519384610518565b82523d6000602084013e565b606090565b6001600160a01b039160405190602082019283526040820152604081526060810181811067ffffffffffffffff821117610995575b6040525190201690565b61099d6104a0565b61098b565b60005b8381106109b55750506000910152565b81810151838201526020016109a5565b906020916109de815180928185528580860191016109a2565b601f01601f1916010190565b81601f8201121561000e578051610a008161053a565b92610a0e6040519485610518565b8184526020828401011161000e576107c791602080850191016109a2565b91909160408184031261000e5780519267ffffffffffffffff9384811161000e5781610a599184016109ea565b93602083015190811161000e576107c792016109ea565b15610a7757565b60405162461bcd60e51b815260206004820152600a60248201527f4f6e6c79204f776e6572000000000000000000000000000000000000000000006044820152606490fd5b90600182811c92168015610aec575b6020831014610ad657565b634e487b7160e01b600052602260045260246000fd5b91607f1691610acb565b90601f8211610b03575050565b6001916000908382527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6906020601f850160051c83019410610b60575b601f0160051c01915b828110610b565750505050565b8181558301610b49565b9092508290610b40565b604051906060820182811067ffffffffffffffff821117610b9b575b60405260006040838281528260208201520152565b610ba36104a0565b610b86565b908160031b917f1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8116036108b457565b90610be1610b6a565b916008815110610d93576001600160f81b0319600360fc1b81610c14610c068561081b565b516001600160f81b03191690565b1603610d9357600160f91b8082610c2d610c068661083e565b1603610d9357610c51610c4b610c45610c068661084e565b60f81c90565b60ff1690565b91610c64610c4b610c45610c068761085e565b9260218411610d9357610c76846108a6565b90610c92610c4b610c45610c06610c8c866108be565b8a61087e565b9360218511610d9357610cb8610cab610c06858a61087e565b6001600160f81b03191690565b03610d935780610cd0610ccb86886108e8565b6108cc565b03610d9357610ce08651916108da565b03610d9357610cee906108da565b9060049060218514610da5575b60218414610d60575b50906020809286010151940101519160208110610d49575b5060208110610d31575b509083526020830152565b610d3d610d4291610918565b610ba8565b1c38610d26565b610d3d610d5891949294610918565b1c9138610d1c565b610d70610c06848896949661087e565b16610d93576020610d8a610d8482946108be565b92610909565b93919250610d04565b6040516386cd05c560e01b8152600490fd5b939084610db4610c068861086e565b16610dcb5750610dc5600591610909565b93610cfb565b6040516386cd05c560e01b8152fd5b506040513d6000823e3d90fd5b9160408101601b8152815191602081016020610e21825160405196888860609194939260808201958252601b602083015260408201520152565b856000968792838052039060015afa15610ed6575b83516001600160a01b038097169687911603610e55575b505050505050565b610ea794610e8b8593601c602096525192516040519384938460609194939260808201958252601c602083015260408201520152565b838052039060015afa15610ec9575b516001600160a01b031690565b03610eb757388080808080610e4d565b604051634532600d60e01b8152600490fd5b610ed1610dda565b610e9a565b610ede610dda565b610e3656fea2646970667358221220a290e5bfd6e486dbc20f03388b9de304b09a1d64b4547b0fdf3aa4c31154f72864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10290,
        "contract": "contracts/modules/KeyManagementContractRegistryModule/KeyManagement.sol:KeyManagement",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10292,
        "contract": "contracts/modules/KeyManagementContractRegistryModule/KeyManagement.sol:KeyManagement",
        "label": "_initPassword",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10294,
        "contract": "contracts/modules/KeyManagementContractRegistryModule/KeyManagement.sol:KeyManagement",
        "label": "_password",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 10296,
        "contract": "contracts/modules/KeyManagementContractRegistryModule/KeyManagement.sol:KeyManagement",
        "label": "owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10298,
        "contract": "contracts/modules/KeyManagementContractRegistryModule/KeyManagement.sol:KeyManagement",
        "label": "keypairAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10300,
        "contract": "contracts/modules/KeyManagementContractRegistryModule/KeyManagement.sol:KeyManagement",
        "label": "keypairSecret",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}